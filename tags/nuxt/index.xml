<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nuxt on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/nuxt/</link><description>Recent content in Nuxt on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 06 Dec 2024 00:18:53 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/nuxt/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuxt.js 应用中的 afterResponse 事件钩子</title><link>https://blog.cmdragon.cn/posts/0099146574320c07d4d7bae1b6b526e4/</link><pubDate>Fri, 06 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0099146574320c07d4d7bae1b6b526e4/</guid><description>在 Web 应用程序中，响应的后续处理是提升用户体验，进行数据分析和监控的重要组成部分。Nuxt.js 提供的 afterResponse 钩子允许开发者在发送响应之后实施自定义操作，这一机制有助于进行任务如记录日志、监控性能等。</description></item><item><title>Nuxt.js 应用中的 beforeResponse 事件钩子</title><link>https://blog.cmdragon.cn/posts/a53897bbc3efd267f867b8ad06770144/</link><pubDate>Thu, 05 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a53897bbc3efd267f867b8ad06770144/</guid><description>在 Web 开发中，处理响应是一个至关重要的环节。Nuxt.js 提供的 beforeResponse 钩子允许开发者在发送响应之前对结果进行修改或处理。这一机制非常有助于确保返回给客户端的数据格式、内容以及响应头等符合特定需求，从而提升用户体验和系统的稳定性。</description></item><item><title>Nuxt.js 应用中的 request 事件钩子</title><link>https://blog.cmdragon.cn/posts/d821e2e0d8af1f6e0a02aa2f6cddf24e/</link><pubDate>Wed, 04 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d821e2e0d8af1f6e0a02aa2f6cddf24e/</guid><description>在构建现代 Web 应用时，处理请求是核心内容之一。无论是从后端获取数据，还是处理用户请求、验证和授权，正确地处理请求能够确保应用的稳定性、可维护性和用户体验。Nuxt.js 提供了 request 钩子，允许开发者在接收到请求时进行自定义处理，这为复杂应用提供了极大的灵活性。</description></item><item><title>Nuxt.js 应用中的 error 事件钩子</title><link>https://blog.cmdragon.cn/posts/759227261e4312110b135b98dc240788/</link><pubDate>Tue, 03 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/759227261e4312110b135b98dc240788/</guid><description>在任何 Web 应用中，错误是不可避免的。无论是网络请求失败、服务器错误、还是用户输入不合法，这些错误都可能影响用户体验和应用的稳定性。为了提升恢复能力和用户体验，Nuxt.js 提供了 error 钩子，允许开发者在应用中集中处理错误，记录错误信息，并根据具体情况进行适当的处理。</description></item><item><title>Nuxt.js 应用中的 close 事件钩子</title><link>https://blog.cmdragon.cn/posts/0b73d77cbbe52c67c56d4a15a499885e/</link><pubDate>Mon, 02 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0b73d77cbbe52c67c56d4a15a499885e/</guid><description>close 钩子在 Nuxt.js 的 Nitro 模块生命周期中起着重要的作用。当 Nitro 关闭时，这个钩子会被调用。通常用于进行清理操作或释放资源，确保应用在关闭时不会造成资源泄漏。</description></item><item><title>Nuxt.js 应用中的 render：island 事件钩子</title><link>https://blog.cmdragon.cn/posts/a788981a66c14c5edd407545ac29b6ee/</link><pubDate>Sun, 01 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a788981a66c14c5edd407545ac29b6ee/</guid><description>在 Nuxt.js 中，render:island 钩子允许开发者在构建“岛屿”HTML之前进行处理和修改。此钩子为实现复杂的客户端交互和动态内容提供了基本支持，特别适合与服务器渲染和客户端渲染混合使用的场景。</description></item><item><title>Nuxt.js 应用中的 render：html 事件钩子</title><link>https://blog.cmdragon.cn/posts/e2e4ffc078733570a7b98d6f0dd9ea13/</link><pubDate>Sat, 30 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e2e4ffc078733570a7b98d6f0dd9ea13/</guid><description>在构建 HTML 内容时，能够对其进行动态修改是非常有用的。render:html 钩子为开发者提供了在 HTML 被构建之前的最后机会去调整内容。这对于自定义渲染行为、注入额外的脚本或数据，以及实现复杂的 SEO 优化等场景非常重要。</description></item><item><title>Nuxt.js 应用中的 render：response 事件钩子</title><link>https://blog.cmdragon.cn/posts/b12508be9c4fb6b8f0499948ecd68ad9/</link><pubDate>Fri, 29 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b12508be9c4fb6b8f0499948ecd68ad9/</guid><description>render:response 是一个在 Nuxt.js 中与服务器端渲染（SSR）相关的钩子，它会在请求的响应发送之前被调用。这个钩子的目的是让开发者可以在响应发送之前对响应进行修改或处理。此钩子接收两个参数：response 和 event。</description></item><item><title>Nuxt.js 应用中的 dev：ssr-logs 事件钩子</title><link>https://blog.cmdragon.cn/posts/ef86af3b9be34b11d75fa32951b147bd/</link><pubDate>Thu, 28 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ef86af3b9be34b11d75fa32951b147bd/</guid><description>dev:ssr-logs 是一个用在服务器端渲染（SSR）中，用于输出日志的事件钩子。这个钩子会在请求周期结束时被调用，产生的参数包括日志路径与日志内容。这对于调试和监控服务器端的行为非常有用，特别是在开发环境下。</description></item><item><title>Nuxt.js 应用中的 webpack：progress 事件钩子</title><link>https://blog.cmdragon.cn/posts/47b46cd0c184932afc8428cccb2e3bc8/</link><pubDate>Wed, 27 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/47b46cd0c184932afc8428cccb2e3bc8/</guid><description>webpack:progress 钩子用于监听 Webpack 在构建过程中的进度更新。这是一个非常有用的特性，特别是在构建大型应用时，可以给开发者实时反馈，以便他们知道构建的进展情况。</description></item><item><title>Nuxt.js 应用中的 webpack：done 事件钩子</title><link>https://blog.cmdragon.cn/posts/4d17f3c1bc0c28b6f117688edab9cd9a/</link><pubDate>Tue, 26 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4d17f3c1bc0c28b6f117688edab9cd9a/</guid><description>webpack:done 钩子用于处理 Webpack 编译完成后的逻辑。在 Webpack 编译的所有任务完成后，这个钩子会被调用，通常用于通知开发者编译的状态、执行清理工作或作为开发工具的提示。</description></item><item><title>Nuxt.js 应用中的 webpack：error 事件钩子</title><link>https://blog.cmdragon.cn/posts/8de760bec83aa6eedb15a70959e37ac5/</link><pubDate>Mon, 25 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8de760bec83aa6eedb15a70959e37ac5/</guid><description>webpack:error 钩子是用于在 Webpack 编译过程中捕获和处理错误的一个重要机制。当发生编译错误时，这个钩子会被调用，通常用于在 UI 上给出反馈或者处理错误日志。</description></item><item><title>Nuxt.js 应用中的 webpack：change 事件钩子</title><link>https://blog.cmdragon.cn/posts/871f2adb90d3346f48ea362ee434cee3/</link><pubDate>Sun, 24 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/871f2adb90d3346f48ea362ee434cee3/</guid><description>通过webpack:change钩子，开发者可以知道哪些文件被修改，并可以进行适当的处理，比如重新加载相关模块，或更新用户界面等。</description></item><item><title>Nuxt.js 应用中的 webpack：compiled 事件钩子</title><link>https://blog.cmdragon.cn/posts/077a6b701325cff54c081bf5946d5477/</link><pubDate>Sat, 23 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/077a6b701325cff54c081bf5946d5477/</guid><description>webpack:compiled 钩子是在 Webpack 完成编译后调用的一个重要钩子。它允许开发者在资源加载并生成后的时刻执行一些特定的操作，比如处理生成的文件、记录日志、或者进行特定的清理工作。</description></item><item><title>Nuxt.js 应用中的 webpack：compile 事件钩子</title><link>https://blog.cmdragon.cn/posts/375bd210d2c7634b026886f4fd5e7ff0/</link><pubDate>Fri, 22 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/375bd210d2c7634b026886f4fd5e7ff0/</guid><description>webpack:compile 钩子是 Nuxt.js 和 Webpack 集成中的一个重要部分，它允许开发者在实际编译过程开始之前执行一些自定义逻辑。通过这一钩子，您可以获取编译的选项并进行相应的修改，为构建定制化处理。</description></item><item><title>Nuxt.js 应用中的 webpack：configResolved事件钩子</title><link>https://blog.cmdragon.cn/posts/c9d5ec8a241258b72058270c7c4a22e5/</link><pubDate>Thu, 21 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c9d5ec8a241258b72058270c7c4a22e5/</guid><description>在 Nuxt.js 项目中，webpack:configResolved 钩子允许开发者在 Webpack 配置被解析后读取和修改该配置。这一钩子在所有 Webpack 配置被合并和确定后调用，为开发者提供了更进一步自定义的机会。</description></item><item><title>Nuxt.js 应用中的 webpackConfigs 事件钩子</title><link>https://blog.cmdragon.cn/posts/27df5b46451b376fa9dbeae0b579612f/</link><pubDate>Wed, 20 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/27df5b46451b376fa9dbeae0b579612f/</guid><description>在 Nuxt.js 项目中，webpack:config 钩子允许运行时对 Webpack 配置进行修改。此钩子在配置 Webpack 编译器之前被调用，使得开发者能根据需要定制和扩展 Webpack 的默认配置。</description></item><item><title>Nuxt.js 应用中的 vite：compiled 事件钩子</title><link>https://blog.cmdragon.cn/posts/11098eb685e9bd4009275da31c80ae6d/</link><pubDate>Tue, 19 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/11098eb685e9bd4009275da31c80ae6d/</guid><description>在 Nuxt 3 中，vite:compiled 钩子允许开发者在 Vite 编译完成后执行自定义逻辑。通过这个钩子，开发者可以在代码编译完成后进行一些必要的处理，比如输出编译状态、更新 UI 或触发其他事件。</description></item><item><title>Nuxt.js 应用中的 vite：serverCreated 事件钩子</title><link>https://blog.cmdragon.cn/posts/29cac3fa837d4b767f01a77d6adc60e1/</link><pubDate>Mon, 18 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/29cac3fa837d4b767f01a77d6adc60e1/</guid><description>通过使用 vite:serverCreated 钩子，开发者可以在 Vite 服务器创建时执行特定的操作，包括添加中间件和自定义配置。这使得在开发环境中能够快速响应请求及调整服务器行为，从而提升开发效率和用户体验。</description></item><item><title>Nuxt.js 应用中的 vite：configResolved 事件钩子</title><link>https://blog.cmdragon.cn/posts/2d9f94579481d38e0e9a7569cdfc31cb/</link><pubDate>Sun, 17 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2d9f94579481d38e0e9a7569cdfc31cb/</guid><description>在 Nuxt 3 中，vite:configResolved 钩子允许开发者在 Vite 配置被解析后访问已解析的配置项。这使得在构建过程中能够根据最终的配置进行动态调整和扩展。</description></item><item><title>Nuxt.js 应用中的 vite：extendConfig 事件钩子</title><link>https://blog.cmdragon.cn/posts/6bbb5474e945ea9d9a79c6cfcb6ec585/</link><pubDate>Sat, 16 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6bbb5474e945ea9d9a79c6cfcb6ec585/</guid><description>通过合理使用 vite:extendConfig 钩子，开发者可以极大地增强 Nuxt 3 项目的灵活性和功能性，为不同的项目需求量身定制 Vite 配置。无论是添加插件、调整构建选项还是配置开发服务器，这些扩展可以有效提升开发体验和应用性能。</description></item><item><title>Nuxt.js 应用中的 schema：written 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/bbc449caa5e31f1084aed152323c2758/</link><pubDate>Fri, 15 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bbc449caa5e31f1084aed152323c2758/</guid><description>schema:written 钩子是 Vite 提供的一种生命周期钩子，在模式写入完成后调用。通过这个钩子，开发者可以在配置被正式应用之后执行一些后续操作，比如记录日志、初始化服务或调整系统状态。本文将深入探讨该钩子的用法及多种应用场景。</description></item><item><title>Nuxt.js 应用中的 schema：beforeWrite 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/9303f1529d95797ca3241f21e2fbc34d/</link><pubDate>Thu, 14 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9303f1529d95797ca3241f21e2fbc34d/</guid><description>schema:beforeWrite 钩子是 Vite 提供的一个功能强大的生命周期钩子，允许开发者在 JSON Schema 被写入之前执行自定义操作。利用这个钩子，您可以对模式进行修改、添加验证逻辑或动态调整配置选项，从而提高应用的灵活性和定制化水平。</description></item><item><title>Nuxt.js 应用中的 schema：resolved 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/0a60978d2ce7bbcd5b86f9de0e5c99e2/</link><pubDate>Wed, 13 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0a60978d2ce7bbcd5b86f9de0e5c99e2/</guid><description>schema:resolved 钩子允许开发者在 Vite 中扩展已解析的 JSON Schema。这使得开发者能够对 Vite 的配置进行更细粒度的控制和定制，从而更好地满足项目需求。</description></item><item><title>Nuxt.js 应用中的 vite：extendConfig 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/7f2f4ee1ef433b4a19daa99da7bd9f07/</link><pubDate>Tue, 12 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7f2f4ee1ef433b4a19daa99da7bd9f07/</guid><description>vite:extendConfig 钩子允许开发者在 Vite 项目中扩展默认配置。这使得开发者可以根据特定需求自定义 Vite 的构建和开发行为，增强开发体验。</description></item><item><title>Nuxt.js 应用中的 vite：extend 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/cdba81aa5bb32dcc233a8bd29adee923/</link><pubDate>Mon, 11 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cdba81aa5bb32dcc233a8bd29adee923/</guid><description>vite:extend 钩子允许开发者在 Vite 项目中扩展默认开发和构建配置。这使得开发者能够根据特定需求自定义 Vite 的行为，增强开发体验。</description></item><item><title>Nuxt.js 应用中的 schema：extend事件钩子详解</title><link>https://blog.cmdragon.cn/posts/b1d6a0b2258a699dc8415d298eecab45/</link><pubDate>Sun, 10 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b1d6a0b2258a699dc8415d298eecab45/</guid><description>schema:extend 钩子使开发者能够扩展默认数据模式，为特定业务需求添加自定义字段和验证。</description></item><item><title>Nuxt.js 应用中的 listen 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/59f320ae722d9803c0c4eb42ccb295b2/</link><pubDate>Sat, 09 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/59f320ae722d9803c0c4eb42ccb295b2/</guid><description>它为开发者提供了一个自由的空间可以在开发服务器启动时插入自定义逻辑。通过合理利用这个钩子，开发者能够提升代码的可维护性和调试能力。注意处理性能、错误和环境等方面的问题可以帮助您构建一个更加稳定和高效的应用。</description></item><item><title>Nuxt.js 应用中的 prepare：types 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/68419c6dd94db64cbb46673ab19a5146/</link><pubDate>Fri, 08 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/68419c6dd94db64cbb46673ab19a5146/</guid><description>prepare:types 钩子为 Nuxt.js 开发者提供了灵活定制 TypeScript 配置和声明的能力。通过使用此钩子，开发者能够确保 TypeScript 配置和类型声明能够满足他们的项目需求，提升代码的可维护性和类型安全性。</description></item><item><title>Nuxt.js 应用中的 build：error 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/4a5e09829cf63001943fc481d69e01e0/</link><pubDate>Thu, 07 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4a5e09829cf63001943fc481d69e01e0/</guid><description>build:error 是 Nuxt.js 中的一个生命周期钩子，当构建过程中发生错误时，该钩子将被调用。通过此钩子，开发者可以捕获和响应构建错误，进行相应的处理，例如记录日志或通知开发团队。</description></item><item><title>Nuxt.js 应用中的 prerender：routes 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/7a11deaf9e3d140fd18d7ad3cde4b9d7/</link><pubDate>Wed, 06 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7a11deaf9e3d140fd18d7ad3cde4b9d7/</guid><description>prerender:routes 是 Nuxt.js 中的一个钩子，允许开发者在预渲染过程中扩展要预渲染的路由列表。这对于静态站点生成（SSG）尤为重要，开发者可以根据需求添加额外的动态路由或者其他需要预渲染的页面。</description></item><item><title>Nuxt.js 应用中的 nitro：build：public-assets 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/271508b42bc005f41e4fa31830a84e83/</link><pubDate>Tue, 05 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/271508b42bc005f41e4fa31830a84e83/</guid><description>nitro:build:public-assets 是 Nuxt 3 中的一个生命周期钩子，在复制公共资产之后调用。该钩子使开发者能够在构建 Nitro 服务器之前，对公共资产进行修改或处理，比如添加、删除或修改文件。</description></item><item><title>Nuxt.js 应用中的 nitro：build：before 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/a2820600faa85b49967d91cb7617c284/</link><pubDate>Mon, 04 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a2820600faa85b49967d91cb7617c284/</guid><description>nitro:build:before 是 Nuxt 3 中的一个生命周期钩子，专门用于在构建 Nitro 实例之前调用。这个钩子允许开发者在 Nitro 实例构建之前执行特定的操作，从而对构建过程进行定制和优化。</description></item><item><title>Nuxt.js 应用中的 nitro：init 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/a8d7636d5643bafcee2bcc1767dcfa3b/</link><pubDate>Sun, 03 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a8d7636d5643bafcee2bcc1767dcfa3b/</guid><description>nitro:init 是 Nuxt 3 中的一个生命周期钩子，在 Nitro 初始化完成后被调用。这个钩子允许开发者注册 Nitro 钩子，并直接与 Nitro 进行交互。这种灵活性使得开发者能够增强和自定义 Nitro 的行为，以适应特定的需求。</description></item><item><title>Nuxt.js 应用中的 nitro：config 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/927aa434dc4886c8c357c9000e072b19/</link><pubDate>Sat, 02 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/927aa434dc4886c8c357c9000e072b19/</guid><description>nitro:config 是 Nuxt 3 中的一个生命周期钩子，允许开发者在初始化 Nitro 之前自定义 Nitro 的配置。Nitro 是 Nuxt 3 的服务器引擎，负责处理请求、渲染响应和处理其他后端逻辑。通过使用 nitro:config 钩子，开发者可以灵活地调整 Nitro 的行为，以满足特定的需求。</description></item><item><title>Nuxt.js 应用中的 components：extend 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/1189b069abd2cfe9869abbbb4f7f340b/</link><pubDate>Fri, 01 Nov 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1189b069abd2cfe9869abbbb4f7f340b/</guid><description>components:extend 是 Nuxt.js 中的一个生命周期钩子，允许开发者扩展新的组件到项目中。通过这个钩子，开发者可以动态地添加额外的组件，从而增强项目的功能和灵活性。</description></item><item><title>Nuxt.js 应用中的 components：dirs 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/06467028093d81da701fced5b84150cb/</link><pubDate>Thu, 31 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/06467028093d81da701fced5b84150cb/</guid><description>components:dirs 是 Nuxt.js 中的一个生命周期钩子，用于在 app:resolve 期间扩展自动导入组件的目录。通过这个钩子，开发者可以动态地添加新的组件目录，从而增强项目的灵活性和可扩展性。</description></item><item><title>Nuxt.js 应用中的 imports：dirs 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/d59459d9a47584d99ecdca9732024835/</link><pubDate>Wed, 30 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d59459d9a47584d99ecdca9732024835/</guid><description>imports:dirs 是 Nuxt.js 中的一个生命周期钩子，用于扩展导入目录。通过这个钩子，开发者可以灵活地添加、修改或删除项目中的导入目录，从而提高模块的可扩展性和灵活性。</description></item><item><title>Nuxt.js 应用中的 imports：context 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/e94c7e1071e2541e95713c53eafd79ef/</link><pubDate>Tue, 29 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e94c7e1071e2541e95713c53eafd79ef/</guid><description>imports:context 是 Nuxt.js 中的一个生命周期钩子，主要用于在创建 unimport 上下文时调用。这个钩子为开发者提供了对模块导入上下文的操作能力，方便进行动态编译和导入配置。</description></item><item><title>Nuxt.js 应用中的 imports：extend 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/1d6dcd3025621c288fddb7d17465133c/</link><pubDate>Mon, 28 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1d6dcd3025621c288fddb7d17465133c/</guid><description>imports:extend 是 Nuxt.js 中的一个生命周期钩子，允许开发者在模块设置过程中扩展导入。使用此钩子，开发者可以灵活地管理和调整模块的导入配置，从而增强模块的功能。</description></item><item><title>Nuxt.js 应用中的 imports：sources 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/cf392e5071f22b4179114cece7e0e8b1/</link><pubDate>Sun, 27 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cf392e5071f22b4179114cece7e0e8b1/</guid><description>imports:sources 是 Nuxt.js 的一个生命周期钩子，用于在模块设置过程中执行。开发者可以利用这个钩子来扩展模块的源，方便地管理依赖和模块化配置。</description></item><item><title>Nuxt.js 应用中的 server：devHandler 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/e3271aac91ec30fc15176811b001ed48/</link><pubDate>Sat, 26 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e3271aac91ec30fc15176811b001ed48/</guid><description>server:devHandler 是 Nuxt.js 中的一个生命周期钩子，它在 Nitro 开发服务器注册开发中间件时被调用。使用这个钩子，开发者可以为开发服务器添加自定义中间件，从而丰富应用的处理逻辑和功能。</description></item><item><title>Nuxt.js 应用中的 pages：extend 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/22eb7478a08b6f78043cd5fae24c7ad4/</link><pubDate>Fri, 25 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/22eb7478a08b6f78043cd5fae24c7ad4/</guid><description>pages:extend 是 Nuxt.js 中的一个生命周期钩子，在页面路由解析完成后被调用。这个钩子允许开发者添加、修改或删除路由配置，为自定义页面路由的管理提供灵活性，进而影响整个应用的导航。</description></item><item><title>Nuxt.js 应用中的 builder：watch 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/4cfe5f35f1a903646731a6c05a54d1dc/</link><pubDate>Thu, 24 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4cfe5f35f1a903646731a6c05a54d1dc/</guid><description>builder:watch 是 Nuxt.js 中的一个生命周期钩子，在开发环境的构建过程期间被调用。它允许开发者在监视到项目中的文件或目录发生变化时，执行特定的操作。这对于实现自定义构建过程或响应代码更改非常有用，使得开发体验更为高效。</description></item><item><title>Nuxt.js 应用中的 builder：generateApp 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/1191139984bd4df519af6d16a616949e/</link><pubDate>Wed, 23 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1191139984bd4df519af6d16a616949e/</guid><description>builder:generateApp 是 Nuxt.js 的一个生命周期钩子，它在生成应用程序之前被调用。这个钩子为开发者提供了一个机会，可以在生成过程开始之前修改或配置生成的应用程序的选项。这对于优化生成过程或注入特定配置非常有</description></item><item><title>Nuxt.js 应用中的 build：manifest 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/d69fdaae50601566d6f15c4e837c7cf3/</link><pubDate>Tue, 22 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d69fdaae50601566d6f15c4e837c7cf3/</guid><description>build:manifest 是 Nuxt.js 中的一个生命周期钩子，它在 Vite 和 Webpack 构建清单期间被调用。利用这个钩子，开发者可以自定义 Nitro 渲染在最终 HTML 中的标签所使用的清单。这为对构建输出的深入控制提供了可能，开发者可以根据实际需要调整脚本和样式的引入方式。</description></item><item><title>Nuxt.js 应用中的 build：done 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/7b79085749b7f156ed36cf16fca42310/</link><pubDate>Mon, 21 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7b79085749b7f156ed36cf16fca42310/</guid><description>build:done 是 Nuxt.js 的一个生命周期钩子，它在 Nuxt 应用的打包构建器完成运行后被调用。这个钩子为开发者提供了一个在构建过程结束后执行特定逻辑的机会，可以用于处理构建完成后的操作，如清理、通知、发布等。</description></item><item><title>Nuxt.js 应用中的 build：before 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/81e5857d6d3ff5e375f0f6734e25daac/</link><pubDate>Sun, 20 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/81e5857d6d3ff5e375f0f6734e25daac/</guid><description>build:before 钩子在 Nuxt.js 中是一种有力的工具，使开发者能够在应用的构建流程开始之前进行自定义处理和配置。在处理动态需求和配置时，开发者可以充分利用这个钩子来增强应用的有效性和灵活性。</description></item><item><title>Nuxt.js 应用中的 app：templatesGenerated 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/3c565b88d4290c513e7c55ef934ec509/</link><pubDate>Sat, 19 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/3c565b88d4290c513e7c55ef934ec509/</guid><description>app:templatesGenerated 是 Nuxt.js 的一个生命周期钩子，在模板编译到虚拟文件系统（Virtual File System, VFS）之后被调用。这个钩子允许开发者在生成的模板文件准备好之后进行进一步的处理或自定义。</description></item><item><title>Nuxt.js 应用中的 app：templates 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/f5146828ba00abf205274dba6d354783/</link><pubDate>Fri, 18 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f5146828ba00abf205274dba6d354783/</guid><description>app:templates 是 Nuxt.js 中一个强大的生命周期钩子，它在 NuxtApp 生成过程中调用。这一钩子允许开发者自定义、修改或添加新文件到构建目录，提供了极大的灵活性和扩展性。</description></item><item><title>Nuxt.js 应用中的 app：resolve 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/dd9f1dcc573a828d78d2dc657b7d5c56/</link><pubDate>Thu, 17 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/dd9f1dcc573a828d78d2dc657b7d5c56/</guid><description>app:resolve 是 Nuxt.js 中的生命周期钩子，在解析 app 实例后调用。这个钩子允许开发者在应用完全初始化后执行一些自定义操作，比如注册插件、设置中间件或进行其他必要配置。</description></item><item><title>Nuxt.js 应用中的 modules：done 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/6427994cfc82edf8e740eb2b3edcead4/</link><pubDate>Wed, 16 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6427994cfc82edf8e740eb2b3edcead4/</guid><description>modules:done 是 Nuxt.js 中一个重要的生命周期钩子，在 Nuxt 应用初始化期间触发。该钩子允许开发者在用户定义的模块安装完成后执行特定操作，如初始化后续配置或执行其他逻辑。</description></item><item><title>Nuxt.js 应用中的 modules：before 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/62721fbcf90812e7cb4f8192dad8c51b/</link><pubDate>Tue, 15 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/62721fbcf90812e7cb4f8192dad8c51b/</guid><description>modules:before 是 Nuxt.js 中一个重要的生命周期钩子，在 Nuxt 应用初始化期间被触发。该钩子允许开发者在安装用户定义的模块之前执行某些操作，如配置或环境设置。</description></item><item><title>Nuxt.js 应用中的 restart 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/b4f0288c3d1fb7d61c49c1c31198ce36/</link><pubDate>Mon, 14 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b4f0288c3d1fb7d61c49c1c31198ce36/</guid><description>restart 方法是 Nuxt.js 中用于重启当前实例的重要功能。该方法允许开发者在需要时快速重启应用，可以选择执行“硬重启”或普通重启。</description></item><item><title>Nuxt.js 应用中的 close 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/e16f122a2b0ff1157b75ce6cc609f9f1/</link><pubDate>Sun, 13 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e16f122a2b0ff1157b75ce6cc609f9f1/</guid><description>close 钩子是 Nuxt.js 中一个重要的生命周期事件，它在 Nuxt 实例正常关闭时被调用。当 Nuxt 应用的生命周期即将结束时，这一钩子会被触发，让开发者能够执行一些必要的清理操作或保存状态。</description></item><item><title>Nuxt.js 应用中的 ready 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/bf27341c381e447f9e64e2d4e9b36db4/</link><pubDate>Sat, 12 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bf27341c381e447f9e64e2d4e9b36db4/</guid><description>ready 钩子是 Nuxt.js 中一个重要的生命周期事件，它在 Nuxt 实例初始化完成后被调用。当 Nuxt 已经准备好并准备开始处理请求或渲染页面时，这一钩子会被触发。</description></item><item><title>Nuxt.js 应用中的 kit：compatibility 事件钩子详解</title><link>https://blog.cmdragon.cn/posts/5892994c55ef47a9af4acfc446d8e923/</link><pubDate>Fri, 11 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5892994c55ef47a9af4acfc446d8e923/</guid><description>kit:compatibility 是处理浏览器兼容性问题的有效工具。正如本篇文章中所述，合理地利用这一钩子可以提升用户体验，并确保应用在不同环境中都能稳定运行。</description></item><item><title>Nuxt.js 应用中的 page：transition：finish 钩子详解</title><link>https://blog.cmdragon.cn/posts/b19fb081d695b4867066656e73740093/</link><pubDate>Thu, 10 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b19fb081d695b4867066656e73740093/</guid><description>page:transition:finish 是 Nuxt.js 中的一个事件钩子，专门用于处理页面过渡效果结束后的逻辑。这一钩子在页面过渡的 onAfterLeave 事件之后被调用，允许开发者在过渡完成后执行一些后续操作。</description></item><item><title>Nuxt.js 应用中的 page：finish 钩子详解</title><link>https://blog.cmdragon.cn/posts/d86a35cfb808722da2a6383da93c4a16/</link><pubDate>Wed, 09 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d86a35cfb808722da2a6383da93c4a16/</guid><description>page:finish 是 Nuxt.js 中用于处理页面加载完成事件的钩子，特别是与 Suspense机制相关。这个钩子允许开发者在页面加载完成后执行自定义操作，以优化用户体验或进行统计分析。</description></item><item><title>Nuxt.js 应用中的 page：start 钩子详解</title><link>https://blog.cmdragon.cn/posts/818748d467c0a22bfb87002939acb642/</link><pubDate>Tue, 08 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/818748d467c0a22bfb87002939acb642/</guid><description>page:start 是一个关键的钩子，可以在页面加载时执行必要的逻辑，以提升用户体验。通过合理地使用这个钩子，可以创建流畅的页面导航体验，并提供用户反馈。</description></item><item><title>Nuxt.js 应用中的 link：prefetch 钩子详解</title><link>https://blog.cmdragon.cn/posts/c9630bf715f84414f544802edae0e77a/</link><pubDate>Mon, 07 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c9630bf715f84414f544802edae0e77a/</guid><description>link:prefetch 是一个强大的钩子，允许开发者在链接预取时执行附加逻辑。合理利用这个钩子，可以帮助优化页面的加载速度和用户体验，提升 Web 应用的整体性能。</description></item><item><title>Nuxt.js 应用中的 app：suspense：resolve 钩子详解</title><link>https://blog.cmdragon.cn/posts/54de24a29ea32b400bc29f8b0b6a46b1/</link><pubDate>Sun, 06 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/54de24a29ea32b400bc29f8b0b6a46b1/</guid><description>app:suspense:resolve 是一个强大的钩子，允许开发者在异步数据解析完成后的最后一步执行必要的处理。通过合理使用该钩子，我们可以优化组件的渲染过程，并提供更好的用户体验。</description></item><item><title>Nuxt.js 应用中的 app：mounted 钩子详解</title><link>https://blog.cmdragon.cn/posts/0655a1f20f3c7d66e6b41c961df3103e/</link><pubDate>Sat, 05 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0655a1f20f3c7d66e6b41c961df3103e/</guid><description>app:mounted 钩子在 Vue 应用的生命周期中扮演着重要角色，提供了在组件被挂载后的执行时机。通过合理利用这个钩子，我们能够提高组件的交互性、用户体验以及性能优化。确保在其内部代码的健壮性和清理机制，将为你的 Vue 应用带来显著的提升。</description></item><item><title>Nuxt.js 应用中的 app：redirected 钩子详解</title><link>https://blog.cmdragon.cn/posts/0a403b28ba9828265f24d658ed1d54d5/</link><pubDate>Thu, 03 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0a403b28ba9828265f24d658ed1d54d5/</guid><description>app:redirected 是 Nuxt.js 中的一个钩子，主要用于处理服务器端渲染（SSR）过程中发生的重定向。该钩子在重定向被执行之前被调用，允许开发者在重定向发生前进行一些操作，比如执行条件检查、日志记录等。</description></item><item><title>Nuxt.js 应用中的 app：rendered 钩子详解</title><link>https://blog.cmdragon.cn/posts/ff851c9049725c29ffd402e2d1f008e2/</link><pubDate>Wed, 02 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ff851c9049725c29ffd402e2d1f008e2/</guid><description>摘要：本文详细介绍了 Nuxt.js 应用程序中的 app:rendered 钩子，包括其定义、调用时机、上下文信息以及通过实际案例展示如何记录性能和发送日志到服务器。</description></item><item><title>深入理解 Nuxt.js 中的 app：data：refresh 钩子</title><link>https://blog.cmdragon.cn/posts/64d5872b7beb55312b9d4537c9366d2b/</link><pubDate>Sun, 29 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/64d5872b7beb55312b9d4537c9366d2b/</guid><description>摘要：本文详细介绍了 Nuxt.js框架中的app:data:refresh钩子，包括其定义、用途、使用方法及实际应用案例。该钩子用于在数据刷新时执行额外处理，支持服务器端和客户端，有助于优化动态数据更新和用户体验。</description></item><item><title>深入理解 Nuxt.js 中的 app：error：cleared 钩子</title><link>https://blog.cmdragon.cn/posts/b77d43b884a1b04d68230c5963b5e15a/</link><pubDate>Sat, 28 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b77d43b884a1b04d68230c5963b5e15a/</guid><description>Nuxt.js 中的 app:error:cleared 钩子的用途及其实现方式。这个钩子为开发者提供了一种优雅的方式来处理错误清除后的状态恢复和用户反馈。</description></item><item><title>深入理解 Nuxt.js 中的 app：error 钩子</title><link>https://blog.cmdragon.cn/posts/cb374534e888fe4a800e013eda896737/</link><pubDate>Fri, 27 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cb374534e888fe4a800e013eda896737/</guid><description>摘要：本文深入讲解了Nuxt.js框架中的app:error钩子，介绍其在处理web应用中致命错误的重要作用、使用方法及实际应用场景。通过创建Nuxt项目、定义插件、触发错误与测试等步骤，演示了如何利用此钩子捕获错误、记录日志及提升用户体验，最后总结其关键要点包括错误处理、友好提示及监控集成。</description></item><item><title>深入理解 Nuxt 中的 app created 钩子</title><link>https://blog.cmdragon.cn/posts/1e03ef2ae917ee8f6e9c9e63cdb6174d/</link><pubDate>Thu, 26 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1e03ef2ae917ee8f6e9c9e63cdb6174d/</guid><description>摘要：本文深入介绍了 Nuxt.js 中的 app:created 钩子，包括其触发时机、用途及使用方法。通过创建 Nuxt 项目、编写插件实现钩子、注册全局组件和配置，展示了在应用初始化阶段执行相关逻辑的实践过程。文中还提供了步骤说明和示例代码，帮助开发者理解如何在项目中有效利用此钩子进行全局设置。</description></item><item><title>Nuxt Kit 实用工具的使用示例</title><link>https://blog.cmdragon.cn/posts/da99cebfd9827341b9b542b233ed4a09/</link><pubDate>Wed, 25 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/da99cebfd9827341b9b542b233ed4a09/</guid><description>摘要：本文介绍了Nuxt Kit工具在开发集成工具或插件时，如何访问和修改Nuxt应用中使用的Vite或webpack配置，以实现定制化构建需求。内容包括功能概述、项目示例、详细步骤说明了如何访问Vite配置及Webpack配置，并通过代码示例展示了配置过程，最后总结了Nuxt Kit在此类操作中的作用和优势。</description></item><item><title>Nuxt Kit API ：路径解析工具</title><link>https://blog.cmdragon.cn/posts/68b1b6f9d726f331612d5dcf9dc96914/</link><pubDate>Sun, 22 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/68b1b6f9d726f331612d5dcf9dc96914/</guid><description>摘要：本文介绍了Nuxt Kit中用于解析路径的API工具，包括resolvePath、resolveAlias、findPath和createResolver。这些工具助力开发者处理模块路径、别名、文件扩展名，提升模块和插件的灵活性及应用性。</description></item><item><title>Nuxt Kit 中的布局管理</title><link>https://blog.cmdragon.cn/posts/a845e31ef8f36d1af3e7abe08f09918e/</link><pubDate>Wed, 18 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a845e31ef8f36d1af3e7abe08f09918e/</guid><description>摘要：本文详述了在Nuxt.js框架中使用addLayout工具进行布局管理的方法，包括布局的概念、如何通过addLayout函数注册布局、创建布局文件及在页面中应用布局的示例代码。并通过练习指导读者创建自定义布局和使用这些布局于登录、注册页面，强调了布局对提升网页结构组织性和代码可维护性的积极作用</description></item><item><title>Nuxt Kit 中的页面和路由管理</title><link>https://blog.cmdragon.cn/posts/ca15f62138ac0f090f2b9c215756b50a/</link><pubDate>Tue, 17 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ca15f62138ac0f090f2b9c215756b50a/</guid><description>摘要：本文介绍了Nuxt Kit中页面和路由管理的高级功能，包括extendPages自定义页面路由、extendRouteRules定义复杂路由逻辑及addRouteMiddleware注册路由中间件。通过这些功能，开发者能够灵活地添加、修改路由，设置缓存、重定向等，并实现访问控制等中间件处理，以提升Web应用的开发效率和可维护性。</description></item><item><title>Nuxt Kit 中的上下文处理</title><link>https://blog.cmdragon.cn/posts/0c616d045fcf8bf6026e64847e449417/</link><pubDate>Mon, 16 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0c616d045fcf8bf6026e64847e449417/</guid><description>Nuxt Kit 提供的上下文处理工具，尤其是 useNuxt 和 tryUseNuxt，为模块化开发提供了极大的便利。通过这些函数，开发者可以方便地访问 Nuxt 实例，从而更好地管理应用配置。</description></item><item><title>Nuxt Kit 组件管理：注册与自动导入</title><link>https://blog.cmdragon.cn/posts/c5f0133bf1d896616b703a00c560fb9b/</link><pubDate>Sun, 15 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c5f0133bf1d896616b703a00c560fb9b/</guid><description>Nuxt Kit 为组件的注册和导入提供了灵活高效的解决方案。无论你是要批量导入组件，还是单独处理特定组件，这些工具都能够满足你的需求。使用这些方法可以显著提升开发效率、减少管理复杂性。</description></item><item><title>使用 Nuxt Kit 检查模块与 Nuxt 版本兼容性</title><link>https://blog.cmdragon.cn/posts/b80a57c1b7ed8f18b9d72567e3bc9d71/</link><pubDate>Fri, 13 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b80a57c1b7ed8f18b9d72567e3bc9d71/</guid><description>通过 Nuxt Kit 提供的兼容性检查工具，您可以轻松地确保您的模块与不同版本的 Nuxt 兼容。这将有助于您在开发过程中避免潜在的兼容性问题，从而提升您的开发效率。</description></item><item><title>Nuxt Kit 的使用指南：从加载到构建</title><link>https://blog.cmdragon.cn/posts/a19304accfa8f913a68caae99dfa8a68/</link><pubDate>Thu, 12 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a19304accfa8f913a68caae99dfa8a68/</guid><description>摘要：本文详细介绍了Nuxt Kit的使用方法，包括如何使用loadNuxt加载配置、buildNuxt进行项目构建、loadNuxtConfig单独加载配置以及writeTypes生成TypeScript配置，旨在帮助前端开发者高效地以编程方式管理和交互Nuxt应用。</description></item><item><title>使用 nuxi preview 命令预览 Nuxt 应用</title><link>https://blog.cmdragon.cn/posts/5b05eb48f0dc0e960be86be0f59de2fa/</link><pubDate>Sun, 08 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5b05eb48f0dc0e960be86be0f59de2fa/</guid><description>摘要：本文介绍了如何使用nuxi preview命令预览Nuxt.js应用，包括安装和准备环境、启动预览服务器的步骤，以及如何指定根目录和使用自定义.env文件等高级用法。通过nuxi preview，开发者能够在本地快速验证应用构建后的实际效果，确保一切按预期工作。</description></item><item><title>使用 nuxi prepare 命令准备 Nuxt 项目</title><link>https://blog.cmdragon.cn/posts/f00fdc02feaaf3525efceaf3e2dc5814/</link><pubDate>Sat, 07 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f00fdc02feaaf3525efceaf3e2dc5814/</guid><description>摘要：本文介绍nuxi prepare命令在Nuxt.js项目中的使用，该命令用于创建.nuxt目录并生成类型信息，以便于构建和部署。文章涵盖了命令的基本用法、指定根目录、设置日志级别及一个完整的准备流程示例。</description></item><item><title>使用 nuxi init 创建全新 Nuxt 项目</title><link>https://blog.cmdragon.cn/posts/e215ae9d731aea9f7b5d6aef7aa1a4db/</link><pubDate>Fri, 06 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e215ae9d731aea9f7b5d6aef7aa1a4db/</guid><description>摘要：本文介绍了如何使用nuxi init命令创建全新的Nuxt.js项目，包括安装所需环境、命令使用方法、指定模板、强制克隆、启动开发服务器等步骤，并提供了完整的项目初始化流程示例，帮助开发者快速上手Nuxt.js框架进行高效Web应用开发。</description></item><item><title>使用 nuxi info 查看 Nuxt 项目详细信息</title><link>https://blog.cmdragon.cn/posts/f7aeb6ad9c1c9cf3980419a88a66b082/</link><pubDate>Thu, 05 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f7aeb6ad9c1c9cf3980419a88a66b082/</guid><description>摘要：文章介绍了nuxi info命令的使用方法，这是一个Nuxt.js命令行工具，用于查看当前或指定Nuxt项目的详细信息，包括版本号、配置、模块等，有助于开发者更好地管理和调试项目</description></item><item><title>使用 nuxi generate 进行预渲染和部署</title><link>https://blog.cmdragon.cn/posts/82f081b254205e6c18a5d415f97f2519/</link><pubDate>Wed, 04 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/82f081b254205e6c18a5d415f97f2519/</guid><description>通过 nuxi generate 命令，你可以轻松地将 Nuxt 应用程序预渲染为静态 HTML 文件，并将其部署到任何静态托管服务。这种方法可以提高应用程序的性能和安全性，特别适用于那些需要快速加载的应用。</description></item><item><title>探索 Nuxt Devtools：功能全面指南</title><link>https://blog.cmdragon.cn/posts/ba266042f1b1b5d48140c44161ea0421/</link><pubDate>Tue, 03 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ba266042f1b1b5d48140c44161ea0421/</guid><description>摘要：本文介绍了Nuxt Devtools的功能和使用方法，包括自动安装、手动安装和各项主要功能，如页面、组件、构建分析等。</description></item><item><title>使用 nuxi dev 启动 Nuxt 应用程序的详细指南</title><link>https://blog.cmdragon.cn/posts/ffaecaca091c2823b255244bbf0e4e6e/</link><pubDate>Mon, 02 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ffaecaca091c2823b255244bbf0e4e6e/</guid><description>摘要：本文介绍了使用 nuxi dev 命令启动 Nuxt 应用程序的方法，包括安装 Nuxt.js、启动开发服务器及配置选项等详细步骤。</description></item><item><title>使用 nuxi clean 命令清理 Nuxt 项目</title><link>https://blog.cmdragon.cn/posts/4382efd355d49a6c8c6ca9f96c90fe8d/</link><pubDate>Sun, 01 Sep 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4382efd355d49a6c8c6ca9f96c90fe8d/</guid><description>nuxi clean 命令是管理和维护 Nuxt 项目的重要工具，它帮助你快速清理生成的文件和缓存，确保开发环境的干净。通过定期使用这个命令，你可以避免由于缓存或生成文件导致的构建问题，从而提升开发效率和项目稳定性。</description></item><item><title>使用 nuxi build 命令构建你的 Nuxt 应用程序</title><link>https://blog.cmdragon.cn/posts/bc2bfb4e25c5fe348c22bcd59db71579/</link><pubDate>Fri, 30 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bc2bfb4e25c5fe348c22bcd59db71579/</guid><description>nuxi build 命令是构建 Nuxt 应用程序的核心工具，它将你的应用程序打包成适合生产环境的格式。通过理解和使用不同的选项，如 &amp;ndash;prerender、&amp;ndash;dotenv 和 &amp;ndash;log-level，你可以更好地控制构建过程，并为生产环境做好充分准备。</description></item><item><title>使用 nuxi add 快速创建 Nuxt 应用组件</title><link>https://blog.cmdragon.cn/posts/917849288e8e1cc200cdd37a60e48387/</link><pubDate>Wed, 28 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/917849288e8e1cc200cdd37a60e48387/</guid><description>通过使用 nuxi add 命令，你可以快速创建 Nuxt 应用中的各种实体，如组件、页面、布局等。这可以极大地提高开发效率，减少手动创建文件的工作量。希望本文的示例和解释能够帮助你更好地使用 nuxi add 命令来加速你的开发过程。</description></item><item><title>使用 Nuxt 的 showError 显示全屏错误页面</title><link>https://blog.cmdragon.cn/posts/54debfbfcb8e75989b8e0efe82573a86/</link><pubDate>Mon, 26 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/54debfbfcb8e75989b8e0efe82573a86/</guid><description>摘要：本文介绍Nuxt.js中的showError方法用于显示全屏错误页面，包括其参数类型及使用方式，并演示了如何在页面中捕获并展示错误，还介绍了useError用于管理共享错误状态的方法。</description></item><item><title>使用 setResponseStatus 函数设置响应状态码</title><link>https://blog.cmdragon.cn/posts/302e9ee7406d6304cf38978e07b4480c/</link><pubDate>Sun, 25 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/302e9ee7406d6304cf38978e07b4480c/</guid><description>通过 setResponseStatus 函数，你可以轻松地在 Nuxt.js 中设置响应的状态码。这不仅能帮助用户更好地理解发生了什么，还能在需要时显示自定义的错误页面。在实际应用中，合理使用状态码对于提升用户体验至关重要。</description></item><item><title>如何在 Nuxt 中动态设置页面布局</title><link>https://blog.cmdragon.cn/posts/4c7fb169913298de59cbe19fcbaac8d3/</link><pubDate>Sat, 24 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4c7fb169913298de59cbe19fcbaac8d3/</guid><description>摘要：本文介绍如何在Nuxt框架中通过设置setPageLayout函数动态调整页面布局，包括安装Nuxt、创建不同布局文件及中间件，并通过示例演示如何根据不同路径设置相应布局。</description></item><item><title>使用 reloadNuxtApp 强制刷新 Nuxt 应用</title><link>https://blog.cmdragon.cn/posts/dd6eb94bd83eb2c9c46034b5b41ce2ea/</link><pubDate>Thu, 22 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/dd6eb94bd83eb2c9c46034b5b41ce2ea/</guid><description>reloadNuxtApp 是一个强大的工具，用于在 Nuxt 3 应用中强制刷新页面。通过不同的选项，你可以控制刷新行为、指定路径、保存状态等。</description></item><item><title>使用 refreshNuxtData 刷新 Nuxt应用 中的数据</title><link>https://blog.cmdragon.cn/posts/1d66580f8a7e8510b9f9af6272aecc2e/</link><pubDate>Wed, 21 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1d66580f8a7e8510b9f9af6272aecc2e/</guid><description>refreshNuxtData 是 Nuxt 3 中一个非常有用的函数，能够帮助你在数据更新后及时刷新页面。通过了解如何刷新所有数据和刷新特定数据，你可以更灵活地控制数据更新的时机和方式。</description></item><item><title>使用 preloadRouteComponents 提升 Nuxt 应用的性能</title><link>https://blog.cmdragon.cn/posts/476d81c3a7972e5b8d84db523437836c/</link><pubDate>Mon, 19 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/476d81c3a7972e5b8d84db523437836c/</guid><description>preloadRouteComponents 是提升 Nuxt 应用性能的一个简单而有效的工具。通过在适当的时候预加载路由组件，你可以为用户提供更快速、更流畅的导航体验。</description></item><item><title>使用 preloadComponents 进行组件预加载</title><link>https://blog.cmdragon.cn/posts/b54b94bb4434e506c17b07f68a13bf94/</link><pubDate>Sun, 18 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b54b94bb4434e506c17b07f68a13bf94/</guid><description>摘要：本文介绍Nuxt 3中的preloadComponents功能，用于预加载全局注册的组件以减少首次渲染阻塞时间，通过实例演示如何设置并使用该工具来提升页面性能。</description></item><item><title>使用 prefetchComponents 进行组件预取</title><link>https://blog.cmdragon.cn/posts/a87f935f1fba15457925fce9d47af8f4/</link><pubDate>Sat, 17 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a87f935f1fba15457925fce9d47af8f4/</guid><description>摘要：本文介绍Nuxt.js中的prefetchComponents功能，用于预取组件以提高用户体验。通过在客户端后台下载和缓存组件，确保在用户需要时快速加载。文章涵盖了prefetchComponents的基本概念、与预加载的区别、使用方法以及如何在Nuxt.js项目中配置和应用此功能，最终达到优化应用加载速度的目的。</description></item><item><title>使用 onNuxtReady 进行异步初始化</title><link>https://blog.cmdragon.cn/posts/838b6733c038fcb291025b2c777b3e8b/</link><pubDate>Fri, 16 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/838b6733c038fcb291025b2c777b3e8b/</guid><description>摘要：本文详细介绍了Nuxt.js框架中的onNuxtReady函数用途、使用场景及其实现步骤，并通过集成分析库的示例代码，指导开发者如何在应用初始化完成后执行异步操作，以优化用户体验。</description></item><item><title>使用 onBeforeRouteUpdate 组合式函数提升应用的用户体验</title><link>https://blog.cmdragon.cn/posts/d400882a80839b72cf628a6de608f0e8/</link><pubDate>Thu, 15 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d400882a80839b72cf628a6de608f0e8/</guid><description>摘要：本文介绍如何在Nuxt 3开发中使用onBeforeRouteUpdate组合式函数来提升应用用户体验。通过在组件中注册路由更新守卫，开发者能够在路由变更前执行特定操作，如权限检查或数据更新，示例展示了在User.vue组件中使用此功能的过程与注意事项。</description></item><item><title>使用 onBeforeRouteLeave 组合式函数提升应用的用户体验</title><link>https://blog.cmdragon.cn/posts/ec76c32456eed5c68935b916beb053c2/</link><pubDate>Wed, 14 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ec76c32456eed5c68935b916beb053c2/</guid><description>摘要：本文介绍了在Nuxtjs中使用onBeforeRouteLeave组合式函数来提升应用用户体验的方法。onBeforeRouteLeave允许在组件离开当前路由前执行逻辑，如处理路由变化、清理资源、保存数据等。文章通过示例展示了如何在Vue组件中注册此守卫，解释了其参数含义及使用注意事项，并提供了完整示例代码，强调了此功能对增强用户体验的重要性。</description></item><item><title>使用 Nuxt 3 的 defineRouteRules 进行页面级别的混合渲染</title><link>https://blog.cmdragon.cn/posts/a067b4aecdd04032860d7102ebcef604/</link><pubDate>Mon, 12 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a067b4aecdd04032860d7102ebcef604/</guid><description>摘要：本文介绍了Nuxt 3中的defineRouteRules功能，用于实现页面级别的混合渲染配置。通过启用实验性选项inlineRouteRules，开发者能够在nuxt.config.ts中定义页面的预渲染行为。</description></item><item><title>掌握 Nuxt 3 的页面元数据：使用 definePageMeta 进行自定义配置</title><link>https://blog.cmdragon.cn/posts/e0ecc27dccf7a9a8d8bf9a2d4fd3f00b/</link><pubDate>Sun, 11 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e0ecc27dccf7a9a8d8bf9a2d4fd3f00b/</guid><description>摘要：本文详细介绍Nuxt 3框架中definePageMeta的使用方法，包括如何为页面组件定义元数据，如布局、过渡效果、路由中间件等。通过具体示例展示了如何设置各项元数据属性，以及如何利用definePageMeta定制页面布局和中间件逻辑，增强应用程序的路由管理和页面控制能力。</description></item><item><title>使用 defineNuxtRouteMiddleware 创建路由中间件</title><link>https://blog.cmdragon.cn/posts/9820edb9b255785446531ea7b1ac2269/</link><pubDate>Sat, 10 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9820edb9b255785446531ea7b1ac2269/</guid><description>本篇文章介绍了如何使用 &lt;code>defineNuxtRouteMiddleware&lt;/code> 创建和应用路由中间件。通过示例演示了如何处理错误页面和身份验证逻辑。随着对 Nuxt.js 中间件的理解，你可以更灵活地控制应用的路由行为，从而提升用户体验。</description></item><item><title>使用 defineNuxtComponent`定义 Vue 组件</title><link>https://blog.cmdragon.cn/posts/8e9977db3a733bc649877087c3b87e91/</link><pubDate>Fri, 09 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8e9977db3a733bc649877087c3b87e91/</guid><description>摘要：本文介绍了在Nuxt 3中使用defineNuxtComponent辅助函数定义类型安全的Vue组件的方法，适用于习惯Options API的开发者。defineNuxtComponent支持asyncData获取异步数据及head设置自定义头部信息，为Nuxt应用提供更多功能。</description></item><item><title>清除 Nuxt 状态缓存：clearNuxtState</title><link>https://blog.cmdragon.cn/posts/54aef7263724952013d0fd71fcdcb38e/</link><pubDate>Wed, 07 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/54aef7263724952013d0fd71fcdcb38e/</guid><description>摘要：本文介绍了Nuxt.js框架中clearNuxtState方法的使用，该方法用于清除useState管理的状态缓存，确保应用状态的有效性和一致性。文章涵盖了clearNuxtState的方法签名、使用场景及示例代码，演示了如何在组件中实现状态的重置，适用于需要在特定条件下重置状态或页面切换时保持状态清新的场景。</description></item><item><title>清除 Nuxt 数据缓存：clearNuxtData</title><link>https://blog.cmdragon.cn/posts/b14ec150986ae8b8e56d2c37637e04fd/</link><pubDate>Tue, 06 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b14ec150986ae8b8e56d2c37637e04fd/</guid><description>摘要：本文详细介绍了Nuxt.js框架中的clearNuxtData方法，用于清除useAsyncData和useFetch缓存的数据、错误状态和待处理promises，以实现数据的实时更新和重载。通过实际示例展示了在不同页面如何应用clearNuxtData来提升用户体验和数据新鲜度，包括方法签名、使用场景及具体代码实现步骤。</description></item><item><title>使用 addRouteMiddleware 动态添加中间</title><link>https://blog.cmdragon.cn/posts/0988eb75d14a8fc3b0db7d072206b8a8/</link><pubDate>Sun, 04 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0988eb75d14a8fc3b0db7d072206b8a8/</guid><description>摘要：文章介绍了Nuxt3中addRouteMiddleware的使用方法，该功能允许开发者动态添加路由中间件，以实现诸如权限检查、动态重定向及路由变化时的特定操作。内容涵盖路由中间件的概念、addRouteMiddleware的语法、参数、使用示例（包括匿名中间件、命名中间件、全局中间件、覆盖现有中间件）及调试技巧。强调了此功能为Nuxt3应用带来的灵活性和便利性。</description></item><item><title>使用 abortNavigation 阻止导航</title><link>https://blog.cmdragon.cn/posts/52bba0b4e019da067ec5092a151c2bce/</link><pubDate>Sat, 03 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/52bba0b4e019da067ec5092a151c2bce/</guid><description>摘要：在Nuxt3中，abortNavigation是一个辅助函数，用于路由中间件内阻止不符合条件的页面访问，实现权限控制、错误处理及动态重定向，提升用户体验和应用可靠性</description></item><item><title>使用 $fetch 进行 HTTP 请求</title><link>https://blog.cmdragon.cn/posts/a189c208200be9973a4dd8d9029f2ab2/</link><pubDate>Fri, 02 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a189c208200be9973a4dd8d9029f2ab2/</guid><description>摘要：文章介绍了Nuxt3中使用$fetch进行HTTP请求的方法，它是基于ofetch库，支持SSR和自动缓存。$fetch简化了HTTP请求，支持GET、POST等，可结合useAsyncData或useFetch优化数据获取，避免重复请求，适用于服务器端渲染。</description></item><item><title>使用 useState 管理响应式状态</title><link>https://blog.cmdragon.cn/posts/760deff1b835b737dc6396ad0e4cc8d4/</link><pubDate>Thu, 01 Aug 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/760deff1b835b737dc6396ad0e4cc8d4/</guid><description>摘要：本文详细介绍了在Nuxt3框架中使用useState进行响应式状态管理的方法，包括其基本概念、优势、使用方法、共享状态实现以及性能优化技巧。useState支持服务器端渲染（SSR），可创建响应式状态并在组件间共享，通过具体示例展示了其基本用法、如何在多个组件间共享状态以及使用shallowRef提升性能。</description></item><item><title>使用 useServerSeoMeta 优化您的网站 SEO</title><link>https://blog.cmdragon.cn/posts/1ab218dde0076479c8612a173c88316c/</link><pubDate>Wed, 31 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1ab218dde0076479c8612a173c88316c/</guid><description>摘要：本文介绍了Nuxt3框架中的useServerSeoMeta函数，它用于服务器端渲染(SSR)中设置SEO元标签，以优化性能和搜索引擎排名。内容包括其基本用法、详细示例及各参数说明，强调了服务器端设置元标签对性能的提升和代码简化的好处。</description></item><item><title>使用 useSeoMeta 进行 SEO 配置</title><link>https://blog.cmdragon.cn/posts/e7e7cf9c3099aeaf57badb3c4ecbb7f3/</link><pubDate>Tue, 30 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e7e7cf9c3099aeaf57badb3c4ecbb7f3/</guid><description>摘要：本文介绍了Nuxt3中的useSeoMeta组合函数，用于简化和优化网站的SEO配置。通过这个工具，开发者可以在Nuxt3项目中方便地设置页面元标签，包括标题、描述以及Open Graph和Twitter Card标签等，支持静态与动态元数据配置，提升网站在搜索引擎和社交媒体上的表现。</description></item><item><title>Nuxt.js必读：轻松掌握运行时配置与 useRuntimeConfig</title><link>https://blog.cmdragon.cn/posts/bbb706a14f541c1932c5a42b4cab92a6/</link><pubDate>Mon, 29 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bbb706a14f541c1932c5a42b4cab92a6/</guid><description>本文详细介绍了Nuxt.js中的运行时配置功能，包括定义和使用运行时配置的方法，以及如何通过useRuntimeConfig访问配置。同时，讲解了环境变量与.env文件的使用，特别是在不同环境下的配置管理。</description></item><item><title>Nuxt.js 路由管理：useRouter 方法与路由中间件应用</title><link>https://blog.cmdragon.cn/posts/5d18db61dc2cdd94535cb31773ea0d63/</link><pubDate>Sun, 28 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5d18db61dc2cdd94535cb31773ea0d63/</guid><description>摘要：本文介绍了Nuxt 3中useRouter方法及其在路由管理和中间件应用中的功能。内容包括使用useRouter添加、移除路由，获取路由信息，基于History API的操作，导航守卫的实现，如定义匿名、命名及全局中间件，以及使用navigateTo和abortNavigation辅助函数。同时，还涉及Promise和错误处理，最后通过一个示例展示了useRouter的常见用法。</description></item><item><title>useRoute 函数的详细介绍与使用示例</title><link>https://blog.cmdragon.cn/posts/f78b155dac56741becfa07c51c38dc0f/</link><pubDate>Sat, 27 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f78b155dac56741becfa07c51c38dc0f/</guid><description>摘要：本文介绍了Nuxt.js中useRoute函数的详细用途与示例，展示了如何在组合式API中使用useRoute获取当前路由信息，包括动态参数、查询参数等，并提供了丰富的计算引用说明，如fullPath、hash、matched等，以及如何正确访问查询参数。</description></item><item><title>使用 useRequestURL 组合函数访问请求URL</title><link>https://blog.cmdragon.cn/posts/06f3f8268aaa2d02d711d8e895bb2bc9/</link><pubDate>Fri, 26 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/06f3f8268aaa2d02d711d8e895bb2bc9/</guid><description>摘要：本文介绍了Nuxt 3中的useRequestURL组合函数，用于在服务器端和客户端环境中获取当前页面的URL信息。通过示例展示了如何在页面中使用此函数获取并显示URL及其组成部分，如路径、查询参数等，适用于现代Web应用程序的开发。</description></item><item><title>Nuxt.js 环境变量配置与使用</title><link>https://blog.cmdragon.cn/posts/53eb62f578931146081c71537fd0c013/</link><pubDate>Thu, 25 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/53eb62f578931146081c71537fd0c013/</guid><description>摘要：“该文探讨了Nuxt.js框架下环境变量配置的详细过程，涉及.env文件配置、运行时访问、安全性考量、在不同场景下的实践（如Vue应用、插件、服务器路由）及多环境配置下的最佳实践。”</description></item><item><title>使用 useRequestEvent Hook 访问请求事件</title><link>https://blog.cmdragon.cn/posts/7f6aeaffdd673a716b7f013f59aa69af/</link><pubDate>Tue, 23 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7f6aeaffdd673a716b7f013f59aa69af/</guid><description>摘要：本文介绍Nuxt 3中useRequestEventHook的使用，可访问请求路径、方法和头部信息，适用于SSR环境下处理请求逻辑，如中间件、插件及API路由。仅服务器端生效，需注意安全性。</description></item><item><title>使用 useNuxtData 进行高效的数据获取与管理</title><link>https://blog.cmdragon.cn/posts/5097e3f618f180282a847588006a51d8/</link><pubDate>Mon, 22 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5097e3f618f180282a847588006a51d8/</guid><description>深入讲解了Nuxt 3中useNuxtData组合函数的应用，演示了如何通过此函数访问缓存数据，实现组件间数据共享，以及如何在数据更新时利用缓存提高用户体验。文章提供了具体的用法示例，包括数据获取、访问缓存数据和数据更新的场景。</description></item><item><title>Nuxt 3 使用指南：掌握 useNuxtApp 和运行时上下文</title><link>https://blog.cmdragon.cn/posts/074b9dedf36fca34d1469e455c71d583/</link><pubDate>Sun, 21 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/074b9dedf36fca34d1469e455c71d583/</guid><description>摘要：“Nuxt 3 使用指南：掌握 useNuxtApp 和运行时上下文”介绍了Nuxt 3中useNuxtApp的使用，包括访问Vue实例、运行时钩子、配置变量和SSR上下文。文章详细说明了provide和hook函数的应用，以及如何在插件和组件中利用这些功能。同时，探讨了vueApp属性、ssrContext和payload的使用场景，以及isHydrating和runWithContext方法的作用。</description></item><item><title>使用 useLazyFetch 进行异步数据获取</title><link>https://blog.cmdragon.cn/posts/382133fd6ac27845d845a7fa96e5ba43/</link><pubDate>Sat, 20 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/382133fd6ac27845d845a7fa96e5ba43/</guid><description>摘要：“使用 useLazyFetch 进行异步数据获取”介绍了在Nuxt开发中利用useLazyFetch进行异步数据加载的方法，强调其立即触发导航特性，与useFetch相似的使用方式，以及如何处理数据状态和错误，通过示例展示如何在模板中根据数据加载状态显示不同内容。</description></item><item><title>Nuxt.js 中使用 useHydration 实现数据水合与同步</title><link>https://blog.cmdragon.cn/posts/c7ddeca4690387e7e08c83e6c482a576/</link><pubDate>Thu, 18 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c7ddeca4690387e7e08c83e6c482a576/</guid><description>摘要：介绍Nuxt.js中useHydration函数，用于控制客户端与服务器数据同步，实现数据水合。参数包括key、get和set函数，适用于多种场景，示例展示数据获取与显示流程。</description></item><item><title>Nuxt.js头部魔法：轻松自定义页面元信息，提升用户体验</title><link>https://blog.cmdragon.cn/posts/d5370e880eaec9085a153caba4961676/</link><pubDate>Tue, 16 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d5370e880eaec9085a153caba4961676/</guid><description>摘要：“Nuxt.js头部魔法：轻松自定义页面元信息，提升用户体验”介绍如何使用useHead函数在Nuxt应用中编程式设置页面头部信息，包括&lt;title>、&lt;meta>、&lt;link>等标签，以增强SEO和用户体验。通过实例展示了如何配置静态和动态标题、元数据、样式、脚本等，使页面更符合SEO标准和个性化需求。</description></item><item><title>探索Nuxt.js的useFetch：高效数据获取与处理指南</title><link>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</link><pubDate>Mon, 15 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/29ff9113e98725ee69fa0148a47ae735/</guid><description>摘要：“探索Nuxt.js的useFetch：高效数据获取与处理指南”详述了Nuxt.js中useFetch函数的使用，包括基本用法、动态参数获取、拦截器使用，及参数详解。文章通过示例展示了如何从API获取数据，处理动态参数，自定义请求和响应，以及useFetch和useAsyncData的参数选项，帮助开发者掌握异步数据加载技巧。</description></item><item><title>Nuxt.js 错误侦探：useError 组合函数</title><link>https://blog.cmdragon.cn/posts/b73679558bc672550fbbb72ae295fdf5/</link><pubDate>Sun, 14 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b73679558bc672550fbbb72ae295fdf5/</guid><description>摘要：文章介绍Nuxt.js中的useError组合函数，用于统一处理客户端和服务器端的错误，提供statusCode、statusMessage和message属性，示例展示了如何在组件中使用它来捕获和显示错误信息。</description></item><item><title>useCookie函数：管理SSR环境下的Cookie</title><link>https://blog.cmdragon.cn/posts/ddb1976c3f6b7b52a03dd0c383e9a790/</link><pubDate>Sat, 13 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ddb1976c3f6b7b52a03dd0c383e9a790/</guid><description>摘要：本文详述了useCookie函数在服务器端渲染(SSR)中的应用，包括读写Cookie、配置选项如maxAge、expires、httpOnly、secure、domain、path及SameSite，并提供了encode、decode、default、watch等高级用法示例，以及如何在API路由中操作Cookie。</description></item><item><title>轻松掌握useAsyncData获取异步数据</title><link>https://blog.cmdragon.cn/posts/e1b1c62b5975f8ebfa61adc507591cf7/</link><pubDate>Fri, 12 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e1b1c62b5975f8ebfa61adc507591cf7/</guid><description>摘要：本文详细介绍Nuxt.js中的useAsyncData组合式函数，它用于在服务端渲染(SSR)过程中异步获取数据，确保客户端正确水合，避免重复请求。内容包括基本概念、参数说明（key, handler, options）、示例用法、如何监听参数变化自动刷新数据及返回值详解，展示了在页面组件中使用useAsyncData的具体方式和注意事项。</description></item><item><title>使用 `useAppConfig` ：轻松管理应用配置</title><link>https://blog.cmdragon.cn/posts/9e044d4b53eab6a1bec49bb86b4c856c/</link><pubDate>Thu, 11 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9e044d4b53eab6a1bec49bb86b4c856c/</guid><description>摘要：本文介绍了Nuxt开发中useAppConfig的使用，它便于访问和管理应用配置，支持动态加载资源、环境配置切换、权限管理、主题切换和配置文件集中管理等功能，通过实例展示了如何在Nuxt项目中应用此工具以实现配置灵活性和应用维护性。</description></item><item><title>Nuxt框架中内置组件详解及使用指南（四）</title><link>https://blog.cmdragon.cn/posts/9032c61e840462c63717de392173b4f5/</link><pubDate>Tue, 09 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9032c61e840462c63717de392173b4f5/</guid><description>摘要：本文详细介绍了Nuxt 3框架中的两个内置组件：&lt;NuxtErrorBoundary>和&lt;NuxtIsland>的使用方法与示例。&lt;NuxtErrorBoundary>用于捕获并处理客户端错误，提供了错误处理和自定义错误展示的功能；而&lt;NuxtIsland>是一个实验性组件，用于渲染无客户端JavaScript的静态内容，以优化页面加载速度。文章包含组件的基本用法、配置步骤以及完整实例代码，有助于开发者高效利用这些组件提升Nuxt应用的性能与用户体验。</description></item><item><title>Nuxt框架中内置组件详解及使用指南（三）</title><link>https://blog.cmdragon.cn/posts/7ef2264218c32c7cf7f16dfa7cabd2ce/</link><pubDate>Mon, 08 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7ef2264218c32c7cf7f16dfa7cabd2ce/</guid><description>摘要：“Nuxt 3框架中&lt;NuxtLink>与&lt;NuxtLoadingIndicator>组件的深度使用教程，包括如何使用这两个组件进行页面导航和加载指示的自定义配置与实战示例。”</description></item><item><title>Nuxt框架中内置组件详解及使用指南（二）</title><link>https://blog.cmdragon.cn/posts/658c8df0cd7e59fe7606507b14b2c37c/</link><pubDate>Sun, 07 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/658c8df0cd7e59fe7606507b14b2c37c/</guid><description>摘要：“本文详细介绍了Nuxt 3中&lt;NuxtPage>和&lt;NuxtLayout>组件的使用方法，包括组件的基本概念、属性、自定义属性、获取引用以及完整示例，展示了如何在Nuxt项目中有效利用这两个组件。</description></item><item><title>Nuxt框架中内置组件详解及使用指南（一）</title><link>https://blog.cmdragon.cn/posts/214c7ef07a7b90e1787f10ea626320e3/</link><pubDate>Sat, 06 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/214c7ef07a7b90e1787f10ea626320e3/</guid><description>本文详细介绍了Nuxt框架中的两个内置组件&lt;ClientOnly>和&lt;NuxtClientFallback>的使用方法与功能。&lt;ClientOnly>确保包裹的内容仅在客户端渲染，适用于处理浏览器特定功能或异步数据加载。而&lt;NuxtClientFallback>是一个实验性组件，用于在SSR过程中遇到子组件错误时，在客户端渲染备选内容，提高应用稳定性。文章通过示例代码展示了这两个组件的具体应用方式和相关属性配置。</description></item><item><title>Nuxt3 的生命周期和钩子函数（十一）</title><link>https://blog.cmdragon.cn/posts/1229fdac282a0baba2576f73c41b4f0e/</link><pubDate>Fri, 05 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1229fdac282a0baba2576f73c41b4f0e/</guid><description>摘要：本文详细介绍了Nuxt3中几个关键的生命周期钩子和它们的使用方法，包括webpack:done用于Webpack编译完成后执行操作，webpack:progress监听编译进度，render:response和render:html分别在响应发送前后修改响应内容，以及render:island针对岛屿组件的HTML渲染前的修改，提供了具体的示例代码和应用情景。</description></item><item><title>Nuxt3 的生命周期和钩子函数（十）</title><link>https://blog.cmdragon.cn/posts/d5c00a7775a1fc1b83ecfb6dd7136fa7/</link><pubDate>Thu, 04 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d5c00a7775a1fc1b83ecfb6dd7136fa7/</guid><description>摘要：本文详细介绍了Nuxt3框架中的五个webpack钩子函数：webpack:configResolved用于在webpack配置解析后读取和修改配置；webpack:compile在编译开始前调用，可修改编译选项；webpack:compiled在编译完成后调用，可处理编译结果；webpack:change在开发模式下文件变化时触发，监控文件更改；webpack:error在编译出错时捕获错误信息，以便于错误处理。并通过示例代码展示了各钩子的使用方法。</description></item><item><title>Nuxt3 的生命周期和钩子函数（九）</title><link>https://blog.cmdragon.cn/posts/b80c188353cc5f1e84aad57aea45c848/</link><pubDate>Wed, 03 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b80c188353cc5f1e84aad57aea45c848/</guid><description>摘要：本文介绍了Nuxt3中与Vite相关的五个生命周期钩子，包括vite:extend、vite:extendConfig、vite:configResolved、vite:serverCreated和vite:compiled，展示了如何在每个钩子中扩展Vite配置、读取配置、添加中间件和处理编译事件。每个钩子都有详细的描述和示例代码，帮助开发者在Nuxt应用中实现自定义构建逻辑和服务器配置。</description></item><item><title>Nuxt3 的生命周期和钩子函数（七）</title><link>https://blog.cmdragon.cn/posts/a65c336a08214aa264f38f893fd9fe64/</link><pubDate>Mon, 01 Jul 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a65c336a08214aa264f38f893fd9fe64/</guid><description>摘要：文章阐述了Nuxt3中Nitro生命周期钩子的使用，如nitro:config自定义配置、nitro:init注册构建钩子、nitro:build:before/after调整构建设置及处理公共资产、prerender:routes扩展预渲染路由、build:error捕获构建错误，通过示例代码指导开发者优化项目构建与部署流程。</description></item><item><title>Nuxt3 的生命周期和钩子函数（八）</title><link>https://blog.cmdragon.cn/posts/627bff83be4d55aabeccd96fdb6bab35/</link><pubDate>Sun, 30 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/627bff83be4d55aabeccd96fdb6bab35/</guid><description>摘要：本文介绍了Nuxt3框架中的一些重要生命周期钩子，如prepare:types用于自定义TypeScript配置和类型声明，listen用于在开发服务器启动时注册自定义事件监听器，schema:extend和schema:resolved用于扩展和处理已解析的模式，以及schema:beforeWrite和schema:written分别在模式写入前后的处理。通过示例代码展示了如何在Nuxt插件中利用这些钩子进行自定义操作。</description></item><item><title>Nuxt3 的生命周期和钩子函数（六）</title><link>https://blog.cmdragon.cn/posts/16e6c55234a5fd9caeea0fcff47f8b6d/</link><pubDate>Sun, 30 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/16e6c55234a5fd9caeea0fcff47f8b6d/</guid><description>摘要：本文深入解析了Nuxt3框架中的多个核心生命周期钩子和组件注册功能，包括imports:sources、imports:extend、imports:context、imports:dirs、components:dirs及components:extend，通过实例代码指导开发者如何在不同场景下有效运用这些钩子函数来扩展导入源、优化组件导入流程及增强项目结构灵活性。</description></item><item><title>Nuxt3 的生命周期和钩子函数（五）</title><link>https://blog.cmdragon.cn/posts/9ac29e7085b44b322682133dd07511c8/</link><pubDate>Sat, 29 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9ac29e7085b44b322682133dd07511c8/</guid><description>摘要：本文详细介绍了Nuxt3中的六个核心生命周期钩子及其用法，包括build:done、build:manifest、builder:generateApp、builder:watch、pages:extend和server:devHandler:handler。内容涵盖各钩子的调用时机、参数、环境、功能描述及具体示例代码，帮助开发者深入理解如何在Nuxt应用的构建、运行、开发及部署等阶段自定义行为和逻辑。</description></item><item><title>Nuxt3 的生命周期和钩子函数（四）</title><link>https://blog.cmdragon.cn/posts/7ce28296234629061401246df9db573b/</link><pubDate>Fri, 28 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7ce28296234629061401246df9db573b/</guid><description>概述了Nuxt3的六个关键生命周期钩子用途：modules:before至build:before，指导如何在应用初始化、模块管理、配置解析、模板处理及构建前执行自定义操作，附带实例代码，强化Nuxt应用的灵活性和可控性。</description></item><item><title>Nuxt3 的生命周期和钩子函数（三）</title><link>https://blog.cmdragon.cn/posts/5f1ddd6ac7a67110834fe55de143c90d/</link><pubDate>Thu, 27 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5f1ddd6ac7a67110834fe55de143c90d/</guid><description>摘要：概述了Nuxt3的关键生命周期钩子用途，如page:finish用于页面加载后处理，page:transition:finish处理过渡效果完成，kit:compatibility扩展兼容性检查，ready标示应用启动就绪，close执行应用关闭清理，及restart控制应用重启流程，附带示例代码</description></item><item><title>Nuxt3 的生命周期和钩子函数（二）</title><link>https://blog.cmdragon.cn/posts/035ad4b6880c8ceb996e156237ce5d89/</link><pubDate>Wed, 26 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/035ad4b6880c8ceb996e156237ce5d89/</guid><description>摘要：本文深入介绍了Nuxt.js框架中几个关键的生命周期钩子函数，包括app:redirected（SSR环境下重定向前触发）、app:beforeMount（CSR下应用挂载前）、app:mounted（CSR下Vue应用在浏览器挂载时）、app:suspense:resolve（CSR中Suspense组件解析子组件完成时）以及link:prefetch（CSR中NuxtLink预取链接时）和page:start（CSR页面渲染启动时）。通过代码示例展示了如何利用defineNuxtPlugin定义插件并借助nuxtApp.hook监听这些钩子以执行特定任务，强调了各钩子的应用场景及在客户端和服务器端的不同行为。</description></item><item><title>Nuxt3 的生命周期和钩子函数（一）</title><link>https://blog.cmdragon.cn/posts/5fa69707f657db97640ee64788afbd03/</link><pubDate>Tue, 25 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5fa69707f657db97640ee64788afbd03/</guid><description>摘要：本文是关于Nuxt3的系列文章之一，主要探讨Nuxt3的生命周期和钩子函数，引导读者深入了解其在前端开发中的应用。文章提供了往期相关文章链接，涉及Nuxt中间件、Composables、状态管理、路由系统、组件开发等多个方面，帮助读者全面掌握Nuxt3框架的特性和实践技巧。</description></item><item><title>深入探索 Nuxt3 Composables：掌握目录架构与内置API的高效应用</title><link>https://blog.cmdragon.cn/posts/99ad22c410bbc10e48a61f6683002792/</link><pubDate>Sun, 23 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/99ad22c410bbc10e48a61f6683002792/</guid><description>摘要：“本文深入探讨了Nuxt3 Composables，重点介绍了其目录架构和内置API的高效应用。通过学习本文，读者将能够更好地理解和利用Nuxt3 Composables来构建高效的应用程序。”</description></item><item><title>Nuxt 3 路由系统详解：配置与实践指南</title><link>https://blog.cmdragon.cn/posts/3edf792d5e89f8a9aba11ef2a862f865/</link><pubDate>Fri, 21 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/3edf792d5e89f8a9aba11ef2a862f865/</guid><description>摘要：本文是一份关于Nuxt 3路由系统的详尽指南。它从介绍Nuxt 3的基本概念开始，包括Nuxt 3与Nuxt 2的区别和选择Nuxt 3的理由。然后，它详细解释了安装和配置Nuxt 3的步骤，以及Nuxt 3路由系统的基础知识，如动态路由和嵌套路由。接着，它介绍了路由中间件的作用和编写自定义中间件的方法，并讨论了页面布局、导航链接和页面过渡效果。最后，它涵盖了高级路由技巧，如异步数据获取、错误页面处理和路由守卫，以及实战案例分析，包括博客系统路由设计、电商网站路由设计和多语言支持的路由实现。最后，它讨论了性能优化与安全，包括路由懒加载、路由安全性和性能监控与调试。</description></item><item><title>Nuxt 3组件开发与管理</title><link>https://blog.cmdragon.cn/posts/cc7cd2c85be6f573dbbab01a25b78ed7/</link><pubDate>Thu, 20 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cc7cd2c85be6f573dbbab01a25b78ed7/</guid><description>摘要：本文深入探讨了Nuxt 3的组件开发与管理，从基础概念、安装配置、目录结构、组件分类与开发实践、生命周期与优化，到测试与维护策略。详细介绍了Nuxt 3的核心特点，如服务器端渲染（SSR）、静态站点生成（SSG）以及与Vue生态系统的无缝集成。文章以Nuxt 3为基础，指导开发者如何高效构建高性能、可维护的Vue应用程序。内容涵盖了基本组件的定义与分类、独立组件与函数式组件的示例、Props和Slots的使用、Composition API的引入，以及组件的生命周期与优化方法。同时，文章还提供了组件开发的实践案例，包括自定义组件开发、异步加载组件、事件与方法的使用，以及组件测试与文档化指南。通过结构化的目录组织与详细的代码示例，旨在帮助开发者高效管理与维护组件，实现代码的复用与模块化。</description></item><item><title>Nuxt3页面开发实战探索</title><link>https://blog.cmdragon.cn/posts/4048e7f1938a52615537260f823bc8f2/</link><pubDate>Wed, 19 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4048e7f1938a52615537260f823bc8f2/</guid><description>摘要：这篇文章是关于Nuxt3页面开发实战探索的。它介绍了Nuxt3的基础入门，安装与配置，项目结构，内置组件与功能，以及页面与路由的相关内容。Nuxt3是基于Vue 3的服务器端渲染框架，旨在简化Vue应用程序的开发流程，提供最佳的性能和开发</description></item><item><title>Nuxt.js 深入浅出：目录结构与文件组织详解</title><link>https://blog.cmdragon.cn/posts/76244d4bdeb953ccc75974ff195ab8c4/</link><pubDate>Tue, 18 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/76244d4bdeb953ccc75974ff195ab8c4/</guid><description>摘要：本文详述了Nuxt.js框架中关键目录与配置文件的作用及使用方法，包括布局设定、页面结构管理、插件集成、静态资源处理、 Vuex状态管理、项目配置文件nuxt.config.js详解以及package.json、.eslintrc.js、.babelrc等辅助配置文件的配置方式，为构建高效Nuxt应用提供了全面指南。</description></item><item><title>安装 Nuxt.js 的步骤和注意事项</title><link>https://blog.cmdragon.cn/posts/9280ced43b0f3e88e4a3856b3ce4464d/</link><pubDate>Mon, 17 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9280ced43b0f3e88e4a3856b3ce4464d/</guid><description>Nuxt.js在Vue.js基础上提供的服务器端渲染框架优势，包括提高开发效率、代码维护性和应用性能。指南详细说明了从环境准备、Nuxt.js安装配置到进阶部署技巧，涵盖错误解决、性能优化及Docker、CI/CD实践，为开发者构建高效Web应用提供全面攻略。</description></item></channel></rss>