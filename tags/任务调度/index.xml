<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>任务调度 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</link><description>Recent content in 任务调度 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 26 Aug 2025 03:58:29 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI如何巧妙驾驭混合云任务调度，让异步魔力尽情释放？</title><link>https://blog.cmdragon.cn/posts/8d8e78fb048643f7ad6bd82d61e85d84/</link><pubDate>Tue, 26 Aug 2025 03:58:29 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8d8e78fb048643f7ad6bd82d61e85d84/</guid><description>FastAPI框架利用其异步特性，结合Celery和Redis，构建了混合云任务调度方案，适用于高并发场景。方案通过Pydantic模型验证任务请求，智能路由任务至公有云或私有云节点，并实时跟踪任务状态。代码示例展示了任务提交、路由决策和状态查询的实现，特别适用于视频转码等计算密集型任务。系统自动将高负荷任务分配至公有云，普通任务则在本地处理，确保资源高效利用。</description></item><item><title>如何在FastAPI中巧妙实现延迟队列，让任务乖乖等待？</title><link>https://blog.cmdragon.cn/posts/174450702d9e609a072a7d1aaa84750b/</link><pubDate>Fri, 22 Aug 2025 14:32:13 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/174450702d9e609a072a7d1aaa84750b/</guid><description>消息队列是分布式系统中实现异步通信的核心组件，延迟队列则允许在指定时间后投递消息，适用于定时任务和失败重试等场景。FastAPI中推荐使用Redis或RabbitMQ作为消息中间件，结合Celery或arq实现延迟队列。Redis通过Sorted Set和arq实现全异步延迟队列，RabbitMQ则利用死信队列实现延迟投递。实际应用包括电商订单超时、会议提醒、重试机制和定时报告等。常见问题如422验证错误和连接拒绝错误，需检查数据格式和连接参数。</description></item><item><title>如何用APScheduler和FastAPI打造永不宕机的分布式定时任务系统？</title><link>https://blog.cmdragon.cn/posts/51a0ff47f509fb6238150a96f551b317/</link><pubDate>Sun, 17 Aug 2025 10:03:03 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/51a0ff47f509fb6238150a96f551b317/</guid><description>APScheduler分布式定时任务协调解决了单点故障和任务重复执行的问题。其核心组件包括作业存储、执行器和触发器，通过Redis实现分布式锁、心跳检测和故障转移。FastAPI集成APScheduler可实现分布式任务调度，确保任务单节点执行和优雅关闭。应用场景包括电商优惠券过期系统和分布式日志清理系统。常见问题如任务重复执行和节点状态不同步，可通过正确加锁和双心跳检测机制解决。进阶技巧包括任务监控、动态扩缩容和最佳实践建议。</description></item><item><title>如何在FastAPI中玩转APScheduler，实现动态定时任务的魔法？</title><link>https://blog.cmdragon.cn/posts/4fb9e30bb20956319c783e21897a667a/</link><pubDate>Sat, 16 Aug 2025 01:14:26 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4fb9e30bb20956319c783e21897a667a/</guid><description>APScheduler是Python中强大的任务调度库，支持任务持久化、多种触发方式和分布式执行。与FastAPI集成时，通过将Scheduler实例挂载到应用状态中，实现动态任务管理。核心代码展示了如何初始化调度器、创建和删除任务，并模拟API调用。最佳实践包括认证授权、并发控制和任务熔断。常见错误如JobLookupError和MaxInstancesReachedError，可通过任务检查和并发限制解决。</description></item><item><title>BackgroundTasks 还是 RabbitMQ？你的异步任务到底该选谁？</title><link>https://blog.cmdragon.cn/posts/d26fdc150ff9dd70c7482381ff4c77c4/</link><pubDate>Thu, 07 Aug 2025 07:20:32 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d26fdc150ff9dd70c7482381ff4c77c4/</guid><description>FastAPI 的 BackgroundTasks 适用于轻量级任务，如日志记录和邮件发送，执行时间通常小于 3 秒。对于耗时任务，如图片处理和数据分析，推荐使用 RabbitMQ 结合 Celery。RabbitMQ 提供了消息持久化、任务重试和高并发处理能力，确保任务不丢失。通过 Pydantic 模型设计任务负载，生产者将任务提交到队列，消费者异步处理任务。综合案例展示了图片水印处理系统的实现，结合 BackgroundTasks 和 RabbitMQ 的优势，提升系统性能和可靠性。</description></item></channel></rss>