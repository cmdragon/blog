<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分布式系统 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 分布式系统 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Aug 2025 06:28:21 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>如何让FastAPI在百万级任务处理中依然游刃有余？</title><link>https://blog.cmdragon.cn/posts/469aae0e0f88c642ed8bc82e102b960b/</link><pubDate>Sun, 24 Aug 2025 06:28:21 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/469aae0e0f88c642ed8bc82e102b960b/</guid><description>FastAPI 通过异步 I/O 模型和任务队列解耦实现高并发任务处理，支持每秒超过 10 万请求。核心架构包括请求接收、消息队列、Worker 集群和数据库存储。异步任务处理通过 BackgroundTasks 和 Celery 实现，支持水平扩展和资源隔离。性能优化策略包括 Kubernetes Pod 扩展、Celery 多节点和 RabbitMQ 集群。任务持久化通过消息队列和 Celery 的 acks_late 参数确保。常见报错如连接重置和任务超时，可通过心跳检测和超时设置解决。</description></item><item><title>如何让FastAPI与消息队列的联姻既甜蜜又可靠？</title><link>https://blog.cmdragon.cn/posts/1bebb53f4d9d6fbd0ecbba97562c07b0/</link><pubDate>Sat, 23 Aug 2025 05:07:15 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1bebb53f4d9d6fbd0ecbba97562c07b0/</guid><description>消息队列与FastAPI集成在分布式系统中用于解耦服务，通过异步特性支持消息事务和幂等性保障。消息事务确保数据库操作与消息发送的原子性，避免数据不一致。幂等性设计通过唯一ID和Redis校验防止消息重复处理。关键解决方案包括事务型消息、幂等令牌和全局唯一ID。常见报错如422和503，可通过校验模型、重试机制和连接池解决。依赖库包括FastAPI、SQLAlchemy、Redis和Pika。</description></item><item><title>如何让FastAPI任务系统在失败时自动告警并自我修复？</title><link>https://blog.cmdragon.cn/posts/2f104637ecc916e906c002fa79ab8c80/</link><pubDate>Wed, 20 Aug 2025 08:18:42 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2f104637ecc916e906c002fa79ab8c80/</guid><description>FastAPI 和 Celery 结合提供了强大的异步任务处理能力，但在分布式系统中，任务失败不可避免。通过任务监控架构设计，实现自动重试与告警机制，确保关键业务流程不中断。故障诊断与修复流程包括自动修复策略矩阵和任务分级管理，针对不同故障类型采取相应措施。生产环境最佳实践包括死亡任务处理和任务配置模型，确保系统稳定运行。常见报错解决方案涵盖了 Worker 崩溃、任务超时和结果丢失等问题，提供具体的优化和配置建议。</description></item><item><title>如何在FastAPI中玩转跨服务权限校验的魔法？</title><link>https://blog.cmdragon.cn/posts/3308559e2761ceaaa2fcbdd39fc29e18/</link><pubDate>Tue, 24 Jun 2025 08:23:40 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/3308559e2761ceaaa2fcbdd39fc29e18/</guid><description>FastAPI跨服务权限校验通过可信令牌颁发、令牌传播机制和分布式验证实现微服务架构安全。核心组件包括令牌生成服务和验证逻辑，使用JWT进行身份认证和权限控制。服务间调用通过HTTPX自动携带令牌，确保权限上下文传递。实践案例展示了电商订单流程中的跨服务操作。常见报错涉及无效签名和权限不足，建议使用短期令牌和权限枚举。进阶安全措施包括双因素令牌、请求签名和令牌绑定，增强系统安全性。</description></item><item><title>多进程编程：原理、技术与应用</title><link>https://blog.cmdragon.cn/posts/acb62ae2b56d9c6ac77eafbca169b7a0/</link><pubDate>Fri, 26 Apr 2024 12:14:47 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/acb62ae2b56d9c6ac77eafbca169b7a0/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_04_26 12_21_48.png" title="2024_04_26 12_21_48.png" alt="2024_04_26 12_21_48.png"/>
&lt;h3 id="第一章进程与线程">第一章：进程与线程&lt;/h3>
&lt;h4 id="进程与线程的概念及区别">进程与线程的概念及区别：&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>进程&lt;/strong>：进程是操作系统中的一个程序执行实例。每个进程都有自己独立的内存空间，包括代码、数据、堆栈等。进程之间是相互独立的，彼此不会直接影响。进程是系统进行资源分配和调度的基本单位。&lt;/p></description></item><item><title>UUID算法：独一无二的标识符解决方案</title><link>https://blog.cmdragon.cn/posts/0cef7779d9197025b201b98099a23fe3/</link><pubDate>Sat, 10 Feb 2024 21:00:39 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0cef7779d9197025b201b98099a23fe3/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_02_10 21_02_30.png" title="2024_02_10 21_02_30.png" alt="2024_02_10 21_02_30.png"/>
&lt;h2 id="引言">引言&lt;/h2>
&lt;p>在分布式系统和大数据环境下，唯一标识符的生成和管理是一项关键任务。UUID（Universally Unique
Identifier）算法应运而生，成为了解决重复数据和标识符冲突的有效工具。本文将探讨UUID算法的优势和劣势，分析其在分布式系统、大数据环境以及其他领域中的应用，同时给出Python完整示例演示UUID的生成和使用。&lt;/p></description></item></channel></rss>