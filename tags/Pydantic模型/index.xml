<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pydantic模型 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/Pydantic%E6%A8%A1%E5%9E%8B/</link><description>Recent content in Pydantic模型 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 19 Sep 2025 03:01:03 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/Pydantic%E6%A8%A1%E5%9E%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>给接口加新字段又不搞崩老客户端？FastAPI的多版本API靠哪三招实现？</title><link>https://blog.cmdragon.cn/posts/cc098d8836e787baa8a4d92e4d56d5c5/</link><pubDate>Fri, 19 Sep 2025 03:01:03 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cc098d8836e787baa8a4d92e4d56d5c5/</guid><description>多版本API的核心在于解决快速迭代中的向后兼容问题，避免老客户端因接口修改而崩溃。FastAPI通过路由隔离机制实现多版本API，利用&lt;code&gt;APIRouter&lt;/code&gt;和&lt;code&gt;prefix&lt;/code&gt;将不同版本的接口逻辑封装为独立模块。具体实现中，通过继承Pydantic模型减少重复代码并保持兼容性。测试策略包括单元测试和兼容性测试，确保各版本接口独立工作且跨版本交互无误。常见报错如422验证错误和路由冲突，可通过检查字段定义和路由前缀解决。</description></item><item><title>FastAPI如何用契约测试确保API的「菜单」与「菜品」一致？</title><link>https://blog.cmdragon.cn/posts/02b0c96842d1481c72dab63a149ce0dd/</link><pubDate>Sat, 13 Sep 2025 02:46:54 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/02b0c96842d1481c72dab63a149ce0dd/</guid><description>契约测试是验证API提供者与消费者交互一致性的方法，核心在于定义API请求格式、响应结构等规则的「契约」。FastAPI通过类型注解、Pydantic模型和路径操作自动生成OpenAPI规范，作为契约源，确保代码与文档一致。Schemathesis工具加载OpenAPI规范，生成测试用例验证API行为。实践步骤包括编写API代码、契约测试代码，运行测试并集成CI流程，确保每次提交自动验证契约一致性，减少协作成本，提前发现问题，明确责任边界。</description></item><item><title>如何在FastAPI中巧妙玩转数据脱敏，让敏感信息安全无忧？</title><link>https://blog.cmdragon.cn/posts/045021f8831a03bcdf71e44cb793baf4/</link><pubDate>Tue, 01 Jul 2025 15:37:22 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/045021f8831a03bcdf71e44cb793baf4/</guid><description>FastAPI框架中，数据脱敏通过Pydantic模型标记敏感字段，使用SecretStr类型自动隐藏敏感数据，并配置模型以排除特定字段。响应数据动态脱敏策略包括响应模型过滤、动态字段排除和条件脱敏实现。第三方加密服务集成如Vault，提供加密数据和密钥管理功能。常见问题如422验证错误和Vault连接超时，通过检查请求体、验证字段类型和更新客户端令牌解决。环境配置和代码验证方法确保安全实践的有效性。</description></item><item><title>深入掌握FastAPI与OpenAPI规范的高级适配技巧</title><link>https://blog.cmdragon.cn/posts/84f771a5938908d4287f4b0d3ee77234/</link><pubDate>Sun, 30 Mar 2025 01:16:11 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/84f771a5938908d4287f4b0d3ee77234/</guid><description>OpenAPI规范是RESTful API的标准描述格式，FastAPI通过自动化Schema生成机制将Pydantic模型和路径操作转换为标准OpenAPI文档，实现实时同步、交互式测试和严格验证。开发者可通过FastAPI配置全局文档信息、定制路径操作文档、配置安全方案，并利用Pydantic进行动态Schema生成和自定义字段类型。常见问题如422 Validation Error和文档不更新问题，可通过检查请求体、启用自动重新加载和手动生成最新文档解决。FastAPI与OpenAPI的结合为API开发提供了强大的文档化和验证功能。</description></item><item><title>FastAPI 请求体参数与 Pydantic 模型完全指南：从基础到嵌套模型实战 🚀</title><link>https://blog.cmdragon.cn/posts/068b69e100a8e9ec06b2685908e6ae96/</link><pubDate>Fri, 07 Mar 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/068b69e100a8e9ec06b2685908e6ae96/</guid><description>本教程深入探讨 FastAPI 请求体参数与 Pydantic 模型的核心机制，涵盖从基础模型定义到嵌套模型的高级用法。通过详细的代码示例、课后测验和常见错误解决方案，帮助初学者快速掌握 FastAPI 请求体参数的使用技巧。您将学习到如何通过 Pydantic 模型进行数据校验、类型转换和嵌套模型设计，从而构建安全、高效的 API 接口。</description></item></channel></rss>