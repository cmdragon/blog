<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>单元测试 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><description>Recent content in 单元测试 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 19 Sep 2025 03:01:03 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>给接口加新字段又不搞崩老客户端？FastAPI的多版本API靠哪三招实现？</title><link>https://blog.cmdragon.cn/posts/cc098d8836e787baa8a4d92e4d56d5c5/</link><pubDate>Fri, 19 Sep 2025 03:01:03 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cc098d8836e787baa8a4d92e4d56d5c5/</guid><description>多版本API的核心在于解决快速迭代中的向后兼容问题，避免老客户端因接口修改而崩溃。FastAPI通过路由隔离机制实现多版本API，利用&lt;code&gt;APIRouter&lt;/code&gt;和&lt;code&gt;prefix&lt;/code&gt;将不同版本的接口逻辑封装为独立模块。具体实现中，通过继承Pydantic模型减少重复代码并保持兼容性。测试策略包括单元测试和兼容性测试，确保各版本接口独立工作且跨版本交互无误。常见报错如422验证错误和路由冲突，可通过检查字段定义和路由前缀解决。</description></item><item><title>如何在 FastAPI 中巧妙覆盖依赖注入并拦截第三方服务调用？</title><link>https://blog.cmdragon.cn/posts/2d992ef9e8962dc0a4a0b5348d486114/</link><pubDate>Sat, 06 Sep 2025 03:34:14 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2d992ef9e8962dc0a4a0b5348d486114/</guid><description>FastAPI 的依赖注入系统允许解耦复杂依赖关系，便于代码重用。在测试中，可通过 &lt;code&gt;dependencies_overrides&lt;/code&gt; 覆盖真实依赖，避免影响实际服务。多层依赖覆盖时，需特别注意共享资源（如数据库连接）的处理。对于第三方服务调用，可使用自定义 HTTP 客户端拦截器实现请求拦截、模拟和降级处理，确保在服务异常时返回降级数据。常见报错如 &lt;code&gt;422 Unprocessable Entity&lt;/code&gt; 和 &lt;code&gt;500 Internal Server Error&lt;/code&gt; 可通过模型验证和异常处理解决，而 &lt;code&gt;TimeoutError&lt;/code&gt; 则可通过设置超时和重试机制预防。</description></item><item><title>为什么你的单元测试需要Mock数据库才能飞起来？</title><link>https://blog.cmdragon.cn/posts/6e69c0eedd8b1e5a74a148d36c85d7ce/</link><pubDate>Fri, 05 Sep 2025 05:57:12 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6e69c0eedd8b1e5a74a148d36c85d7ce/</guid><description>FastAPI 的依赖注入系统通过自动解析和管理组件依赖，提升了代码的可测试性和可维护性。Mock 对象在测试中用于替代真实依赖，如数据库连接，以避免数据污染、提高执行效率并模拟各种响应。FastAPI 的依赖系统通过 &lt;code&gt;Depends()&lt;/code&gt; 声明依赖，支持动态替换，便于测试时使用 Mock 对象。通过 &lt;code&gt;unittest.mock.patch&lt;/code&gt; 和 &lt;code&gt;app.dependency_overrides&lt;/code&gt; 可实现函数和生成器依赖的模拟，结合 Pydantic 模型确保 Mock 数据符合接口契约。分层 Mock 策略和自动化 Fixture 管理进一步优化了测试流程。</description></item><item><title>Pydantic模型验证测试：你的API数据真的安全吗？</title><link>https://blog.cmdragon.cn/posts/03b2afdf35f55dbaef631710ab6da82c/</link><pubDate>Wed, 03 Sep 2025 23:46:18 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/03b2afdf35f55dbaef631710ab6da82c/</guid><description>Pydantic在FastAPI中用于数据验证和序列化，通过Python类型注解自动解析请求体并执行验证规则，确保代码简洁安全。验证测试至关重要，可防止无效数据进入业务逻辑层，避免安全漏洞和API错误。测试环境需使用最新库版本，模型定义包括邮箱、密码和年龄的验证规则。测试脚本涵盖有效数据、边界条件和错误场景的验证。与FastAPI集成测试确保API端点验证正确。最佳实践包括覆盖所有字段、测试边界值和验证错误消息的明确性。</description></item><item><title>如何在FastAPI中巧妙隔离依赖项，让单元测试不再头疼？</title><link>https://blog.cmdragon.cn/posts/77ae327dc941b0e74ecc6a8794c084d0/</link><pubDate>Wed, 03 Sep 2025 06:10:25 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/77ae327dc941b0e74ecc6a8794c084d0/</guid><description>FastAPI单元测试是确保应用质量的关键，尤其依赖注入系统的隔离测试至关重要。通过依赖注入机制，FastAPI能自动解析函数参数并执行依赖函数，将返回值注入路由处理函数。测试时，可使用&lt;code&gt;dependency_overrides&lt;/code&gt;替换依赖项，模拟不同场景。单元测试应占据最大比重，避免外部服务不可用导致的测试失败。测试技巧包括模拟依赖返回、依赖项层级隔离和异步依赖处理。实战案例展示了用户认证测试的具体实现，确保权限验证逻辑正确。</description></item><item><title>测试覆盖率不够高？这些技巧让你的FastAPI测试无懈可击！</title><link>https://blog.cmdragon.cn/posts/0577d0e24f48b3153b510e74d3d1a822/</link><pubDate>Tue, 02 Sep 2025 01:49:10 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0577d0e24f48b3153b510e74d3d1a822/</guid><description>FastAPI通过TestClient工具支持单元测试，模拟HTTP请求直接调用路由处理器，验证响应状态码和数据结构。Pydantic模型确保响应数据的结构和类型符合预期，验证失败时返回422错误。测试覆盖率可通过pytest-cov工具统计，依赖项使用unittest.mock模拟。测试金字塔模型建议单元测试占70-80%，集成测试占15-20%，端到端测试占5-10%。常见错误如422、401和500，可通过检查响应模型、注入认证token和启用详细日志进行调试。</description></item><item><title>如何在FastAPI中让后台任务既高效又不会让你的应用崩溃？</title><link>https://blog.cmdragon.cn/posts/5ad8d0a4c8f2d05e9c1a42d828aad7b3/</link><pubDate>Wed, 30 Jul 2025 12:01:00 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5ad8d0a4c8f2d05e9c1a42d828aad7b3/</guid><description>FastAPI 的 BackgroundTasks 允许将非即时性操作（如发送邮件、日志记录）从主请求流程中分离，提升响应速度并支持同步/异步混合任务处理。通过注入 BackgroundTasks 参数并使用 add_task 方法添加任务，开发者可以轻松实现后台任务。高级功能包括依赖注入增强和混合任务处理，测试时可通过 pytest 进行单元测试和集成测试。后台任务异常不会影响主请求响应，需通过自定义错误处理中间件捕获。</description></item><item><title>如何在FastAPI中玩转权限控制与测试，让代码安全又优雅？</title><link>https://blog.cmdragon.cn/posts/6de8fc7807cadec4d735ea5771cecf3a/</link><pubDate>Wed, 18 Jun 2025 10:11:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6de8fc7807cadec4d735ea5771cecf3a/</guid><description>FastAPI通过依赖注入系统实现权限控制，使用&lt;code&gt;Depends()&lt;/code&gt;函数接收权限验证依赖项，验证流程包括解析凭证、验证有效性并提取用户角色。权限层级划分为公共端点、用户级端点和管理员端点。单元测试使用&lt;code&gt;pytest&lt;/code&gt;验证权限逻辑，集成测试通过&lt;code&gt;httpx&lt;/code&gt;模拟请求。完整测试案例包括用户系统权限测试和覆盖率提升技巧。常见问题如401和403错误，解决方案包括检查请求头和用户角色分配。安全加固建议使用HTTPS、设置令牌有效期和记录审计日志。</description></item><item><title>FastAPI与SQLAlchemy数据库集成</title><link>https://blog.cmdragon.cn/posts/c89a99dade2879f73464405270096546/</link><pubDate>Thu, 17 Apr 2025 15:33:34 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c89a99dade2879f73464405270096546/</guid><description>FastAPI与SQLAlchemy的集成通过创建虚拟环境、安装依赖、配置数据库连接、定义数据模型和实现路由来完成。核心模块包括数据库引擎、会话工厂和声明性基类。数据模型通过SQLAlchemy定义，路由通过FastAPI实现，支持创建和查询用户。测试接口通过curl命令进行，常见报错包括表不存在、请求体验证错误和会话不可用。高级配置涉及连接池优化和单元测试。</description></item><item><title>FastAPI依赖覆盖与测试环境模拟</title><link>https://blog.cmdragon.cn/posts/8a2bd816fabac0bc10bd2cf8494e4631/</link><pubDate>Thu, 10 Apr 2025 00:58:09 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8a2bd816fabac0bc10bd2cf8494e4631/</guid><description>FastAPI的依赖覆盖机制通过重写依赖项实现运行环境切换，适用于隔离测试和模拟特定场景。依赖项存储在&lt;code&gt;dependency_overrides&lt;/code&gt;字典中，优先检查覆盖字典，使用&lt;code&gt;@app.dependency_overrides&lt;/code&gt;装饰器进行临时替换，测试完成后自动恢复。通过pytest搭建测试环境，覆盖数据库依赖，使用&lt;code&gt;TestClient&lt;/code&gt;进行测试。多场景模拟测试案例包括用户权限验证和第三方API模拟，分层测试策略涵盖单元测试、集成测试和E2E测试。最佳实践包括使用pytest参数化进行多场景测试，确保测试覆盖率统计包含依赖注入代码。常见报错如&lt;code&gt;DependencyOverrideNotFound&lt;/code&gt;和&lt;code&gt;TestClient响应验证失败&lt;/code&gt;，可通过检查依赖项定义、模拟数据格式和类型注解解决。</description></item></channel></rss>