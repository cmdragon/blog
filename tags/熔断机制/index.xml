<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>熔断机制 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/</link><description>Recent content in 熔断机制 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 18 Sep 2025 04:06:18 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>流量突增要搞崩FastAPI？熔断测试是怎么防系统雪崩的？</title><link>https://blog.cmdragon.cn/posts/46d05151c5bd31cf37a7bcf0b8f5b0b8/</link><pubDate>Thu, 18 Sep 2025 04:06:18 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/46d05151c5bd31cf37a7bcf0b8f5b0b8/</guid><description>熔断机制是系统自我保护的关键，能在API面临流量突增或下游服务故障时快速切断异常请求，防止雪崩效应。熔断器通过三状态转换逻辑（闭合、打开、半开）管理请求转发策略。在FastAPI中，pybreaker库支持熔断实现，通过配置失败阈值、重置时间等参数，结合Locust模拟流量突增，验证熔断效果。合理配置和监控熔断器状态，可有效预防误触发，确保系统稳定运行。</description></item><item><title>如何在API高并发中玩转资源隔离与限流策略？</title><link>https://blog.cmdragon.cn/posts/4ad4ec1dbd80bcf5670fb397ca7cc68c/</link><pubDate>Wed, 27 Aug 2025 23:26:45 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4ad4ec1dbd80bcf5670fb397ca7cc68c/</guid><description>资源隔离是保障API稳定性的核心，通过路由隔离和依赖隔离实现关键业务与非关键业务的分离，避免资源耗尽。限流策略包括令牌桶算法和滑动窗口算法，控制请求速率以保护系统。FastAPI中通过slowapi库实现限流，支持路由级动态限流和分布式限流。分布式限流基于Redis，确保多实例环境下的全局限流。电商支付系统案例展示了核心接口使用独立数据库连接池，日志查询使用公共资源。熔断策略通过CircuitBreaker模式实现自动熔断，应对连续超时问题。</description></item></channel></rss>