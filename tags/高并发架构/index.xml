<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>高并发架构 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E9%AB%98%E5%B9%B6%E5%8F%91%E6%9E%B6%E6%9E%84/</link><description>Recent content in 高并发架构 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Aug 2025 06:28:21 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E9%AB%98%E5%B9%B6%E5%8F%91%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>如何让FastAPI在百万级任务处理中依然游刃有余？</title><link>https://blog.cmdragon.cn/posts/469aae0e0f88c642ed8bc82e102b960b/</link><pubDate>Sun, 24 Aug 2025 06:28:21 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/469aae0e0f88c642ed8bc82e102b960b/</guid><description>FastAPI 通过异步 I/O 模型和任务队列解耦实现高并发任务处理，支持每秒超过 10 万请求。核心架构包括请求接收、消息队列、Worker 集群和数据库存储。异步任务处理通过 BackgroundTasks 和 Celery 实现，支持水平扩展和资源隔离。性能优化策略包括 Kubernetes Pod 扩展、Celery 多节点和 RabbitMQ 集群。任务持久化通过消息队列和 Celery 的 acks_late 参数确保。常见报错如连接重置和任务超时，可通过心跳检测和超时设置解决。</description></item></channel></rss>