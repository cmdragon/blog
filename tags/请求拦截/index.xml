<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>请求拦截 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA/</link><description>Recent content in 请求拦截 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 06 Sep 2025 03:34:14 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在 FastAPI 中巧妙覆盖依赖注入并拦截第三方服务调用？</title><link>https://blog.cmdragon.cn/posts/2d992ef9e8962dc0a4a0b5348d486114/</link><pubDate>Sat, 06 Sep 2025 03:34:14 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2d992ef9e8962dc0a4a0b5348d486114/</guid><description>FastAPI 的依赖注入系统允许解耦复杂依赖关系，便于代码重用。在测试中，可通过 &lt;code&gt;dependencies_overrides&lt;/code&gt; 覆盖真实依赖，避免影响实际服务。多层依赖覆盖时，需特别注意共享资源（如数据库连接）的处理。对于第三方服务调用，可使用自定义 HTTP 客户端拦截器实现请求拦截、模拟和降级处理，确保在服务异常时返回降级数据。常见报错如 &lt;code&gt;422 Unprocessable Entity&lt;/code&gt; 和 &lt;code&gt;500 Internal Server Error&lt;/code&gt; 可通过模型验证和异常处理解决，而 &lt;code&gt;TimeoutError&lt;/code&gt; 则可通过设置超时和重试机制预防。</description></item><item><title>如何在FastAPI中打造坚不可摧的安全防线？</title><link>https://blog.cmdragon.cn/posts/c74023c89591cfdffe2f392c8f3fac7a/</link><pubDate>Fri, 20 Jun 2025 11:33:15 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c74023c89591cfdffe2f392c8f3fac7a/</guid><description>FastAPI的中间件机制允许对HTTP请求和响应进行拦截处理，适用于身份认证、日志记录、流量控制等场景。通过注册中间件，可以实现IP黑名单拦截、敏感词过滤等功能。集成JWT认证和角色权限验证，确保API的安全性。常见错误如422、401、500等可通过全局异常处理器进行统一处理。最佳实践包括启用HTTPS、使用环境变量管理敏感配置、定期更新依赖库等，以构建企业级安全的API服务。</description></item></channel></rss>