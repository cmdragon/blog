<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQL on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/GraphQL/</link><description>Recent content in GraphQL on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 19 Jul 2025 05:41:41 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/GraphQL/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI遇上GraphQL：异步解析器如何让API性能飙升？</title><link>https://blog.cmdragon.cn/posts/35fced261e8ff834e68e07c93902cc13/</link><pubDate>Sat, 19 Jul 2025 05:41:41 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/35fced261e8ff834e68e07c93902cc13/</guid><description>GraphQL相比RESTful API通过单一智能端点减少网络开销，避免数据冗余。FastAPI通过Starlette中间件实现GraphQL路由挂载，处理流程包括解析查询、批量数据请求和异步查询。异步解析器使用Python 3.11的async/await语法提升IO效率。DataLoader优化N+1查询，通过缓存和请求合并技术避免数据库查询风暴。常见报错如字段缺失或权限问题，可通过检查schema定义、验证数据源和添加权限校验解决。</description></item><item><title>Strawberry、Graphene还是Ariadne：谁才是FastAPI中GraphQL的最佳拍档？</title><link>https://blog.cmdragon.cn/posts/f4ba34abe80a510080bb8b97f5cc92a8/</link><pubDate>Fri, 18 Jul 2025 03:57:51 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f4ba34abe80a510080bb8b97f5cc92a8/</guid><description>GraphQL在FastAPI中的实现主要有三种方案：Strawberry、Graphene和Ariadne。Strawberry采用类型注解语法，自动生成Schema，开发体验优；Graphene使用类继承结构，需手动定义类型和解析器，灵活性高；Ariadne基于SDL优先原则，适合已有Schema的项目改造。性能上，Strawberry支持异步，表现最佳；社区活跃度方面，Strawberry更新频繁，Graphene和Ariadne相对稳定。选型时，若需完整SDL控制或已有Schema，优先选择Ariadne；若追求开发速度或异步支持，Strawberry更为合适。</description></item><item><title>GraphQL的N+1问题如何被DataLoader巧妙化解？</title><link>https://blog.cmdragon.cn/posts/72629304782a121fbf89b151c436f9aa/</link><pubDate>Thu, 17 Jul 2025 07:50:56 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/72629304782a121fbf89b151c436f9aa/</guid><description>N+1问题在GraphQL嵌套查询中表现为查询次数与结果集大小成正比，导致效率低下。DataLoader通过批处理机制、请求缓存和异步支持解决这一问题，将多个关联查询请求合并为批量操作，提升性能。FastAPI集成DataLoader时，需配置环境、定义数据模型并实现批量查询函数。性能测试显示，使用DataLoader后，平均响应时间从850ms降至120ms，TPS从117提升到833。典型报错如缺少子字段选择，需明确指定返回字段。</description></item><item><title>FastAPI与GraphQL的完美邂逅：如何打造高效API？</title><link>https://blog.cmdragon.cn/posts/fb5c5c7b00bbe57b3a5346b8ee5bc289/</link><pubDate>Wed, 16 Jul 2025 10:47:21 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/fb5c5c7b00bbe57b3a5346b8ee5bc289/</guid><description>FastAPI与GraphQL集成通过Ariadne库实现，支持查询、变更和订阅操作。查询操作通过GraphQL解析器获取数据并验证格式，变更操作使用Pydantic进行数据验证和持久化存储，订阅操作通过WebSocket实现实时消息推送。项目采用分层架构，核心操作包括用户查询、创建和消息订阅。常见错误如422验证错误和类型解析错误，可通过检查请求参数、使用Pydantic模型和自定义标量解析器解决。</description></item><item><title>GraphQL类型系统如何让FastAPI开发更高效？</title><link>https://blog.cmdragon.cn/posts/31c152e531e1cbe5b5cfe15e7ff053c9/</link><pubDate>Tue, 15 Jul 2025 13:33:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/31c152e531e1cbe5b5cfe15e7ff053c9/</guid><description>FastAPI支持GraphQL类型系统，包括标量类型（String/Int/Float/Boolean/ID）和对象类型，可通过pydantic定义数据模型。枚举类型使用Python的Enum类定义。Schema定义规范包括Query和Mutation类型，支持字段、参数和返回类型。输入类型与输出类型应分离，分别用于接收客户端数据和返回响应数据。与RESTful相比，GraphQL查询更灵活。实战案例展示了如何使用Strawberry和FastAPI实现GraphQL服务。课后Quiz强调了自定义标量类型的重要性，如定义手机号格式字段。报错处理建议检查模型继承、字段类型匹配和数据序列化过程，并使用mypy进行静态类型检查和编写单元测试。</description></item><item><title>REST和GraphQL究竟谁才是API设计的终极赢家？</title><link>https://blog.cmdragon.cn/posts/218ad2370eab6197f42fdc9c52f0fc19/</link><pubDate>Mon, 14 Jul 2025 15:33:21 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/218ad2370eab6197f42fdc9c52f0fc19/</guid><description>REST架构基于HTTP协议，采用资源导向设计，通过URL路径参数定位资源，适合多端点请求。GraphQL基于类型系统，采用单端点设计，允许客户端定义响应结构，适合复杂查询。REST通过多个请求获取嵌套数据，GraphQL单次查询即可实现。性能测试显示，REST在简单查询中表现更优，GraphQL在复杂查询中延迟更低。混合架构可通过网关层集成两者，优化查询策略如DataLoader解决N+1问题。异常处理需关注验证错误和执行错误。</description></item></channel></rss>