<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DataLoader on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/DataLoader/</link><description>Recent content in DataLoader on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 19 Jul 2025 05:41:41 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/DataLoader/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI遇上GraphQL：异步解析器如何让API性能飙升？</title><link>https://blog.cmdragon.cn/posts/35fced261e8ff834e68e07c93902cc13/</link><pubDate>Sat, 19 Jul 2025 05:41:41 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/35fced261e8ff834e68e07c93902cc13/</guid><description>GraphQL相比RESTful API通过单一智能端点减少网络开销，避免数据冗余。FastAPI通过Starlette中间件实现GraphQL路由挂载，处理流程包括解析查询、批量数据请求和异步查询。异步解析器使用Python 3.11的async/await语法提升IO效率。DataLoader优化N+1查询，通过缓存和请求合并技术避免数据库查询风暴。常见报错如字段缺失或权限问题，可通过检查schema定义、验证数据源和添加权限校验解决。</description></item><item><title>GraphQL的N+1问题如何被DataLoader巧妙化解？</title><link>https://blog.cmdragon.cn/posts/72629304782a121fbf89b151c436f9aa/</link><pubDate>Thu, 17 Jul 2025 07:50:56 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/72629304782a121fbf89b151c436f9aa/</guid><description>N+1问题在GraphQL嵌套查询中表现为查询次数与结果集大小成正比，导致效率低下。DataLoader通过批处理机制、请求缓存和异步支持解决这一问题，将多个关联查询请求合并为批量操作，提升性能。FastAPI集成DataLoader时，需配置环境、定义数据模型并实现批量查询函数。性能测试显示，使用DataLoader后，平均响应时间从850ms降至120ms，TPS从117提升到833。典型报错如缺少子字段选择，需明确指定返回字段。</description></item></channel></rss>