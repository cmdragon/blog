<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>任务队列 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</link><description>Recent content in 任务队列 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Aug 2025 23:35:36 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml"/><item><title>冷热任务分离：是提升Web性能的终极秘籍还是技术噱头？</title><link>https://blog.cmdragon.cn/posts/9c3dc7767a9282f7ef02daad42539f2c/</link><pubDate>Sun, 24 Aug 2025 23:35:36 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9c3dc7767a9282f7ef02daad42539f2c/</guid><description>冷热任务分离是提升Web应用性能的关键策略，热任务要求毫秒级响应，直接影响用户体验，如API主逻辑和数据库查询；冷任务可延后处理，如发送邮件和日志写入。通过任务解耦，热任务即时响应，冷任务进入队列异步执行，提升吞吐量、增强稳定性并优化资源。FastAPI支持原生后台任务和Celery分布式队列两种实现方案，适用于不同场景。最佳实践包括任务切分、监控指标和资源分配比例，确保系统高效运行。</description></item><item><title>如何让你的FastAPI Celery Worker在压力下优雅起舞？</title><link>https://blog.cmdragon.cn/posts/c3129f4b424d2ed2330484b82ec31875/</link><pubDate>Mon, 11 Aug 2025 08:31:32 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c3129f4b424d2ed2330484b82ec31875/</guid><description>FastAPI 项目中配置 Celery Worker 涉及基础设置、自动扩展和容器化部署。首先，在 celery_app.py 中定义 Celery 应用，配置任务路由和 Redis 作为消息代理。通过命令行参数控制 Worker 的并发数、日志级别和队列监听。自动扩展功能通过 SmartAutoscaler 类实现，根据 CPU 使用率动态调整 Worker 数量。Docker Compose 部署方案包括 Redis 和 Worker 服务，支持多副本和资源限制。监控与日志配置使用结构化日志记录，便于任务追踪。常见错误如 WorkerLostError 和协议不匹配，可通过调整系统设置和协议版本解决。</description></item><item><title>FastAPI消息持久化与ACK机制：如何确保你的任务永不迷路？</title><link>https://blog.cmdragon.cn/posts/13a59846aaab71b44ab6f3dadc5b5ec7/</link><pubDate>Sat, 09 Aug 2025 04:51:03 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/13a59846aaab71b44ab6f3dadc5b5ec7/</guid><description>FastAPI框架中，消息持久化和ACK确认机制是确保任务可靠执行的关键。默认的内存任务存储存在服务器重启丢失和高并发内存压力问题。通过消息队列和持久化数据库备份实现任务持久化，结合ACK确认机制确保消息被正确处理后才移除。Celery+RabbitMQ集成方案提供高效的任务调度和队列管理。增强型任务模型支持优先级和过期时间设置。常见报错如502 Bad Gateway和422 Validation Error需检查消息队列连接和任务模型字段验证。</description></item></channel></rss>