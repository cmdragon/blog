<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>监控与日志 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%97%A5%E5%BF%97/</link><description>Recent content in 监控与日志 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 11 Aug 2025 08:31:32 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%97%A5%E5%BF%97/index.xml" rel="self" type="application/rss+xml"/><item><title>如何让你的FastAPI Celery Worker在压力下优雅起舞？</title><link>https://blog.cmdragon.cn/posts/c3129f4b424d2ed2330484b82ec31875/</link><pubDate>Mon, 11 Aug 2025 08:31:32 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c3129f4b424d2ed2330484b82ec31875/</guid><description>FastAPI 项目中配置 Celery Worker 涉及基础设置、自动扩展和容器化部署。首先，在 celery_app.py 中定义 Celery 应用，配置任务路由和 Redis 作为消息代理。通过命令行参数控制 Worker 的并发数、日志级别和队列监听。自动扩展功能通过 SmartAutoscaler 类实现，根据 CPU 使用率动态调整 Worker 数量。Docker Compose 部署方案包括 Redis 和 Worker 服务，支持多副本和资源限制。监控与日志配置使用结构化日志记录，便于任务追踪。常见错误如 WorkerLostError 和协议不匹配，可通过调整系统设置和协议版本解决。</description></item></channel></rss>