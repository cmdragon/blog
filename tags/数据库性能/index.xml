<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库性能 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD/</link><description>Recent content in 数据库性能 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 22 Oct 2025 09:24:06 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL连接的那些弯弯绕：笛卡尔积、外连接和LATERAL你都理明白没？</title><link>https://blog.cmdragon.cn/posts/0b86f22d9b99fabd6a798d05d5561d7a/</link><pubDate>Wed, 22 Oct 2025 09:24:06 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0b86f22d9b99fabd6a798d05d5561d7a/</guid><description>PostgreSQL支持多种连接类型，包括交叉连接（CROSS JOIN）、内连接（INNER JOIN）和外连接（LEFT/RIGHT/FULL OUTER JOIN）。交叉连接生成笛卡尔积，内连接仅保留匹配行，外连接保留未匹配行并用NULL填充。USING和NATURAL JOIN可简化连接条件。连接顺序影响性能，建议优先连接小结果集的表。LATERAL子查询允许动态引用前面表的列。PostgreSQL根据表大小、索引和连接条件自动选择连接算法，如嵌套循环、哈希连接和排序合并连接。优化技巧包括避免不必要的外连接、提前过滤数据和避免笛卡尔积。</description></item><item><title>PostgreSQL索引选B-Tree还是GiST？“瑞士军刀”和“多面手”的差别你居然还不知道？</title><link>https://blog.cmdragon.cn/posts/d498f63cd0a2d5a77e445c688a8b88db/</link><pubDate>Wed, 08 Oct 2025 01:54:08 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d498f63cd0a2d5a77e445c688a8b88db/</guid><description>索引是PostgreSQL中优化查询性能的核心工具，本质是表数据的“快速查找目录”，减少磁盘IO次数。B-Tree是默认索引类型，适用于等值查询、范围查询和排序，结构为自平衡树，查询时间稳定。GiST是高级索引类型，支持复杂数据类型和查询场景，如空间数据查询和全文搜索。选择索引时需结合查询需求、数据类型和维护成本，B-Tree适合常规查询，GiST适合复杂查询。</description></item><item><title>想知道数据库怎么给查询“算成本选路线”？EXPLAIN能帮你看明白？</title><link>https://blog.cmdragon.cn/posts/9101b75bdec6faea9b35d54f14e37f36/</link><pubDate>Tue, 07 Oct 2025 06:47:24 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9101b75bdec6faea9b35d54f14e37f36/</guid><description>EXPLAIN工具用于展示PostgreSQL查询优化器的执行计划，帮助理解查询的执行方式和优化路径。&lt;code&gt;EXPLAIN&lt;/code&gt;仅生成估计计划，而&lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;会执行查询并提供实际数据。查询计划以树状结构呈现，包含节点类型（如&lt;code&gt;Seq Scan&lt;/code&gt;、&lt;code&gt;Index Scan&lt;/code&gt;）和关键列（如&lt;code&gt;Cost&lt;/code&gt;、&lt;code&gt;Rows&lt;/code&gt;）。&lt;code&gt;Cost&lt;/code&gt;是优化器的相对成本，基于I/O和CPU成本计算。通过分析计划，可以优化查询，如添加索引、选择合适的Join类型或避免不必要的排序。</description></item><item><title>查询优化：提升数据库性能的实用技巧</title><link>https://blog.cmdragon.cn/posts/c2b225e3d0b1e9de613fde47b1d4cacb/</link><pubDate>Fri, 14 Feb 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c2b225e3d0b1e9de613fde47b1d4cacb/</guid><description>在现代数据库环境中，查询性能直接影响到应用程序的响应速度和用户体验。查询优化的三个重要方面：执行计划分析、常见的性能瓶颈及其解决方案，以及数据库性能监控工具的有效使用（如 EXPLAIN 和 SQL Profiler）</description></item><item><title>数据库性能调优中的配置参数调整：提升系统效率的关键环节</title><link>https://blog.cmdragon.cn/posts/2a4dea5b5a55bd2bc2659efdba90e318/</link><pubDate>Fri, 31 Jan 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2a4dea5b5a55bd2bc2659efdba90e318/</guid><description>数据库的性能直接影响到应用程序的响应能力和用户体验，因此在日常运维中，管理员需要定期对数据库系统进行性能调优。配置参数调整是数据库性能调优的重要组成部分，通过优化这些参数，能够显著提高数据库的性能和稳定性。</description></item><item><title>数据库查询优化：提升性能的关键实践</title><link>https://blog.cmdragon.cn/posts/b87998b03d2638a19ecf589691b6f0ae/</link><pubDate>Thu, 30 Jan 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b87998b03d2638a19ecf589691b6f0ae/</guid><description>在当今数据驱动的商业环境中，数据库的性能直接影响着应用程序的响应速度和用户体验。查询优化是性能调优的重要组成部分，通过对 SQL 查询的分析与改进，减少查询执行时间和资源消耗，从而提升整体系统效率。</description></item><item><title>数据库性能优化</title><link>https://blog.cmdragon.cn/posts/d988cbeacdae71a7e16e34c4db5bd1ff/</link><pubDate>Wed, 18 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d988cbeacdae71a7e16e34c4db5bd1ff/</guid><description>数据库性能优化是确保数据库高效、高速响应用户请求的关键过程。通过有效的设计、合理使用索引、优化查询和系统配置，数据库管理者可以显著提升系统的响应时间和处理能力。</description></item></channel></rss>