<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库操作 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</link><description>Recent content in 数据库操作 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 25 Sep 2025 01:03:40 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL UPDATE语句怎么玩？从改邮箱到批量更新的避坑技巧你都会吗？</title><link>https://blog.cmdragon.cn/posts/0f0622e9b7402b599e618150d0596ffe/</link><pubDate>Thu, 25 Sep 2025 01:03:40 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0f0622e9b7402b599e618150d0596ffe/</guid><description>PostgreSQL的&lt;code&gt;UPDATE&lt;/code&gt;语句用于修改数据库中的已有数据，通过&lt;code&gt;SET&lt;/code&gt;子句定义新值，&lt;code&gt;WHERE&lt;/code&gt;子句精准定位行，&lt;code&gt;FROM&lt;/code&gt;子句关联其他表，&lt;code&gt;RETURNING&lt;/code&gt;子句返回修改结果。高级用法包括分批更新减少锁冲突、使用&lt;code&gt;WITH&lt;/code&gt;子句分步处理复杂逻辑、结合游标逐行修改。实践案例展示了电商订单状态更新的具体实现，常见报错如语法错误、唯一约束冲突等也提供了解决方案。</description></item><item><title>PostgreSQL DELETE居然有这些操作？返回数据、连表删你试过没？</title><link>https://blog.cmdragon.cn/posts/934be1203725e8be9d6f6e9104e5abcc/</link><pubDate>Wed, 24 Sep 2025 01:49:02 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/934be1203725e8be9d6f6e9104e5abcc/</guid><description>PostgreSQL的&lt;code&gt;DELETE&lt;/code&gt;语句用于从表中删除满足条件的行，核心逻辑通过&lt;code&gt;WHERE&lt;/code&gt;条件筛选。若无&lt;code&gt;WHERE&lt;/code&gt;，将删除所有行。&lt;code&gt;USING&lt;/code&gt;子句可连接其他表进行关联删除，&lt;code&gt;RETURNING&lt;/code&gt;子句可返回被删除的行。&lt;code&gt;WHERE CURRENT OF&lt;/code&gt;用于删除游标当前指向的行。批量删除可通过&lt;code&gt;WITH&lt;/code&gt;子查询模拟&lt;code&gt;LIMIT&lt;/code&gt;。清空表时，&lt;code&gt;TRUNCATE&lt;/code&gt;比&lt;code&gt;DELETE&lt;/code&gt;更快，但不触发触发器。常见报错包括权限不足、语法错误等，需根据具体原因解决。</description></item><item><title>点赞背后的技术大冒险：分布式事务与SAGA模式</title><link>https://blog.cmdragon.cn/posts/e586c7819314ad2cb97f35676d143adc/</link><pubDate>Wed, 07 May 2025 00:12:40 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e586c7819314ad2cb97f35676d143adc/</guid><description>在微服务架构中，点赞操作涉及多个服务的数据更新，传统数据库事务在分布式系统中失效，需采用SAGA事务模式。SAGA将事务分解为多个本地事务，通过补偿机制保证最终一致性。每个操作需定义对应的补偿操作，补偿操作需幂等，并记录事务状态和实现超时机制。代码实现包括基础模型定义、事务上下文管理器和核心业务逻辑，测试验证正常和异常流程。生产环境中建议添加事务日志、实现定时补偿任务和服务降级策略。</description></item><item><title>FastAPI中的复杂查询与原子更新指南</title><link>https://blog.cmdragon.cn/posts/f8a2c5f2662532fe5dca3a3e1f7e0b20/</link><pubDate>Fri, 02 May 2025 20:33:32 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f8a2c5f2662532fe5dca3a3e1f7e0b20/</guid><description>FastAPI 结合 Tortoise-ORM 实现复杂查询与原子更新。通过 Q 对象构建多条件查询，支持 AND、OR、NOT 逻辑运算符，动态组合查询条件。使用 F 表达式进行原子更新，避免竞态条件，确保数据一致性。示例包括订单状态与金额的复杂查询、库存扣减的原子操作，以及商品促销的价格更新。常见错误包括字段拼写错误、类型不匹配和空结果集，需通过模型检查和异常处理解决。</description></item><item><title>异步IO与Tortoise-ORM的数据库</title><link>https://blog.cmdragon.cn/posts/618edd124a0fe8340f766e276faa89fb/</link><pubDate>Tue, 29 Apr 2025 13:21:47 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/618edd124a0fe8340f766e276faa89fb/</guid><description>异步IO与同步IO的核心区别在于阻塞与非阻塞模式。Tortoise-ORM通过协议层、连接池层和ORM层实现异步数据库操作，支持高效的并发处理。用户管理系统搭建中，Tortoise-ORM与FastAPI结合，实现了用户创建和查询功能，并通过Pydantic进行数据校验。异步ORM适用于高并发场景，参数化查询可防止SQL注入。最佳实践包括连接池配置、查询优化和事务管理，确保系统性能和数据一致性。</description></item><item><title>深入解析事务基础与原子操作原理</title><link>https://blog.cmdragon.cn/posts/6f4ae59a09bfa05596ed8632ca772076/</link><pubDate>Wed, 23 Apr 2025 12:07:08 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6f4ae59a09bfa05596ed8632ca772076/</guid><description>事务是数据库操作的核心，需满足ACID特性：原子性、一致性、隔离性和持久性。事务隔离级别包括读未提交、读已提交、可重复读和串行化，适用于不同场景。嵌套事务通过上下文管理实现，支持回滚点以部分回滚。实战案例展示了订单系统中的事务处理，包括余额检查和支付失败回滚。常见错误如TransactionManagementError和死锁，需通过正确使用事务装饰器和重试机制解决。课后Quiz探讨了事务隔离和嵌套事务回滚的处理方法。运行环境配置包括依赖安装和FastAPI启动设置。</description></item><item><title>事务管理与锁机制</title><link>https://blog.cmdragon.cn/posts/6881aed7e5aa53915d50985da8f2fcda/</link><pubDate>Sat, 14 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6881aed7e5aa53915d50985da8f2fcda/</guid><description>在数据库系统中，事务管理至关重要，它确保多个数据库操作能够作为一个单一的逻辑单元来执行，从而维护数据的一致性和完整性。一个良好的事务管理系统能够解决并发操作带来的问题，如脏读、不可重复读和幻读。此外，通过使用锁机制，数据库可以控制对数据的并发访问，确保数据在被多个用户操作时的安全性和一致性。</description></item><item><title>数据库的基本操作</title><link>https://blog.cmdragon.cn/posts/52871e67360d4f6882d13086749f02dc/</link><pubDate>Mon, 09 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/52871e67360d4f6882d13086749f02dc/</guid><description>数据库的基本操作是使用数据库管理系统（DBMS）执行数据存储和检索的核心行为。通过对数据库的创建、删除、查询、更新和删除等基本操作，用户能有效地管理和利用数据资源。本节将详细介绍这些基本操作的语法和实践，帮助读者建立起对数据库操作的初步理解。</description></item></channel></rss>