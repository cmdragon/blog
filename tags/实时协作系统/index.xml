<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>实时协作系统 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%AE%9E%E6%97%B6%E5%8D%8F%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 实时协作系统 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 10 Jul 2025 14:59:43 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%AE%9E%E6%97%B6%E5%8D%8F%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>如何用WebSocket打造毫秒级实时协作系统？</title><link>https://blog.cmdragon.cn/posts/da5b64cb0ded23e4d5b1f19ffd5ac53d/</link><pubDate>Thu, 10 Jul 2025 14:59:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/da5b64cb0ded23e4d5b1f19ffd5ac53d/</guid><description>实时协作系统实现多用户同时操作同一文档或白板，并实时同步变更。核心需求包括毫秒级延迟、操作一致性、冲突处理和状态恢复。后端使用WebSocket协议，维护活动连接池，通过Pydantic模型验证操作格式，采用广播模式实现同步。前端使用Vue.js连接WebSocket，处理用户输入并应用远程操作。冲突解决采用操作转换算法，确保最终一致性。部署方案包括Nginx反向代理和Redis集群，压力测试通过websocket-client工具进行。</description></item></channel></rss>