<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>查询复杂度 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%9F%A5%E8%AF%A2%E5%A4%8D%E6%9D%82%E5%BA%A6/</link><description>Recent content in 查询复杂度 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 21 Jul 2025 08:30:34 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%9F%A5%E8%AF%A2%E5%A4%8D%E6%9D%82%E5%BA%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中整合GraphQL的复杂度与限流？</title><link>https://blog.cmdragon.cn/posts/ace8bb3f01589994f51d748ab5c73652/</link><pubDate>Mon, 21 Jul 2025 08:30:34 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ace8bb3f01589994f51d748ab5c73652/</guid><description>GraphQL 在 FastAPI 中的集成提升了数据获取效率，但复杂查询可能引发性能问题。通过复杂度分析机制，如计算查询深度和字段数量，可有效控制查询复杂度。限流策略基于令牌桶算法，结合中间件实现，防止系统过载。整合复杂度与限流系统，在路由级别实现双重防护，确保 API 稳定性。常见报错如 HTTP 422 可通过检查请求体规范和使用调试模式解决。依赖库包括 FastAPI、Pydantic、Graphene 和 Slowapi。</description></item></channel></rss>