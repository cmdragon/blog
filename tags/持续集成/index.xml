<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>持续集成 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</link><description>Recent content in 持续集成 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 16 Sep 2025 01:32:40 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI的CI流水线怎么自动测端点，还能让Allure报告美到犯规？</title><link>https://blog.cmdragon.cn/posts/eed6cd8985d9be0a4b092a7da38b3e0c/</link><pubDate>Tue, 16 Sep 2025 01:32:40 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/eed6cd8985d9be0a4b092a7da38b3e0c/</guid><description>持续集成（CI）是一种软件开发实践，开发人员频繁提交代码，CI工具自动触发构建和测试流程，以尽早发现错误。FastAPI项目通过CI保证类型安全、避免端点失效和一致性验证。GitHub Actions是常用的CI工具，通过Workflow、Job和Step定义CI流程。FastAPI的CI流水线包括代码拉取、Python环境设置、依赖安装、测试和Docker镜像构建。Allure测试报告框架生成可视化报告，支持结构化展示和跨平台兼容，与FastAPI的Pytest测试结合，通过Allure装饰器标记测试用例，生成并查看报告。</description></item><item><title>如何用GitHub Actions为FastAPI项目打造自动化测试流水线？</title><link>https://blog.cmdragon.cn/posts/6157d87338ce894d18c013c3c4777abb/</link><pubDate>Mon, 15 Sep 2025 05:16:10 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6157d87338ce894d18c013c3c4777abb/</guid><description>持续集成（CI）是一种自动化开发实践，通过自动运行测试和代码检查来验证代码变更的正确性。GitHub Actions 是 GitHub 的自动化工具，用于实现 CI/CD 流程，核心概念包括工作流、事件、作业、步骤和动作。FastAPI 项目通过标准化的项目结构和 pytest 测试用例，结合 GitHub Actions 搭建自动化测试流水线，确保代码质量和兼容性。流水线通过 Push 或 PR 触发，自动安装依赖、运行测试和检查代码风格，帮助开发者提前发现问题，提升开发效率。</description></item><item><title>如何用Git Hook和CI流水线为FastAPI项目保驾护航？</title><link>https://blog.cmdragon.cn/posts/fc4ef84559e04693a620d0714cb30787/</link><pubDate>Sun, 14 Sep 2025 00:12:42 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/fc4ef84559e04693a620d0714cb30787/</guid><description>持续集成（CI）在FastAPI项目中通过频繁合并代码和自动验证，确保代码变更不会破坏接口功能、模型验证或代码风格。Git Hook作为本地代码质量的第一道防线，通过pre-commit钩子在提交前拦截无效代码。GitHub Actions用于构建CI流水线，自动化测试和构建Docker镜像。两者结合，本地快速反馈，全局统一验证，最大化保障代码质量。</description></item><item><title>FastAPI如何用契约测试确保API的「菜单」与「菜品」一致？</title><link>https://blog.cmdragon.cn/posts/02b0c96842d1481c72dab63a149ce0dd/</link><pubDate>Sat, 13 Sep 2025 02:46:54 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/02b0c96842d1481c72dab63a149ce0dd/</guid><description>契约测试是验证API提供者与消费者交互一致性的方法，核心在于定义API请求格式、响应结构等规则的「契约」。FastAPI通过类型注解、Pydantic模型和路径操作自动生成OpenAPI规范，作为契约源，确保代码与文档一致。Schemathesis工具加载OpenAPI规范，生成测试用例验证API行为。实践步骤包括编写API代码、契约测试代码，运行测试并集成CI流程，确保每次提交自动验证契约一致性，减少协作成本，提前发现问题，明确责任边界。</description></item><item><title>如何让FastAPI测试不再成为你的噩梦？</title><link>https://blog.cmdragon.cn/posts/29858a7a10d20b4e4649cb75fb422eab/</link><pubDate>Sun, 31 Aug 2025 06:09:47 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/29858a7a10d20b4e4649cb75fb422eab/</guid><description>本文介绍了如何配置测试环境并搭建基础框架，包括安装依赖包、设计项目结构和实现基础框架。通过FastAPI和pytest的集成，详细展示了如何编写和运行测试用例，特别是异步测试和测试覆盖率优化策略。此外，还提供了常见报错的解决方案和高级测试策略，如数据库事务测试和持续集成配置。这些步骤和方法确保了测试的全面性和可靠性，提升了代码质量。</description></item><item><title>Vue 3与ESLint、Prettier：构建规范化的前端开发环境</title><link>https://blog.cmdragon.cn/posts/4b2411a2957afd41b70bb48b0668275d/</link><pubDate>Tue, 11 Jun 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4b2411a2957afd41b70bb48b0668275d/</guid><description>这篇文章介绍了如何在Vue 3项目中配置ESLint和Prettier以统一代码风格，实现代码规范性与可读性的提升。通过设置规则、解决冲突、以及将配置融入持续集成流程和代码审查过程，确保团队协作时代码风格的一致性，提升开发效率与项目维护性。</description></item></channel></rss>