<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>实时通信 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1/</link><description>Recent content in 实时通信 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 07 Jul 2025 18:10:59 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中玩转WebSocket消息处理？</title><link>https://blog.cmdragon.cn/posts/fbf7d6843e430133547057254deb2dfb/</link><pubDate>Mon, 07 Jul 2025 18:10:59 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/fbf7d6843e430133547057254deb2dfb/</guid><description>FastAPI 提供了强大的 WebSocket 支持，适用于多种实时通信场景。通过 &lt;code&gt;WebSocket&lt;/code&gt; 类，可以实现文本消息的接收与发送，支持实时聊天、协同编辑等应用。对于二进制数据传输，使用 &lt;code&gt;receive_bytes()&lt;/code&gt; 和 &lt;code&gt;send_bytes()&lt;/code&gt; 方法，适合处理图片、音频等文件。JSON 消息可通过 Pydantic 模型自动解析和验证，确保数据结构正确。此外，通过 &lt;code&gt;asyncio.wait_for&lt;/code&gt; 实现超时控制，定期发送心跳包维持连接。WebSocket 支持多种消息类型，结合异常处理机制，确保通信的稳定性和可靠性。</description></item><item><title>如何在FastAPI中玩转WebSocket，让实时通信不再烦恼？</title><link>https://blog.cmdragon.cn/posts/0faebb0f6c2b1bde4ba75869f4f67b76/</link><pubDate>Sun, 06 Jul 2025 20:11:20 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0faebb0f6c2b1bde4ba75869f4f67b76/</guid><description>FastAPI 的 WebSocket 路由通过 &lt;code&gt;@app.websocket&lt;/code&gt; 装饰器声明，支持路径参数和查询参数验证。连接建立时需显式调用 &lt;code&gt;websocket.accept()&lt;/code&gt;，并通过 &lt;code&gt;receive_text()&lt;/code&gt; 和 &lt;code&gt;send_text()&lt;/code&gt; 实现双向通信。握手验证可自定义，失败时返回 403 状态码并关闭连接。连接状态可通过字典维护，心跳检测机制确保连接活跃。常见错误包括 403 握手失败、1006 非正常断开和数据类型错误，需通过正确关闭连接和数据类型处理解决。</description></item><item><title>WebSocket与HTTP协议究竟有何不同？FastAPI如何让长连接变得如此简单？</title><link>https://blog.cmdragon.cn/posts/903448c85701a6a747fc9a4417e2bdc8/</link><pubDate>Sat, 05 Jul 2025 17:08:37 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/903448c85701a6a747fc9a4417e2bdc8/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/7989a41781759816107c155a4591fc73.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/&gt;
&lt;img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/&gt;
&lt;p&gt;扫描&lt;a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg"&gt;二维码&lt;/a&gt;
关注或者微信搜一搜：&lt;code&gt;编程智域 前端至全栈交流与成长&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat"&gt;发现1000+提升效率与开发的AI工具和实用程序&lt;/a&gt;：https://tools.cmdragon.cn/&lt;/p&gt;
&lt;h1 id="第一章websocket协议基础与fastapi定位"&gt;第一章：WebSocket协议基础与FastAPI定位&lt;/h1&gt;
&lt;h2 id="11-websocket与http协议核心差异"&gt;1.1 WebSocket与HTTP协议核心差异&lt;/h2&gt;
&lt;p&gt;通过对比传统HTTP协议与WebSocket协议的核心特性，我们可以从以下维度理解二者的差异：&lt;/p&gt;</description></item></channel></rss>