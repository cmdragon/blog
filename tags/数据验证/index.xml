<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据验证 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</link><description>Recent content in 数据验证 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 26 Sep 2025 07:52:14 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/index.xml" rel="self" type="application/rss+xml"/><item><title>Pydantic模型验证测试：你的API数据真的安全吗？</title><link>https://blog.cmdragon.cn/posts/03b2afdf35f55dbaef631710ab6da82c/</link><pubDate>Wed, 03 Sep 2025 23:46:18 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/03b2afdf35f55dbaef631710ab6da82c/</guid><description>Pydantic在FastAPI中用于数据验证和序列化，通过Python类型注解自动解析请求体并执行验证规则，确保代码简洁安全。验证测试至关重要，可防止无效数据进入业务逻辑层，避免安全漏洞和API错误。测试环境需使用最新库版本，模型定义包括邮箱、密码和年龄的验证规则。测试脚本涵盖有效数据、边界条件和错误场景的验证。与FastAPI集成测试确保API端点验证正确。最佳实践包括覆盖所有字段、测试边界值和验证错误消息的明确性。</description></item><item><title>SQLAlchemy ORM与GraphQL的完美邂逅，如何让数据库操作变得如此简单？</title><link>https://blog.cmdragon.cn/posts/9c8eddb46c54a20aae8fa1f51955a7b0/</link><pubDate>Tue, 22 Jul 2025 10:18:46 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9c8eddb46c54a20aae8fa1f51955a7b0/</guid><description>SQLAlchemy ORM通过Python类与数据库表映射，实现面向对象操作数据库，典型模型包括User和Post类。FastAPI集成通过依赖注入管理数据库会话，提供GET和POST接口。GraphQL使用Strawberry定义Schema，实现类型映射和数据验证。整合应用时，通过服务层解耦GraphQL Resolver与数据库操作。常见报错包括数据验证错误和数据库连接问题，需检查请求体和配置。优化策略包括使用JOIN加载策略和实现查询深度限制。</description></item><item><title>WebSocket与HTTP协议究竟有何不同？FastAPI如何让长连接变得如此简单？</title><link>https://blog.cmdragon.cn/posts/903448c85701a6a747fc9a4417e2bdc8/</link><pubDate>Sat, 05 Jul 2025 17:08:37 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/903448c85701a6a747fc9a4417e2bdc8/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/7989a41781759816107c155a4591fc73.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/&gt;
&lt;img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/&gt;
&lt;p&gt;扫描&lt;a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg"&gt;二维码&lt;/a&gt;
关注或者微信搜一搜：&lt;code&gt;编程智域 前端至全栈交流与成长&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat"&gt;发现1000+提升效率与开发的AI工具和实用程序&lt;/a&gt;：https://tools.cmdragon.cn/&lt;/p&gt;
&lt;h1 id="第一章websocket协议基础与fastapi定位"&gt;第一章：WebSocket协议基础与FastAPI定位&lt;/h1&gt;
&lt;h2 id="11-websocket与http协议核心差异"&gt;1.1 WebSocket与HTTP协议核心差异&lt;/h2&gt;
&lt;p&gt;通过对比传统HTTP协议与WebSocket协议的核心特性，我们可以从以下维度理解二者的差异：&lt;/p&gt;</description></item><item><title>使用Tortoise-ORM和FastAPI构建评论系统</title><link>https://blog.cmdragon.cn/posts/97d9c275881a38c29b26f565d83be9d3/</link><pubDate>Fri, 25 Apr 2025 21:37:36 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/97d9c275881a38c29b26f565d83be9d3/</guid><description>在models.py中定义了Comment模型，包含id、content、created_at、updated_at字段，并与User和Article模型建立外键关系。schemas.py中定义了CommentBase、CommentCreate、CommentUpdate和CommentResponse等Pydantic模型，用于数据验证和响应。路由层实现了创建、获取和删除评论的API，使用get_or_none处理不存在的评论，并捕获异常。测试接口通过requests进行创建和异常测试。常见报错包括外键约束失败、验证错误和事件循环未关闭，需检查外键值、请求体匹配和正确关闭事件循环。</description></item><item><title>分层架构在博客评论功能中的应用与实现</title><link>https://blog.cmdragon.cn/posts/45bda70cffd2384b83a2df842b61b93a/</link><pubDate>Thu, 24 Apr 2025 12:45:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/45bda70cffd2384b83a2df842b61b93a/</guid><description>分层架构在Web应用开发中提升代码可维护性和扩展性，博客评论功能采用四层结构设计：路由层处理HTTP请求与响应，服务层封装业务逻辑，模型层定义数据结构和数据库操作，Schema层负责数据验证与序列化。这种结构实现职责分离、易于测试、代码复用和扩展灵活。模型层通过&lt;code&gt;prefetch_related&lt;/code&gt;预加载关联数据，Schema层使用继承结构减少重复定义，服务层封装业务逻辑并处理异常，路由层通过路径参数和依赖注入实现接口。项目结构清晰，运行环境配置简单，常见报错处理方案完善。</description></item><item><title>FastAPI中实现动态条件必填字段的实践</title><link>https://blog.cmdragon.cn/posts/93a6982db6ac68a0d9c55169460eda68/</link><pubDate>Thu, 03 Apr 2025 00:06:20 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/93a6982db6ac68a0d9c55169460eda68/</guid><description>在 FastAPI 中，使用 Pydantic 模型实现动态条件必填字段时，需结合 &lt;code&gt;Field&lt;/code&gt; 的 &lt;code&gt;depends&lt;/code&gt; 参数、&lt;code&gt;@model_validator(mode='before')&lt;/code&gt; 装饰器和条件判断逻辑。例如，用户注册接口根据 &lt;code&gt;register_type&lt;/code&gt; 动态决定 &lt;code&gt;email&lt;/code&gt; 或 &lt;code&gt;mobile&lt;/code&gt; 字段是否必填，并在 &lt;code&gt;accept_promotion=True&lt;/code&gt; 时要求至少填写一种联系方式。通过 &lt;code&gt;@model_validator&lt;/code&gt; 在类型转换前验证字段值，确保数据符合条件。测试用例和常见报错解决方案帮助调试和优化验证逻辑。</description></item><item><title>FastAPI中的Pydantic密码验证机制与实现</title><link>https://blog.cmdragon.cn/posts/a72a86da313f399c29b36ec08f75361d/</link><pubDate>Mon, 31 Mar 2025 00:04:51 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/a72a86da313f399c29b36ec08f75361d/</guid><description>FastAPI 中通过 Pydantic 模型实现密码验证，采用分层机制确保高效与灵活扩展。验证流程包括基础类型检查、长度验证、复杂度验证和泄露检测，任一阶段失败即终止后续验证。通过 &lt;code&gt;SecretStr&lt;/code&gt; 安全获取密码明文，结合正则表达式验证密码复杂度，并利用哈希函数检测密码是否泄露。模块化设计便于后续添加更多安全规则，如密码过期策略和历史密码比对。</description></item><item><title>深入理解检查约束：确保数据质量的重要工具</title><link>https://blog.cmdragon.cn/posts/309f74bd85c733fb7a2cd79990d7af9b/</link><pubDate>Mon, 20 Jan 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/309f74bd85c733fb7a2cd79990d7af9b/</guid><description>在数据库管理中，检查约束是一种重要的约束类型，用于确保表中某一列或某些列的数据符合特定条件，从而维护数据的有效性和一致性。检查约束通过对数据的有效性进行验证，防止无效或不合逻辑的数据进入数据库。</description></item><item><title>深入了解HMAC加密技术：原理、应用与实践</title><link>https://blog.cmdragon.cn/posts/2778e05282193f6f54f058c4f706e715/</link><pubDate>Tue, 30 Jan 2024 16:49:00 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2778e05282193f6f54f058c4f706e715/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_02_03 18_28_56.png" title="2024_02_03 18_28_56.png" alt="2024_02_03 18_28_56.png"/&gt;
&lt;h2 id="一引言"&gt;一、引言&lt;/h2&gt;
&lt;p&gt;在网络安全领域，消息认证码（MAC）是一种重要的技术手段。Hash-based Message Authentication Code（HMAC）作为其中的一种，凭借其简单、高效、安全的特性，广泛应用于各种网络通信场景。本文将详细介绍HMAC的原理、应用与实践，帮助读者深入了解这一技术。&lt;/p&gt;</description></item></channel></rss>