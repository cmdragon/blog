<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQLAlchemy on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/SQLAlchemy/</link><description>Recent content in SQLAlchemy on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 26 Sep 2025 07:52:14 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/SQLAlchemy/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中玩转“时光倒流”的数据库事务回滚测试？</title><link>https://blog.cmdragon.cn/posts/bf9883a75ffa46b523a03b16ec56ce48/</link><pubDate>Tue, 09 Sep 2025 04:07:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bf9883a75ffa46b523a03b16ec56ce48/</guid><description>在 FastAPI 项目中，集成测试通过事务回滚机制确保测试环境的干净性。使用 &lt;code&gt;pytest&lt;/code&gt;、&lt;code&gt;SQLAlchemy&lt;/code&gt; 和 &lt;code&gt;FastAPI TestClient&lt;/code&gt; 组合，实现数据库事务的嵌套控制，测试中的所有数据库操作在用例结束时自动回滚。通过 &lt;code&gt;begin_nested()&lt;/code&gt; 创建保存点，确保每个测试用例在独立的事务中执行，避免数据污染。测试案例模拟用户注册和资料修改，验证数据库写入和接口请求的正确性。常见问题如 &lt;code&gt;IntegrityError&lt;/code&gt; 和连接未释放，通过检查事务回滚机制和显式关闭连接解决。</description></item><item><title>为什么你的FastAPI测试覆盖率总是低得让人想哭？</title><link>https://blog.cmdragon.cn/posts/985c18ca802f1b6da828b92e082b4d4e/</link><pubDate>Mon, 01 Sep 2025 03:56:38 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/985c18ca802f1b6da828b92e082b4d4e/</guid><description>FastAPI 开发中，测试环境和基础框架的搭建至关重要。使用 &lt;code&gt;pipenv&lt;/code&gt; 或 &lt;code&gt;poetry&lt;/code&gt; 管理虚拟环境和依赖，项目结构包括应用入口、API 路由、数据模型、数据库连接和配置文件。核心框架代码涉及 SQLAlchemy 配置、Pydantic 配置管理和 FastAPI 入口。测试覆盖率检测工具配置包括 &lt;code&gt;pytest&lt;/code&gt;、&lt;code&gt;coverage.py&lt;/code&gt; 和 &lt;code&gt;pytest-cov&lt;/code&gt;，编写测试用例并生成覆盖率报告。优化策略包括分支覆盖率测试、异步任务覆盖率和目标覆盖率报告，确保代码质量和可维护性。</description></item><item><title>FastAPI测试环境配置的秘诀，你真的掌握了吗？</title><link>https://blog.cmdragon.cn/posts/6f9e71e8313db6de8c1431877a70b67e/</link><pubDate>Sat, 30 Aug 2025 02:32:06 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6f9e71e8313db6de8c1431877a70b67e/</guid><description>&lt;img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/&gt;
&lt;p&gt;扫描&lt;a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg"&gt;二维码&lt;/a&gt;
关注或者微信搜一搜：&lt;code&gt;编程智域 前端至全栈交流与成长&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat"&gt;发现1000+提升效率与开发的AI工具和实用程序&lt;/a&gt;：https://tools.cmdragon.cn/&lt;/p&gt;
&lt;h2 id="1-fastapi-测试环境配置与基础框架搭建"&gt;1. FastAPI 测试环境配置与基础框架搭建&lt;/h2&gt;
&lt;h3 id="11-测试环境配置要点"&gt;1.1 测试环境配置要点&lt;/h3&gt;
&lt;p&gt;在 FastAPI 项目中配置测试环境需关注：&lt;/p&gt;</description></item><item><title>SQLAlchemy ORM与GraphQL的完美邂逅，如何让数据库操作变得如此简单？</title><link>https://blog.cmdragon.cn/posts/9c8eddb46c54a20aae8fa1f51955a7b0/</link><pubDate>Tue, 22 Jul 2025 10:18:46 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9c8eddb46c54a20aae8fa1f51955a7b0/</guid><description>SQLAlchemy ORM通过Python类与数据库表映射，实现面向对象操作数据库，典型模型包括User和Post类。FastAPI集成通过依赖注入管理数据库会话，提供GET和POST接口。GraphQL使用Strawberry定义Schema，实现类型映射和数据验证。整合应用时，通过服务层解耦GraphQL Resolver与数据库操作。常见报错包括数据验证错误和数据库连接问题，需检查请求体和配置。优化策略包括使用JOIN加载策略和实现查询深度限制。</description></item><item><title>FastAPI与Alembic：数据库迁移的隐秘艺术</title><link>https://blog.cmdragon.cn/posts/74f3348d6729c1bfe7cdde6ac5885633/</link><pubDate>Wed, 14 May 2025 00:02:31 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/74f3348d6729c1bfe7cdde6ac5885633/</guid><description>Alembic是SQLAlchemy作者开发的数据库迁移工具，用于管理数据库结构的版本迭代。其核心工作原理包括版本仓库构建、差异检测机制和迁移脚本生成。FastAPI集成Alembic可实现应用逻辑与数据库结构的同步演进。通过配置&lt;code&gt;alembic/env.py&lt;/code&gt;，Alembic能够扫描模型类并与数据库结构进行对比，生成包含差异操作的迁移脚本。典型命令如&lt;code&gt;alembic revision --autogenerate -m &amp;quot;add user table&amp;quot;&lt;/code&gt;。迁移脚本包含&lt;code&gt;upgrade&lt;/code&gt;和&lt;code&gt;downgrade&lt;/code&gt;方法，分别用于升级和回滚操作。Alembic通过对象关系映射对比实现智能生成，确保数据库结构的准确变更。</description></item><item><title>Alembic迁移脚本冲突的智能检测与优雅合并之道</title><link>https://blog.cmdragon.cn/posts/772c8e0f0cc3c705c267676035da7aa9/</link><pubDate>Mon, 12 May 2025 13:10:27 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/772c8e0f0cc3c705c267676035da7aa9/</guid><description>Alembic迁移脚本冲突检测与合并方案主要解决团队协作中的迁移脚本冲突问题。冲突场景包括并行开发、分支合并和环境差异。通过自动化检测脚本&lt;code&gt;check_migration_conflicts.py&lt;/code&gt;可识别多个头版本。手动合并流程包括确定基准版本、创建合并分支和编辑迁移文件。合并后通过测试用例验证迁移的兼容性，确保升级和回滚的一致性。常见报错如“Multiple head revisions”和“Failed to alter column”提供了具体的解决方案，确保迁移过程顺利进行。</description></item><item><title>数据库事务回滚：FastAPI中的存档与读档大法</title><link>https://blog.cmdragon.cn/posts/61f400974ef7e1af22b578822f89237c/</link><pubDate>Sat, 10 May 2025 00:18:52 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/61f400974ef7e1af22b578822f89237c/</guid><description>事务回滚机制确保数据库操作的原子性，适用于需要保持数据一致性的场景，如银行转账。FastAPI通过SQLAlchemy的session管理实现事务控制，使用上下文管理器处理事务，确保在异常时回滚。Alembic用于数据库版本控制，生成迁移脚本并管理多环境迁移策略。综合应用案例展示了用户注册时的事务处理，包括检查用户名唯一性、创建用户及其关联记录，并在异常时回滚。课后Quiz和常见报错解决提供了实际操作中的指导和问题处理方法。</description></item><item><title>Alembic迁移脚本：让数据库变身时间旅行者</title><link>https://blog.cmdragon.cn/posts/4cbe05929a9b90555dc214eec17131c7/</link><pubDate>Fri, 09 May 2025 13:08:18 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4cbe05929a9b90555dc214eec17131c7/</guid><description>Alembic 是一个用于数据库迁移的工具，通过迁移脚本记录数据库结构的变化，确保不同环境的数据库保持同步。其核心工作原理包括模型扫描、数据库快照和差异分析三个阶段。通过 &lt;code&gt;alembic revision --autogenerate&lt;/code&gt; 命令，可以自动生成迁移脚本，对比模型定义与数据库实际结构的差异。高级配置技巧包括自定义上下文配置和处理复杂字段变更。常见错误如数据库版本不一致或字段类型不识别，可通过升级、回滚或添加类型映射解决。最佳实践建议包括及时生成迁移脚本、测试环境保持最新、生产环境变更前备份等。</description></item><item><title>FastAPI数据库集成与事务管理</title><link>https://blog.cmdragon.cn/posts/0df867e01706fcb9c2e16ea07671a9e4/</link><pubDate>Fri, 18 Apr 2025 00:15:34 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0df867e01706fcb9c2e16ea07671a9e4/</guid><description>FastAPI与SQLAlchemy集成指南：首先配置SQLite数据库连接，创建会话工厂和声明性基类。定义用户模型并映射表结构，使用Pydantic进行数据验证。通过依赖项获取数据库会话，实现用户创建和转账功能。事务控制通过显式开始事务和错误处理确保数据一致性。常见问题包括422验证错误、500服务器错误和完整性错误，需检查请求体、数据库连接和约束。课后Quiz解答事务回滚、SQL注入防护和并发写操作处理。</description></item><item><title>FastAPI与SQLAlchemy数据库集成</title><link>https://blog.cmdragon.cn/posts/c89a99dade2879f73464405270096546/</link><pubDate>Thu, 17 Apr 2025 15:33:34 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c89a99dade2879f73464405270096546/</guid><description>FastAPI与SQLAlchemy的集成通过创建虚拟环境、安装依赖、配置数据库连接、定义数据模型和实现路由来完成。核心模块包括数据库引擎、会话工厂和声明性基类。数据模型通过SQLAlchemy定义，路由通过FastAPI实现，支持创建和查询用户。测试接口通过curl命令进行，常见报错包括表不存在、请求体验证错误和会话不可用。高级配置涉及连接池优化和单元测试。</description></item><item><title>FastAPI与SQLAlchemy数据库集成与CRUD操作</title><link>https://blog.cmdragon.cn/posts/6cfb51390a424ffa1e7d9ceff121fd11/</link><pubDate>Wed, 16 Apr 2025 09:50:57 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6cfb51390a424ffa1e7d9ceff121fd11/</guid><description>FastAPI与SQLAlchemy集成基础包括环境准备、数据库连接配置和模型定义。CRUD操作通过数据访问层封装和路由层实现，确保线程安全和事务管理。常见错误如422请求验证错误通过Pydantic模型和中间件处理。Session生命周期管理依赖注入系统保证每个请求独立会话。常见报错如数据库连接失败和事务回滚通过检查服务状态、验证连接参数和异常处理解决。</description></item><item><title>FastAPI与SQLAlchemy同步数据库集成</title><link>https://blog.cmdragon.cn/posts/b3bb21bb0bd4c0c405cde6e4f370652c/</link><pubDate>Tue, 15 Apr 2025 01:27:37 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b3bb21bb0bd4c0c405cde6e4f370652c/</guid><description>FastAPI与SQLAlchemy集成通过ORM框架实现Python类与数据库表的双向转换。SQLAlchemy提供Core层和ORM层，FastAPI选择ORM层以符合Pythonic风格。声明式模型通过&lt;code&gt;declarative_base()&lt;/code&gt;创建基类，定义数据库结构。数据库引擎通过连接字符串配置，会话管理机制确保操作生命周期。完整示例展示了用户管理API的实现，包括创建和查询接口。常见问题涉及会话报错和数据验证错误，解决方案包括检查表结构和验证请求格式。高级配置技巧包括复合索引优化和事务管理。</description></item><item><title>SQLAlchemy 核心概念与同步引擎配置详解</title><link>https://blog.cmdragon.cn/posts/de9dea9606a04d21ae60cbc315397580/</link><pubDate>Mon, 14 Apr 2025 00:28:46 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/de9dea9606a04d21ae60cbc315397580/</guid><description>SQLAlchemy 的核心概念包括 ORM、Engine、Connection 和 Session。ORM 将数据库表映射为 Python 类，行记录转为对象实例。Engine 管理数据库连接池，Connection 是具体连接，Session 跟踪对象状态变化。同步引擎配置涉及安装依赖、创建引擎、定义模型类及与 FastAPI 集成。连接池通过 pool_size、max_overflow 和 pool_recycle 管理连接。Session 生命周期需正确管理，避免连接泄漏和数据不一致。常见错误包括表不存在、连接池溢出和验证错误，需通过建表、调整连接池配置和请求模型验证解决。</description></item><item><title>FastAPI中的依赖注入与数据库事务管理</title><link>https://blog.cmdragon.cn/posts/edd7eaa71626c5d5d95f7a07c538cfe1/</link><pubDate>Wed, 09 Apr 2025 00:10:29 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/edd7eaa71626c5d5d95f7a07c538cfe1/</guid><description>文章介绍了在FastAPI中使用依赖注入和SQLAlchemy进行数据库会话封装的方法，提供了三种事务管理模式的实现：自动事务模式、手动控制模式和装饰器模式。通过代码示例展示了如何创建用户注册功能，并处理事务和错误。强调了使用参数化查询防止SQL注入攻击的重要性，并提供了常见报错的解决方案，包括检查数据库连接参数、管理会话生命周期和调整连接池设置。</description></item></channel></rss>