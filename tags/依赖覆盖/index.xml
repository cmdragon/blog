<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>依赖覆盖 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E4%BE%9D%E8%B5%96%E8%A6%86%E7%9B%96/</link><description>Recent content in 依赖覆盖 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 07 Sep 2025 06:55:32 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E4%BE%9D%E8%B5%96%E8%A6%86%E7%9B%96/index.xml" rel="self" type="application/rss+xml"/><item><title>多环境配置切换机制能否让开发与生产无缝衔接？</title><link>https://blog.cmdragon.cn/posts/533874f5700b8506d4c68781597db659/</link><pubDate>Sun, 07 Sep 2025 06:55:32 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/533874f5700b8506d4c68781597db659/</guid><description>依赖注入（Dependency Injection）是一种设计模式，通过外部提供组件所需的依赖，避免组件自行创建或管理依赖。FastAPI 的依赖注入系统基于 Python 的类型提示和 &lt;code&gt;Depends&lt;/code&gt; 函数，支持在测试或特殊场景中替换默认依赖。通过 &lt;code&gt;dependency_overrides&lt;/code&gt; 字典，可以临时覆盖依赖函数，确保函数签名一致。多环境配置中，使用 Pydantic 的 &lt;code&gt;BaseSettings&lt;/code&gt; 从环境变量或 &lt;code&gt;.env&lt;/code&gt; 文件加载配置，支持类型验证和默认值，避免手动解析。</description></item><item><title>FastAPI依赖覆盖与测试环境模拟</title><link>https://blog.cmdragon.cn/posts/8a2bd816fabac0bc10bd2cf8494e4631/</link><pubDate>Thu, 10 Apr 2025 00:58:09 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8a2bd816fabac0bc10bd2cf8494e4631/</guid><description>FastAPI的依赖覆盖机制通过重写依赖项实现运行环境切换，适用于隔离测试和模拟特定场景。依赖项存储在&lt;code&gt;dependency_overrides&lt;/code&gt;字典中，优先检查覆盖字典，使用&lt;code&gt;@app.dependency_overrides&lt;/code&gt;装饰器进行临时替换，测试完成后自动恢复。通过pytest搭建测试环境，覆盖数据库依赖，使用&lt;code&gt;TestClient&lt;/code&gt;进行测试。多场景模拟测试案例包括用户权限验证和第三方API模拟，分层测试策略涵盖单元测试、集成测试和E2E测试。最佳实践包括使用pytest参数化进行多场景测试，确保测试覆盖率统计包含依赖注入代码。常见报错如&lt;code&gt;DependencyOverrideNotFound&lt;/code&gt;和&lt;code&gt;TestClient响应验证失败&lt;/code&gt;，可通过检查依赖项定义、模拟数据格式和类型注解解决。</description></item></channel></rss>