<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异常处理 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><description>Recent content in 异常处理 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 07 Aug 2025 23:55:48 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI的BackgroundTasks如何玩转生产者-消费者模式？</title><link>https://blog.cmdragon.cn/posts/1549a6bd7e47e7006e7ba8f52bcfe8eb/</link><pubDate>Thu, 07 Aug 2025 23:55:48 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1549a6bd7e47e7006e7ba8f52bcfe8eb/</guid><description>FastAPI 的 BackgroundTasks 基于 Starlette 实现，采用同步执行机制，确保任务执行与响应返回的时序性。当系统面临单节点处理瓶颈或需要任务顺序性时，可升级为生产者-消费者模式，使用 Redis/RabbitMQ 作为消息队列。通过 Celery 实现分布式任务处理，生产者将任务存入队列，消费者读取并处理任务，结果持久化存储。异常处理包括任务确认机制、死信队列和任务状态追踪，确保系统稳定性和任务可靠性。</description></item><item><title>如何在 FastAPI 中优雅处理后台任务异常并实现智能重试？</title><link>https://blog.cmdragon.cn/posts/d5c1d2efbaf6fe4c9e13acc6be6d929a/</link><pubDate>Tue, 05 Aug 2025 03:53:28 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d5c1d2efbaf6fe4c9e13acc6be6d929a/</guid><description>FastAPI 的 BackgroundTasks 是一种轻量级异步任务处理方案，基于 Starlette 的异步执行机制，适用于短期任务。文章深入探讨了其核心原理、异常处理和任务重试机制。通过自定义异常处理器和任务级错误捕获，可以有效处理后台任务中的异常。结合装饰器和 tenacity 库，实现了指数退避重试和异步重试策略。最后，文章通过一个支付回调通知系统的案例，展示了如何综合应用这些技术，确保任务的可靠执行。</description></item><item><title>如何让FastAPI后台任务像多米诺骨牌一样井然有序地执行？</title><link>https://blog.cmdragon.cn/posts/7693d3430a6256c2abefc1e4aba21a4a/</link><pubDate>Sun, 03 Aug 2025 11:12:44 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/7693d3430a6256c2abefc1e4aba21a4a/</guid><description>FastAPI的BackgroundTasks功能支持在响应返回后执行异步操作，适用于邮件发送、日志记录等场景。任务依赖管理包括顺序依赖和数据依赖，通过任务注册顺序和参数传递实现。高级任务管理器类可解析复杂依赖关系。异常处理机制通过错误隔离和重试策略确保任务稳定性。</description></item><item><title>你的密码存储方式是否在向黑客招手？</title><link>https://blog.cmdragon.cn/posts/5f8821250c5a4e9cc08bd08faef76c77/</link><pubDate>Mon, 09 Jun 2025 16:40:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5f8821250c5a4e9cc08bd08faef76c77/</guid><description>现代Web应用中，密码安全的核心在于验证用户身份的同时不存储原始密码。早期方案如明文存储、简单加密和弱哈希算法（如MD5）存在重大风险，易被破解。现代密码哈希技术通过增加计算耗时、使用随机盐值和抗GPU算法（如bcrypt、scrypt、Argon2）来增强安全性。Bcrypt实现方案包括生成唯一盐值和哈希密码，验证时通过对比哈希值确认密码正确性。安全增强策略包括密码复杂度验证和登录频率限制。常见问题如密码验证不一致和版本兼容性错误，需通过URL编码和指定版本解决。测试方案确保密码哈希的唯一性和正确性。</description></item><item><title>解锁FastAPI与MongoDB聚合管道的性能奥秘</title><link>https://blog.cmdragon.cn/posts/4758340c2a266ca0e12a35ca53dd0d19/</link><pubDate>Tue, 20 May 2025 20:24:47 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4758340c2a266ca0e12a35ca53dd0d19/</guid><description>MongoDB聚合管道是一种分阶段处理数据的流水线，通过$match、$group等阶段对文档进行特定操作，具有内存优化和原生操作的优势。聚合查询常用阶段包括$match、$group、$project等，适用于订单分析等场景。优化策略包括遵循ESR原则创建索引、使用$facet实现高效分页。常见错误如内存限制和游标配置问题，可通过添加&lt;code>allowDiskUse=True&lt;/code>和正确处理游标解决。进阶技巧包括使用$expr实现复杂逻辑、日期处理和条件投影。</description></item><item><title>深入学习和理解Django视图层：处理请求与响应</title><link>https://blog.cmdragon.cn/posts/3476dd0354c04bdd0485e1bbe91ccb1b/</link><pubDate>Sat, 04 May 2024 17:47:55 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/3476dd0354c04bdd0485e1bbe91ccb1b/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_05_04 17_51_09.png" title="2024_05_04 17_51_09.png" alt="2024_05_04 17_51_09.png"/>
## 第一章：Django框架概述
&lt;h3 id="11-什么是django">1.1 什么是Django？&lt;/h3>
&lt;p>Django是一个高级的Python Web框架，它鼓励快速开发和干净、实用的设计。它由Wall Street
Journal的程序员在2005年开发，用于他们的新闻网站。自那时起，Django已经成为全球范围内广泛使用的Web框架之一。&lt;/p></description></item></channel></rss>