<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>限流策略 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5/</link><description>Recent content in 限流策略 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 27 Aug 2025 23:26:45 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在API高并发中玩转资源隔离与限流策略？</title><link>https://blog.cmdragon.cn/posts/4ad4ec1dbd80bcf5670fb397ca7cc68c/</link><pubDate>Wed, 27 Aug 2025 23:26:45 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4ad4ec1dbd80bcf5670fb397ca7cc68c/</guid><description>资源隔离是保障API稳定性的核心，通过路由隔离和依赖隔离实现关键业务与非关键业务的分离，避免资源耗尽。限流策略包括令牌桶算法和滑动窗口算法，控制请求速率以保护系统。FastAPI中通过slowapi库实现限流，支持路由级动态限流和分布式限流。分布式限流基于Redis，确保多实例环境下的全局限流。电商支付系统案例展示了核心接口使用独立数据库连接池，日志查询使用公共资源。熔断策略通过CircuitBreaker模式实现自动熔断，应对连续超时问题。</description></item><item><title>如何在FastAPI中整合GraphQL的复杂度与限流？</title><link>https://blog.cmdragon.cn/posts/ace8bb3f01589994f51d748ab5c73652/</link><pubDate>Mon, 21 Jul 2025 08:30:34 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ace8bb3f01589994f51d748ab5c73652/</guid><description>GraphQL 在 FastAPI 中的集成提升了数据获取效率，但复杂查询可能引发性能问题。通过复杂度分析机制，如计算查询深度和字段数量，可有效控制查询复杂度。限流策略基于令牌桶算法，结合中间件实现，防止系统过载。整合复杂度与限流系统，在路由级别实现双重防护，确保 API 稳定性。常见报错如 HTTP 422 可通过检查请求体规范和使用调试模式解决。依赖库包括 FastAPI、Pydantic、Graphene 和 Slowapi。</description></item></channel></rss>