<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>多版本API on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%A4%9A%E7%89%88%E6%9C%ACAPI/</link><description>Recent content in 多版本API on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 19 Sep 2025 03:01:03 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%A4%9A%E7%89%88%E6%9C%ACAPI/index.xml" rel="self" type="application/rss+xml"/><item><title>给接口加新字段又不搞崩老客户端？FastAPI的多版本API靠哪三招实现？</title><link>https://blog.cmdragon.cn/posts/cc098d8836e787baa8a4d92e4d56d5c5/</link><pubDate>Fri, 19 Sep 2025 03:01:03 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/cc098d8836e787baa8a4d92e4d56d5c5/</guid><description>多版本API的核心在于解决快速迭代中的向后兼容问题，避免老客户端因接口修改而崩溃。FastAPI通过路由隔离机制实现多版本API，利用&lt;code&gt;APIRouter&lt;/code&gt;和&lt;code&gt;prefix&lt;/code&gt;将不同版本的接口逻辑封装为独立模块。具体实现中，通过继承Pydantic模型减少重复代码并保持兼容性。测试策略包括单元测试和兼容性测试，确保各版本接口独立工作且跨版本交互无误。常见报错如422验证错误和路由冲突，可通过检查字段定义和路由前缀解决。</description></item></channel></rss>