<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试最佳实践 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%B5%8B%E8%AF%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><description>Recent content in 测试最佳实践 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 05 Sep 2025 05:57:12 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%B5%8B%E8%AF%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml"/><item><title>为什么你的单元测试需要Mock数据库才能飞起来？</title><link>https://blog.cmdragon.cn/posts/6e69c0eedd8b1e5a74a148d36c85d7ce/</link><pubDate>Fri, 05 Sep 2025 05:57:12 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6e69c0eedd8b1e5a74a148d36c85d7ce/</guid><description>FastAPI 的依赖注入系统通过自动解析和管理组件依赖，提升了代码的可测试性和可维护性。Mock 对象在测试中用于替代真实依赖，如数据库连接，以避免数据污染、提高执行效率并模拟各种响应。FastAPI 的依赖系统通过 &lt;code&gt;Depends()&lt;/code&gt; 声明依赖，支持动态替换，便于测试时使用 Mock 对象。通过 &lt;code&gt;unittest.mock.patch&lt;/code&gt; 和 &lt;code&gt;app.dependency_overrides&lt;/code&gt; 可实现函数和生成器依赖的模拟，结合 Pydantic 模型确保 Mock 数据符合接口契约。分层 Mock 策略和自动化 Fixture 管理进一步优化了测试流程。</description></item></channel></rss>