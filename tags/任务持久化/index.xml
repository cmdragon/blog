<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>任务持久化 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E4%BB%BB%E5%8A%A1%E6%8C%81%E4%B9%85%E5%8C%96/</link><description>Recent content in 任务持久化 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 16 Aug 2025 01:14:26 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E4%BB%BB%E5%8A%A1%E6%8C%81%E4%B9%85%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中玩转APScheduler，实现动态定时任务的魔法？</title><link>https://blog.cmdragon.cn/posts/4fb9e30bb20956319c783e21897a667a/</link><pubDate>Sat, 16 Aug 2025 01:14:26 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4fb9e30bb20956319c783e21897a667a/</guid><description>APScheduler是Python中强大的任务调度库，支持任务持久化、多种触发方式和分布式执行。与FastAPI集成时，通过将Scheduler实例挂载到应用状态中，实现动态任务管理。核心代码展示了如何初始化调度器、创建和删除任务，并模拟API调用。最佳实践包括认证授权、并发控制和任务熔断。常见错误如JobLookupError和MaxInstancesReachedError，可通过任务检查和并发限制解决。</description></item><item><title>FastAPI与Celery的完美邂逅，如何让异步任务飞起来？</title><link>https://blog.cmdragon.cn/posts/b79c2c1805fe9b1ea28326b5b8f3b709/</link><pubDate>Sun, 10 Aug 2025 07:43:41 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b79c2c1805fe9b1ea28326b5b8f3b709/</guid><description>FastAPI框架集成Celery的实战指南，首先需要Python 3.8+环境，并安装FastAPI、Celery、Redis等核心依赖包。配置Celery实例时，需设置Redis作为Broker和Backend。异步任务处理流程包括用户请求通过FastAPI路由进入，Celery任务派发，Worker执行任务并存储结果。接口层实现中，通过FastAPI创建任务和查询任务状态的API。任务处理器使用Celery的&lt;code&gt;@shared_task&lt;/code&gt;装饰器定义异步任务。任务监控通过Flower平台进行，配置Celery以发送任务事件。常见报错包括Worker启动失败、任务执行超时和结果反序列化失败，需检查Redis服务、调整任务超时设置和确保任务返回可序列化对象。</description></item></channel></rss>