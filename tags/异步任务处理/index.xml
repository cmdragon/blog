<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异步任务处理 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/</link><description>Recent content in 异步任务处理 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 07 Aug 2025 07:20:32 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>BackgroundTasks 还是 RabbitMQ？你的异步任务到底该选谁？</title><link>https://blog.cmdragon.cn/posts/d26fdc150ff9dd70c7482381ff4c77c4/</link><pubDate>Thu, 07 Aug 2025 07:20:32 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d26fdc150ff9dd70c7482381ff4c77c4/</guid><description>FastAPI 的 BackgroundTasks 适用于轻量级任务，如日志记录和邮件发送，执行时间通常小于 3 秒。对于耗时任务，如图片处理和数据分析，推荐使用 RabbitMQ 结合 Celery。RabbitMQ 提供了消息持久化、任务重试和高并发处理能力，确保任务不丢失。通过 Pydantic 模型设计任务负载，生产者将任务提交到队列，消费者异步处理任务。综合案例展示了图片水印处理系统的实现，结合 BackgroundTasks 和 RabbitMQ 的优势，提升系统性能和可靠性。</description></item><item><title>BackgroundTasks与Celery：谁才是异步任务的终极赢家？</title><link>https://blog.cmdragon.cn/posts/792cac4ce6eb96b5001da15b0d52ef83/</link><pubDate>Wed, 06 Aug 2025 00:27:54 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/792cac4ce6eb96b5001da15b0d52ef83/</guid><description>FastAPI的BackgroundTasks模块适用于短时任务（如邮件发送、日志写入），基于请求-响应后的异步执行机制，但不支持任务持久化和分布式处理。与Celery相比，BackgroundTasks适合处理5秒内的任务，而Celery适合长时间任务和分布式场景。消息队列的核心组件包括Broker、生产者-消费者模式和消息确认机制。混合架构可结合BackgroundTasks和Celery，分别处理快速和慢速任务。长时间任务应使用Celery，避免阻塞FastAPI事件循环。</description></item><item><title>如何在FastAPI中让后台任务既高效又不会让你的应用崩溃？</title><link>https://blog.cmdragon.cn/posts/5ad8d0a4c8f2d05e9c1a42d828aad7b3/</link><pubDate>Wed, 30 Jul 2025 12:01:00 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5ad8d0a4c8f2d05e9c1a42d828aad7b3/</guid><description>FastAPI 的 BackgroundTasks 允许将非即时性操作（如发送邮件、日志记录）从主请求流程中分离，提升响应速度并支持同步/异步混合任务处理。通过注入 BackgroundTasks 参数并使用 add_task 方法添加任务，开发者可以轻松实现后台任务。高级功能包括依赖注入增强和混合任务处理，测试时可通过 pytest 进行单元测试和集成测试。后台任务异常不会影响主请求响应，需通过自定义错误处理中间件捕获。</description></item><item><title>如何让FastAPI与Celery完美联姻，打造高效异步任务处理系统？</title><link>https://blog.cmdragon.cn/posts/627e3b30fd0d5a212f576b83e137d52f/</link><pubDate>Fri, 11 Jul 2025 16:32:44 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/627e3b30fd0d5a212f576b83e137d52f/</guid><description>Celery架构由客户端、消息代理和工作者组成，常用Redis或RabbitMQ作为消息代理。FastAPI与Celery集成时，用户请求通过FastAPI路由发送到Celery任务队列，由工作者处理并存储结果。代码实现包括安装依赖、定义Celery应用、创建任务函数和FastAPI接口。任务状态可通过查询接口获取。常见问题包括任务未执行和结果无法获取，需检查Redis服务、任务模块和存储空间。任务优先级可通过启动worker时指定队列和接口调用时指定优先级来配置。</description></item></channel></rss>