<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/Redis/</link><description>Recent content in Redis on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 13 Aug 2025 05:52:37 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/Redis/index.xml" rel="self" type="application/rss+xml"/><item><title>Celery任务监控的魔法背后藏着什么秘密？</title><link>https://blog.cmdragon.cn/posts/f43335725bb3372ebc774db1b9f28d2d/</link><pubDate>Wed, 13 Aug 2025 05:52:37 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f43335725bb3372ebc774db1b9f28d2d/</guid><description>Celery 结果存储系统（Result Backend）负责持久化任务状态和返回结果，支持多种存储方案如 Redis、RabbitMQ 和数据库。Flower 监控平台用于实时监控任务吞吐量、内存占用、队列堆积和失败率等指标。集成示例展示了如何在 FastAPI 中提交任务并查询结果，同时处理常见错误如结果存储异常和状态更新延迟。通过任务装饰器可配置结果过期时间，使用 AsyncResult 查询任务执行结果。</description></item><item><title>FastAPI与Celery的完美邂逅，如何让异步任务飞起来？</title><link>https://blog.cmdragon.cn/posts/b79c2c1805fe9b1ea28326b5b8f3b709/</link><pubDate>Sun, 10 Aug 2025 07:43:41 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b79c2c1805fe9b1ea28326b5b8f3b709/</guid><description>FastAPI框架集成Celery的实战指南，首先需要Python 3.8+环境，并安装FastAPI、Celery、Redis等核心依赖包。配置Celery实例时，需设置Redis作为Broker和Backend。异步任务处理流程包括用户请求通过FastAPI路由进入，Celery任务派发，Worker执行任务并存储结果。接口层实现中，通过FastAPI创建任务和查询任务状态的API。任务处理器使用Celery的&lt;code>@shared_task&lt;/code>装饰器定义异步任务。任务监控通过Flower平台进行，配置Celery以发送任务事件。常见报错包括Worker启动失败、任务执行超时和结果反序列化失败，需检查Redis服务、调整任务超时设置和确保任务返回可序列化对象。</description></item><item><title>如何让FastAPI与Celery完美联姻，打造高效异步任务处理系统？</title><link>https://blog.cmdragon.cn/posts/627e3b30fd0d5a212f576b83e137d52f/</link><pubDate>Fri, 11 Jul 2025 16:32:44 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/627e3b30fd0d5a212f576b83e137d52f/</guid><description>Celery架构由客户端、消息代理和工作者组成，常用Redis或RabbitMQ作为消息代理。FastAPI与Celery集成时，用户请求通过FastAPI路由发送到Celery任务队列，由工作者处理并存储结果。代码实现包括安装依赖、定义Celery应用、创建任务函数和FastAPI接口。任务状态可通过查询接口获取。常见问题包括任务未执行和结果无法获取，需检查Redis服务、任务模块和存储空间。任务优先级可通过启动worker时指定队列和接口调用时指定优先级来配置。</description></item><item><title>FastAPI权限缓存：你的性能瓶颈是否藏在这只“看不见的手”里？</title><link>https://blog.cmdragon.cn/posts/c110b0765e278d3bf5d77582c50e4dd6/</link><pubDate>Mon, 23 Jun 2025 05:27:13 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c110b0765e278d3bf5d77582c50e4dd6/</guid><description>FastAPI权限缓存与性能优化通过减少重复权限验证提升系统性能。使用&lt;code>lru_cache&lt;/code>实现内存级缓存，或通过Redis实现分布式缓存，有效降低数据库查询压力。优化策略包括异步IO操作、查询优化、缓存预热和分页优化，显著提升QPS和响应速度。常见报错如403 Forbidden和422 Validation Error，需检查权限缓存和接口参数。缓存策略根据业务场景选择，如单实例部署使用&lt;code>lru_cache&lt;/code>，微服务集群使用Redis。</description></item><item><title>FastAPI中Pydantic异步分布式唯一性校验</title><link>https://blog.cmdragon.cn/posts/e92a3da8b4e4beaf5a14ef4c79489b42/</link><pubDate>Wed, 02 Apr 2025 00:47:55 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e92a3da8b4e4beaf5a14ef4c79489b42/</guid><description>FastAPI开发中，异步分布式唯一性校验通过异步IO、分布式锁和二级缓存技术解决传统同步校验的并发冲突、性能瓶颈和响应延迟问题。手机和邮箱的唯一性校验通过Pydantic模型定义、异步校验服务层和路由层集成实现。多级缓存策略结合本地缓存、Redis和数据库，确保数据一致性。Redis分布式锁防止并发冲突，速率限制中间件防止恶意请求。常见报错包括锁超时和非法手机号，需调整锁超时时间和净化输入。</description></item></channel></rss>