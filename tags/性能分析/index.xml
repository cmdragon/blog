<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>性能分析 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link><description>Recent content in 性能分析 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 16 Oct 2025 02:00:15 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><item><title>想抓PostgreSQL里的慢SQL？pg_stat_statements基础黑匣子和pg_stat_monitor时间窗，谁能帮你更准揪出性能小偷？</title><link>https://blog.cmdragon.cn/posts/b2213bfcb5b88a862f2138404c03d596/</link><pubDate>Thu, 16 Oct 2025 02:00:15 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b2213bfcb5b88a862f2138404c03d596/</guid><description>pg_stat_statements是PostgreSQL的核心性能监控模块，用于跟踪SQL语句的计划与执行统计信息，帮助定位性能瓶颈。通过修改配置文件并重启数据库，可以启用该模块。核心配置参数包括跟踪SQL的最大数量、跟踪范围等。&lt;code&gt;pg_stat_statements&lt;/code&gt;视图提供SQL的详细统计信息，如执行次数、总执行时间、缓存命中率等。&lt;code&gt;pg_stat_monitor&lt;/code&gt;是增强版模块，支持按时间窗口统计和响应时间直方图，适合持续监控。结合这两个模块，可以持续优化数据库性能，通过定位瓶颈SQL、分析执行计划、优化索引等步骤提升效率。</description></item><item><title>N+1查询：数据库性能的隐形杀手与终极拯救指南</title><link>https://blog.cmdragon.cn/posts/97852b6355fc0ee843ad8870810ec928/</link><pubDate>Tue, 06 May 2025 00:16:30 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/97852b6355fc0ee843ad8870810ec928/</guid><description>N+1查询问题是ORM中常见的性能陷阱，表现为在查询主对象时，对每个关联对象进行单独查询，导致查询次数过多。以博客系统为例，查询10位作者及其文章会产生11次查询。通过Tortoise-ORM的&lt;code&gt;prefetch_related&lt;/code&gt;方法，可以将查询优化为2次，显著提升性能。优化后的实现方案包括使用SQL JOIN语句加载关联数据，并结合FastAPI进行实践。进阶优化技巧包括多层预加载、选择性字段加载和分页查询结合。常见报错涉及模型注册、连接关闭和字段匹配问题，需针对性解决。</description></item><item><title>数据库审计与监控</title><link>https://blog.cmdragon.cn/posts/0dbe53ca415995914ef7c59e7ca6e79a/</link><pubDate>Fri, 20 Dec 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0dbe53ca415995914ef7c59e7ca6e79a/</guid><description>数据库审计与监控是确保数据库安全性和性能的关键环节。通过实施有效的审计策略，可以追踪用户活动，监控数据访问与修改，从而及时发现潜在的安全威胁和性能瓶颈。探讨数据库审计的基本概念、审计策略和监控工具，帮助读者了解如何实施数据库的有效审计与监控。</description></item><item><title>Nuxt.js 应用中的 page：finish 钩子详解</title><link>https://blog.cmdragon.cn/posts/d86a35cfb808722da2a6383da93c4a16/</link><pubDate>Wed, 09 Oct 2024 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d86a35cfb808722da2a6383da93c4a16/</guid><description>page:finish 是 Nuxt.js 中用于处理页面加载完成事件的钩子，特别是与 Suspense机制相关。这个钩子允许开发者在页面加载完成后执行自定义操作，以优化用户体验或进行统计分析。</description></item></channel></rss>