<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>架构设计 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><description>Recent content in 架构设计 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Aug 2025 23:35:36 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>冷热任务分离：是提升Web性能的终极秘籍还是技术噱头？</title><link>https://blog.cmdragon.cn/posts/9c3dc7767a9282f7ef02daad42539f2c/</link><pubDate>Sun, 24 Aug 2025 23:35:36 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/9c3dc7767a9282f7ef02daad42539f2c/</guid><description>冷热任务分离是提升Web应用性能的关键策略，热任务要求毫秒级响应，直接影响用户体验，如API主逻辑和数据库查询；冷任务可延后处理，如发送邮件和日志写入。通过任务解耦，热任务即时响应，冷任务进入队列异步执行，提升吞吐量、增强稳定性并优化资源。FastAPI支持原生后台任务和Celery分布式队列两种实现方案，适用于不同场景。最佳实践包括任务切分、监控指标和资源分配比例，确保系统高效运行。</description></item><item><title>Strawberry、Graphene还是Ariadne：谁才是FastAPI中GraphQL的最佳拍档？</title><link>https://blog.cmdragon.cn/posts/f4ba34abe80a510080bb8b97f5cc92a8/</link><pubDate>Fri, 18 Jul 2025 03:57:51 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f4ba34abe80a510080bb8b97f5cc92a8/</guid><description>GraphQL在FastAPI中的实现主要有三种方案：Strawberry、Graphene和Ariadne。Strawberry采用类型注解语法，自动生成Schema，开发体验优；Graphene使用类继承结构，需手动定义类型和解析器，灵活性高；Ariadne基于SDL优先原则，适合已有Schema的项目改造。性能上，Strawberry支持异步，表现最佳；社区活跃度方面，Strawberry更新频繁，Graphene和Ariadne相对稳定。选型时，若需完整SDL控制或已有Schema，优先选择Ariadne；若追求开发速度或异步支持，Strawberry更为合适。</description></item></channel></rss>