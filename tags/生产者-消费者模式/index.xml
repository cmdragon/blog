<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>生产者-消费者模式 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 生产者-消费者模式 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 07 Aug 2025 23:55:48 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>FastAPI的BackgroundTasks如何玩转生产者-消费者模式？</title><link>https://blog.cmdragon.cn/posts/1549a6bd7e47e7006e7ba8f52bcfe8eb/</link><pubDate>Thu, 07 Aug 2025 23:55:48 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1549a6bd7e47e7006e7ba8f52bcfe8eb/</guid><description>FastAPI 的 BackgroundTasks 基于 Starlette 实现，采用同步执行机制，确保任务执行与响应返回的时序性。当系统面临单节点处理瓶颈或需要任务顺序性时，可升级为生产者-消费者模式，使用 Redis/RabbitMQ 作为消息队列。通过 Celery 实现分布式任务处理，生产者将任务存入队列，消费者读取并处理任务，结果持久化存储。异常处理包括任务确认机制、死信队列和任务状态追踪，确保系统稳定性和任务可靠性。</description></item><item><title>BackgroundTasks与Celery：谁才是异步任务的终极赢家？</title><link>https://blog.cmdragon.cn/posts/792cac4ce6eb96b5001da15b0d52ef83/</link><pubDate>Wed, 06 Aug 2025 00:27:54 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/792cac4ce6eb96b5001da15b0d52ef83/</guid><description>FastAPI的BackgroundTasks模块适用于短时任务（如邮件发送、日志写入），基于请求-响应后的异步执行机制，但不支持任务持久化和分布式处理。与Celery相比，BackgroundTasks适合处理5秒内的任务，而Celery适合长时间任务和分布式场景。消息队列的核心组件包括Broker、生产者-消费者模式和消息确认机制。混合架构可结合BackgroundTasks和Celery，分别处理快速和慢速任务。长时间任务应使用Celery，避免阻塞FastAPI事件循环。</description></item></channel></rss>