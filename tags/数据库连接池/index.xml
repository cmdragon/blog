<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库连接池 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link><description>Recent content in 数据库连接池 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 27 Aug 2025 23:26:45 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在API高并发中玩转资源隔离与限流策略？</title><link>https://blog.cmdragon.cn/posts/4ad4ec1dbd80bcf5670fb397ca7cc68c/</link><pubDate>Wed, 27 Aug 2025 23:26:45 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/4ad4ec1dbd80bcf5670fb397ca7cc68c/</guid><description>资源隔离是保障API稳定性的核心，通过路由隔离和依赖隔离实现关键业务与非关键业务的分离，避免资源耗尽。限流策略包括令牌桶算法和滑动窗口算法，控制请求速率以保护系统。FastAPI中通过slowapi库实现限流，支持路由级动态限流和分布式限流。分布式限流基于Redis，确保多实例环境下的全局限流。电商支付系统案例展示了核心接口使用独立数据库连接池，日志查询使用公共资源。熔断策略通过CircuitBreaker模式实现自动熔断，应对连续超时问题。</description></item><item><title>驾驭FastAPI多数据库：从读写分离到跨库事务的艺术</title><link>https://blog.cmdragon.cn/posts/82c823f30695c4f6a2bbd95931894efe/</link><pubDate>Fri, 16 May 2025 00:58:24 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/82c823f30695c4f6a2bbd95931894efe/</guid><description>在微服务架构中，FastAPI 多数据库配置管理通过独立数据存储实现隔离性、扩展性和性能优化。配置主从数据库时，使用 SQLAlchemy 创建异步引擎和会话工厂，并通过中间件实现动态数据库路由，实现读写分离。跨库事务处理采用 Saga 事务模式，确保分布式事务的一致性。以电商订单系统为例，展示了如何在 PostgreSQL、MongoDB 和 MySQL 之间进行跨库操作，并通过补偿机制处理事务失败。常见报错解决方案包括精确查询条件、正确管理会话和处理事务回滚。</description></item><item><title>数据库连接池：从银行柜台到代码世界的奇妙旅程</title><link>https://blog.cmdragon.cn/posts/1d808e4e97f59c12d2e5cf3302f3e1a7/</link><pubDate>Wed, 07 May 2025 23:52:52 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1d808e4e97f59c12d2e5cf3302f3e1a7/</guid><description>FastAPI开发中，Tortoise-ORM的数据库连接池配置对系统性能至关重要。连接池参数如maxsize、timeout和pool_recycle直接影响并发处理能力。通过动态调整连接池大小、集成Prometheus监控和设置告警规则，可以有效优化性能。常见错误如连接池耗尽可通过逐步增加maxsize和优化慢查询解决。综合监控指标和压力测试工具，可以全面评估连接池状态，确保系统稳定性。</description></item><item><title>FastAPI数据库连接池配置与监控</title><link>https://blog.cmdragon.cn/posts/06a7744b22307c94c8cabf0a26c4133d/</link><pubDate>Mon, 28 Apr 2025 00:13:02 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/06a7744b22307c94c8cabf0a26c4133d/</guid><description>FastAPI数据库连接池通过预先创建和复用连接，显著降低连接创建开销。配置参数包括最小连接数（minsize）、最大连接数（maxsize）和空闲连接存活时间（max_inactive_connection_lifetime）。通过Tortoise-ORM集成Prometheus和Grafana实现实时监控，优化连接管理。常见问题如连接池耗尽和连接泄漏，可通过增加maxsize、检查未提交事务和使用async with管理事务来解决。定期监控和优化连接池参数是确保数据库性能的关键。</description></item><item><title>SQLAlchemy 核心概念与同步引擎配置详解</title><link>https://blog.cmdragon.cn/posts/de9dea9606a04d21ae60cbc315397580/</link><pubDate>Mon, 14 Apr 2025 00:28:46 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/de9dea9606a04d21ae60cbc315397580/</guid><description>SQLAlchemy 的核心概念包括 ORM、Engine、Connection 和 Session。ORM 将数据库表映射为 Python 类，行记录转为对象实例。Engine 管理数据库连接池，Connection 是具体连接，Session 跟踪对象状态变化。同步引擎配置涉及安装依赖、创建引擎、定义模型类及与 FastAPI 集成。连接池通过 pool_size、max_overflow 和 pool_recycle 管理连接。Session 生命周期需正确管理，避免连接泄漏和数据不一致。常见错误包括表不存在、连接池溢出和验证错误，需通过建表、调整连接池配置和请求模型验证解决。</description></item></channel></rss>