<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库优化 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</link><description>Recent content in 数据库优化 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 18 Oct 2025 02:13:12 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>只给表子集建索引？用函数结果建索引？PostgreSQL这俩操作凭啥能省空间又加速？</title><link>https://blog.cmdragon.cn/posts/ca93f1d53aa910e7ba5ffd8df611c12b/</link><pubDate>Sat, 18 Oct 2025 02:13:12 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/ca93f1d53aa910e7ba5ffd8df611c12b/</guid><description>部分索引是建立在表子集上的索引，通过条件表达式定义，仅包含满足条件的行。其优势在于体积小、维护成本低、查询匹配精准。典型应用包括排除常见值、优化高频查询、实现部分唯一约束及修正错误查询计划。表达式索引则基于函数或标量表达式的结果，预存常用计算逻辑，加快查询速度，适用于查询频率远高于更新频率的场景。两者均能显著提升数据库性能，但需注意避免滥用部分索引替代分区表。</description></item><item><title>B-tree索引像字典查词一样工作？那哪些数据库查询它能加速，哪些不能？</title><link>https://blog.cmdragon.cn/posts/f507856ebfddd592448813c510a53669/</link><pubDate>Fri, 17 Oct 2025 08:06:28 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/f507856ebfddd592448813c510a53669/</guid><description>B-tree索引是PostgreSQL默认的索引类型，通过分层结构（根节点、分支节点、叶子节点）快速定位数据，时间复杂度为O(log n)。它支持比较操作符（如&lt;code&gt;=&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt;）、范围查询（如&lt;code&gt;BETWEEN&lt;/code&gt;）、空值判断（如&lt;code&gt;IS NULL&lt;/code&gt;）以及锚定开头的模式匹配（如&lt;code&gt;LIKE 'foo%'&lt;/code&gt;）。适用场景包括加速“等于”查询（如用户登录）、范围查询（如订单统计）和空值查询（如查找未激活用户）。不适用于结尾模糊匹配（如&lt;code&gt;LIKE '%phone'&lt;/code&gt;）、非排序类操作（如&lt;code&gt;!=&lt;/code&gt;）和低基数列（如性别）。</description></item><item><title>FastAPI日志审计：你的权限系统是否真的安全无虞？</title><link>https://blog.cmdragon.cn/posts/88016f667a665d7c7fd84d0d6f46112d/</link><pubDate>Fri, 20 Jun 2025 16:21:09 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/88016f667a665d7c7fd84d0d6f46112d/</guid><description>FastAPI权限系统的日志审计功能通过三层架构实现，核心价值包括安全合规、故障排查、行为分析和责任追溯。基础日志中间件记录请求信息，完整日志系统包含数据模型设计、日志记录服务和权限系统整合。实际应用案例展示了管理员操作和用户登录的审计实现。常见报错如422验证错误和数据库连接池耗尽，提供了相应的解决方案。优化建议包括数据脱敏、加密存储、索引优化和异步写入。</description></item><item><title>数据库连接池：从银行柜台到代码世界的奇妙旅程</title><link>https://blog.cmdragon.cn/posts/1d808e4e97f59c12d2e5cf3302f3e1a7/</link><pubDate>Wed, 07 May 2025 23:52:52 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1d808e4e97f59c12d2e5cf3302f3e1a7/</guid><description>FastAPI开发中，Tortoise-ORM的数据库连接池配置对系统性能至关重要。连接池参数如maxsize、timeout和pool_recycle直接影响并发处理能力。通过动态调整连接池大小、集成Prometheus监控和设置告警规则，可以有效优化性能。常见错误如连接池耗尽可通过逐步增加maxsize和优化慢查询解决。综合监控指标和压力测试工具，可以全面评估连接池状态，确保系统稳定性。</description></item><item><title>N+1查询：数据库性能的隐形杀手与终极拯救指南</title><link>https://blog.cmdragon.cn/posts/97852b6355fc0ee843ad8870810ec928/</link><pubDate>Tue, 06 May 2025 00:16:30 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/97852b6355fc0ee843ad8870810ec928/</guid><description>N+1查询问题是ORM中常见的性能陷阱，表现为在查询主对象时，对每个关联对象进行单独查询，导致查询次数过多。以博客系统为例，查询10位作者及其文章会产生11次查询。通过Tortoise-ORM的&lt;code&gt;prefetch_related&lt;/code&gt;方法，可以将查询优化为2次，显著提升性能。优化后的实现方案包括使用SQL JOIN语句加载关联数据，并结合FastAPI进行实践。进阶优化技巧包括多层预加载、选择性字段加载和分页查询结合。常见报错涉及模型注册、连接关闭和字段匹配问题，需针对性解决。</description></item><item><title>性能优化与调优：全面解析数据库索引</title><link>https://blog.cmdragon.cn/posts/8dece2eb47ac87272320e579cc6f8591/</link><pubDate>Thu, 13 Feb 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8dece2eb47ac87272320e579cc6f8591/</guid><description>数据库是现代应用程序的核心组件之一，其性能直接影响到整个系统的响应速度和用户体验。为了提升数据库的性能，优化查询是必不可少的。而索引，作为一种数据结构，能够显著加快数据检索的速度。</description></item><item><title>深入掌握 SQL 深度应用：复杂查询的艺术与技巧</title><link>https://blog.cmdragon.cn/posts/0f0a929119a4799c8ea1e087e592c545/</link><pubDate>Mon, 10 Feb 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0f0a929119a4799c8ea1e087e592c545/</guid><description>SQL（结构化查询语言）是与数据库交互的关键工具，而复杂查询则是实现数据分析与获取深入见解的重要手段</description></item><item><title>彻底理解数据库设计原则：生命周期、约束与反范式的应用</title><link>https://blog.cmdragon.cn/posts/934686b6ed93e241883a74eaf236bc96/</link><pubDate>Sun, 09 Feb 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/934686b6ed93e241883a74eaf236bc96/</guid><description>数据库设计原则是确保数据库系统高效、稳定和可维护的重要指导方针。了解整个设计生命周期，以及在设计过程中应遵循的约束和规则，对于构建高质量的数据库至关重要。此外，在特定场景中，反范式化也是一种有效的策略。</description></item><item><title>深入理解视图的创建与删除：数据库管理中的高级功能</title><link>https://blog.cmdragon.cn/posts/c5b46d10b7686bbe57b20cd9e181c56b/</link><pubDate>Tue, 21 Jan 2025 00:18:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c5b46d10b7686bbe57b20cd9e181c56b/</guid><description>在现代数据库管理系统中，视图是一个重要的高级功能，可以为用户提供定制化的数据视图以满足特定需求。视图不仅能够简化复杂的查询，还能增强数据安全性和访问效率。</description></item><item><title>Django性能之道：缓存应用与优化实战</title><link>https://blog.cmdragon.cn/posts/887a0a7da3a77358a6c56b53de583bfd/</link><pubDate>Sat, 11 May 2024 18:34:22 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/887a0a7da3a77358a6c56b53de583bfd/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/2024_05_11 18_37_29.png" title="2024_05_11 18_37_29.png" alt="2024_05_11 18_37_29.png"/&gt;
&lt;p&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在当今的互联网时代，用户对网站和应用程序的性能要求越来越高。一个响应迅速、加载快速的网站不仅能提升用户体验，还能在搜索引擎排名中占据优势。Django，作为一个高级Python
Web框架，以其快速开发和干净、实用的设计而闻名。然而，即使是最优化的Django应用，也可能因为频繁的数据库查询、复杂的计算或外部API调用而变得缓慢。这就是缓存发挥作用的地方。&lt;/p&gt;</description></item></channel></rss>