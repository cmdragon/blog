<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>集成测试 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</link><description>Recent content in 集成测试 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 09 Sep 2025 04:07:19 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中玩转“时光倒流”的数据库事务回滚测试？</title><link>https://blog.cmdragon.cn/posts/bf9883a75ffa46b523a03b16ec56ce48/</link><pubDate>Tue, 09 Sep 2025 04:07:19 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bf9883a75ffa46b523a03b16ec56ce48/</guid><description>在 FastAPI 项目中，集成测试通过事务回滚机制确保测试环境的干净性。使用 &lt;code&gt;pytest&lt;/code&gt;、&lt;code&gt;SQLAlchemy&lt;/code&gt; 和 &lt;code&gt;FastAPI TestClient&lt;/code&gt; 组合，实现数据库事务的嵌套控制，测试中的所有数据库操作在用例结束时自动回滚。通过 &lt;code&gt;begin_nested()&lt;/code&gt; 创建保存点，确保每个测试用例在独立的事务中执行，避免数据污染。测试案例模拟用户注册和资料修改，验证数据库写入和接口请求的正确性。常见问题如 &lt;code&gt;IntegrityError&lt;/code&gt; 和连接未释放，通过检查事务回滚机制和显式关闭连接解决。</description></item><item><title>如何在FastAPI中优雅地模拟多模块集成测试？</title><link>https://blog.cmdragon.cn/posts/be553dbd5d51835d2c69553f4a773e2d/</link><pubDate>Mon, 08 Sep 2025 05:37:45 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/be553dbd5d51835d2c69553f4a773e2d/</guid><description>FastAPI 集成测试通过 &lt;code&gt;pytest&lt;/code&gt;、&lt;code&gt;httpx&lt;/code&gt; 和 &lt;code&gt;asyncio&lt;/code&gt; 工具链模拟多模块交互，重点测试认证、数据库和外部服务。使用 &lt;code&gt;unittest.mock&lt;/code&gt; 替换外部依赖，&lt;code&gt;pytest-asyncio&lt;/code&gt; 管理异步事务回滚。测试模型涵盖认证、用户服务和支付模块的协同验证。实战案例展示了订单支付链路的测试流程，通过 &lt;code&gt;fixture&lt;/code&gt; 隔离第三方支付服务，复用 &lt;code&gt;TestClient&lt;/code&gt; 维护请求上下文。认证测试中，采用动态 Token 生成策略，避免硬编码风险，并通过 &lt;code&gt;AuthContext&lt;/code&gt; 类管理认证流水线。</description></item><item><title>如何在FastAPI中让后台任务既高效又不会让你的应用崩溃？</title><link>https://blog.cmdragon.cn/posts/5ad8d0a4c8f2d05e9c1a42d828aad7b3/</link><pubDate>Wed, 30 Jul 2025 12:01:00 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5ad8d0a4c8f2d05e9c1a42d828aad7b3/</guid><description>FastAPI 的 BackgroundTasks 允许将非即时性操作（如发送邮件、日志记录）从主请求流程中分离，提升响应速度并支持同步/异步混合任务处理。通过注入 BackgroundTasks 参数并使用 add_task 方法添加任务，开发者可以轻松实现后台任务。高级功能包括依赖注入增强和混合任务处理，测试时可通过 pytest 进行单元测试和集成测试。后台任务异常不会影响主请求响应，需通过自定义错误处理中间件捕获。</description></item><item><title>如何在FastAPI中玩转权限控制与测试，让代码安全又优雅？</title><link>https://blog.cmdragon.cn/posts/6de8fc7807cadec4d735ea5771cecf3a/</link><pubDate>Wed, 18 Jun 2025 10:11:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/6de8fc7807cadec4d735ea5771cecf3a/</guid><description>FastAPI通过依赖注入系统实现权限控制，使用&lt;code&gt;Depends()&lt;/code&gt;函数接收权限验证依赖项，验证流程包括解析凭证、验证有效性并提取用户角色。权限层级划分为公共端点、用户级端点和管理员端点。单元测试使用&lt;code&gt;pytest&lt;/code&gt;验证权限逻辑，集成测试通过&lt;code&gt;httpx&lt;/code&gt;模拟请求。完整测试案例包括用户系统权限测试和覆盖率提升技巧。常见问题如401和403错误，解决方案包括检查请求头和用户角色分配。安全加固建议使用HTTPS、设置令牌有效期和记录审计日志。</description></item><item><title>FastAPI依赖覆盖与测试环境模拟</title><link>https://blog.cmdragon.cn/posts/8a2bd816fabac0bc10bd2cf8494e4631/</link><pubDate>Thu, 10 Apr 2025 00:58:09 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/8a2bd816fabac0bc10bd2cf8494e4631/</guid><description>FastAPI的依赖覆盖机制通过重写依赖项实现运行环境切换，适用于隔离测试和模拟特定场景。依赖项存储在&lt;code&gt;dependency_overrides&lt;/code&gt;字典中，优先检查覆盖字典，使用&lt;code&gt;@app.dependency_overrides&lt;/code&gt;装饰器进行临时替换，测试完成后自动恢复。通过pytest搭建测试环境，覆盖数据库依赖，使用&lt;code&gt;TestClient&lt;/code&gt;进行测试。多场景模拟测试案例包括用户权限验证和第三方API模拟，分层测试策略涵盖单元测试、集成测试和E2E测试。最佳实践包括使用pytest参数化进行多场景测试，确保测试覆盖率统计包含依赖注入代码。常见报错如&lt;code&gt;DependencyOverrideNotFound&lt;/code&gt;和&lt;code&gt;TestClient响应验证失败&lt;/code&gt;，可通过检查依赖项定义、模拟数据格式和类型注解解决。</description></item></channel></rss>