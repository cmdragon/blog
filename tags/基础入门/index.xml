<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基础入门 on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</link><description>Recent content in 基础入门 on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 12 Oct 2025 07:13:23 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL 查询慢？是不是忘了优化 GROUP BY、ORDER BY 和窗口函数？</title><link>https://blog.cmdragon.cn/posts/c856e3cb073822349f3bf2d29995dcfc/</link><pubDate>Sun, 12 Oct 2025 07:13:23 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c856e3cb073822349f3bf2d29995dcfc/</guid><description>GROUP BY用于分组聚合，将相同值的行归为一组并计算聚合函数。PostgreSQL支持功能依赖优化，若&lt;code&gt;GROUP BY&lt;/code&gt;列为主键或唯一约束，其他依赖列无需加入&lt;code&gt;GROUP BY&lt;/code&gt;。&lt;code&gt;GROUPING SETS&lt;/code&gt;、&lt;code&gt;CUBE&lt;/code&gt;、&lt;code&gt;ROLLUP&lt;/code&gt;可一次性生成多组聚合，提升效率。&lt;code&gt;HAVING&lt;/code&gt;用于过滤分组结果，&lt;code&gt;WHERE&lt;/code&gt;过滤原始行。&lt;code&gt;ORDER BY&lt;/code&gt;性能依赖索引，Top-N查询可使用Top-N Heapsort优化。窗口函数在&lt;code&gt;GROUP BY&lt;/code&gt;后执行，&lt;code&gt;PARTITION BY&lt;/code&gt;和&lt;code&gt;ORDER BY&lt;/code&gt;的索引可提升性能。&lt;code&gt;work_mem&lt;/code&gt;控制排序内存，超出则触发外部排序。</description></item><item><title>PostgreSQL里的子查询和CTE居然在性能上“掐架”？到底该站哪边？</title><link>https://blog.cmdragon.cn/posts/c096347d18e67b7431faacd2c4757093/</link><pubDate>Sat, 11 Oct 2025 03:57:23 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c096347d18e67b7431faacd2c4757093/</guid><description>子查询和CTE（公共表表达式）是SQL中处理复杂查询的两种常用方法。子查询嵌套在其他查询中，分为非相关子查询（独立执行）和相关子查询（依赖外部查询）。CTE通过&lt;code&gt;WITH&lt;/code&gt;子句定义，生成临时结果集，支持物化（默认生成临时表）和递归查询。CTE的优势在于多次引用时避免重复计算，但会增加I/O开销；子查询则通过优化器融合，利用索引提高性能。递归查询是CTE的独占场景，而子查询在简单逻辑和小结果集过滤时更具优势。PostgreSQL 12+支持&lt;code&gt;NOT MATERIALIZED&lt;/code&gt;选项，减少CTE的物化开销。</description></item><item><title>PostgreSQL选Join策略有啥小九九？Nested Loop/Merge/Hash谁是它的菜？</title><link>https://blog.cmdragon.cn/posts/2eca89463454fd4250d7b66243b9fe5a/</link><pubDate>Fri, 10 Oct 2025 03:10:41 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2eca89463454fd4250d7b66243b9fe5a/</guid><description>PostgreSQL中的连接查询（JOIN）通过查询优化器选择成本最低的执行策略，主要包含三种Join策略：Nested Loop Join、Merge Join和Hash Join。Nested Loop Join适用于小表或内层表有索引的场景；Merge Join适合两个表Join键都有有序索引的情况；Hash Join则用于大表与小表的连接，通过构建Hash表加速查询。优化器还会根据表大小和索引情况选择Join顺序，优先减少中间结果的大小。</description></item><item><title>PostgreSQL新手SQL总翻车？这7个性能陷阱你踩过没？</title><link>https://blog.cmdragon.cn/posts/068ecb772a87d7df20a8c9fb4b233f8e/</link><pubDate>Thu, 09 Oct 2025 04:57:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/068ecb772a87d7df20a8c9fb4b233f8e/</guid><description>PostgreSQL查询执行流程包括词法分析、语法分析、查询重写、查询规划器和执行器，其中查询规划器根据统计信息选择成本最低的执行计划。常见性能陷阱包括忽略索引导致全表扫描、函数/表达式导致索引失效、隐式类型转换破坏索引、复合索引顺序错误、不必要的&lt;code&gt;SELECT *&lt;/code&gt;、JOIN操作笛卡尔积与顺序错误，以及CTE的“优化围栏”问题。通过&lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;可诊断性能问题，避免这些陷阱可显著提升查询效率。</description></item><item><title>PostgreSQL索引选B-Tree还是GiST？“瑞士军刀”和“多面手”的差别你居然还不知道？</title><link>https://blog.cmdragon.cn/posts/d498f63cd0a2d5a77e445c688a8b88db/</link><pubDate>Wed, 08 Oct 2025 01:54:08 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d498f63cd0a2d5a77e445c688a8b88db/</guid><description>索引是PostgreSQL中优化查询性能的核心工具，本质是表数据的“快速查找目录”，减少磁盘IO次数。B-Tree是默认索引类型，适用于等值查询、范围查询和排序，结构为自平衡树，查询时间稳定。GiST是高级索引类型，支持复杂数据类型和查询场景，如空间数据查询和全文搜索。选择索引时需结合查询需求、数据类型和维护成本，B-Tree适合常规查询，GiST适合复杂查询。</description></item><item><title>PostgreSQL处理SQL居然像做蛋糕？解析到执行的4步里藏着多少查询优化的小心机？</title><link>https://blog.cmdragon.cn/posts/d527f8ebb6e3dae2c7dfe4c8d8979444/</link><pubDate>Mon, 06 Oct 2025 02:30:02 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d527f8ebb6e3dae2c7dfe4c8d8979444/</guid><description>PostgreSQL处理SQL查询的过程分为解析、重写、规划和执行四个阶段。解析阶段将SQL字符串转换为解析树，重写阶段处理视图和规则，规划阶段选择最优执行计划，执行阶段按计划执行查询。代价模型通过计算IO和CPU成本来优化查询，统计信息影响成本计算的准确性。使用索引、选择合适的连接方式和提前过滤数据是优化查询的关键。定期更新统计信息和合理使用索引可避免性能下降。</description></item><item><title>转账不翻车、并发不干扰，PostgreSQL的ACID特性到底有啥魔法？</title><link>https://blog.cmdragon.cn/posts/de3672803de34dbad244d0a8d48b0eb5/</link><pubDate>Sat, 04 Oct 2025 04:57:25 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/de3672803de34dbad244d0a8d48b0eb5/</guid><description>ACID是数据库事务的四个核心特性，包括原子性、一致性、隔离性和持久性。原子性确保事务要么完全执行，要么完全不执行；一致性保证事务执行前后数据库处于合法状态；隔离性确保并发事务互不干扰；持久性保证事务提交后修改永久保存。PostgreSQL通过事务日志、MVCC和锁机制等技术实现ACID特性，确保数据可靠性和一致性。</description></item><item><title>银行转账不白扣钱、电商下单不超卖，PostgreSQL事务的诀窍是啥？</title><link>https://blog.cmdragon.cn/posts/e463e8a2668abdf00a228c9b79324ded/</link><pubDate>Fri, 03 Oct 2025 02:02:14 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/e463e8a2668abdf00a228c9b79324ded/</guid><description>事务是数据库中不可分割的工作单元，确保多个SQL操作要么全部成功，要么全部回滚。事务的可靠性由ACID四大特性保障：原子性、一致性、隔离性和持久性。PostgreSQL通过BEGIN、COMMIT和ROLLBACK语句控制事务生命周期，并支持四种隔离级别（读未提交、读已提交、可重复读和串行化）来解决并发冲突。保存点允许事务部分回滚，适用于复杂操作和批量处理。事务管理在电商下单等场景中尤为重要，确保多个操作要么全部成功，要么全部回滚。</description></item><item><title>PostgreSQL里的PL/pgSQL到底是啥？能让SQL从“说目标”变“讲步骤”？</title><link>https://blog.cmdragon.cn/posts/5c967e595058c4a1fc4474a68e64031d/</link><pubDate>Thu, 02 Oct 2025 09:01:23 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/5c967e595058c4a1fc4474a68e64031d/</guid><description>PL/pgSQL 是 PostgreSQL 的过程化 SQL 语言，结合了 SQL 的声明式语法和过程式控制结构，用于编写复杂的数据库逻辑。其基本结构包括函数和过程，支持变量声明、参数传递、动态 SQL、条件判断、循环以及错误处理。通过 PL/pgSQL，用户可以实现计算、批量操作、事务控制等功能。函数通过 &lt;code&gt;SELECT&lt;/code&gt; 调用，过程通过 &lt;code&gt;CALL&lt;/code&gt; 调用，且过程支持显式事务控制。动态 SQL 需使用 &lt;code&gt;EXECUTE&lt;/code&gt; 和 &lt;code&gt;USING&lt;/code&gt; 避免 SQL 注入。</description></item><item><title>PostgreSQL视图不存数据？那它怎么简化查询还能递归生成序列和控制权限？</title><link>https://blog.cmdragon.cn/posts/325047855e3e23b5ef82f7d2db134fbd/</link><pubDate>Wed, 01 Oct 2025 06:30:56 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/325047855e3e23b5ef82f7d2db134fbd/</guid><description>PostgreSQL视图是基于SQL查询结果的虚拟表，不存储数据，仅保存查询逻辑。视图简化复杂查询、限制数据访问、隔离schema变化。创建视图使用&lt;code&gt;CREATE VIEW&lt;/code&gt;语句，支持&lt;code&gt;OR REPLACE&lt;/code&gt;替换已有视图、&lt;code&gt;TEMPORARY&lt;/code&gt;创建临时视图、&lt;code&gt;RECURSIVE&lt;/code&gt;递归视图。视图可指定列名、设置&lt;code&gt;WITH&lt;/code&gt;选项（如&lt;code&gt;security_barrier&lt;/code&gt;）、&lt;code&gt;CHECK OPTION&lt;/code&gt;确保更新行可见。可更新视图需满足特定条件，否则通过&lt;code&gt;INSTEAD OF&lt;/code&gt;触发器实现更新。递归视图处理层级结构或序列生成。视图权限默认基于视图所有者，&lt;code&gt;security_invoker&lt;/code&gt;以调用者权限访问基础表，&lt;code&gt;security_barrier&lt;/code&gt;防止信息泄露。</description></item><item><title>PostgreSQL索引这么玩，才能让你的查询真的“飞”起来？</title><link>https://blog.cmdragon.cn/posts/d2dba50bb6e4df7b27e735245a06a2a2/</link><pubDate>Tue, 30 Sep 2025 09:01:26 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/d2dba50bb6e4df7b27e735245a06a2a2/</guid><description>PostgreSQL索引是提升查询效率的关键工具，类似于书籍目录，帮助快速定位数据。常用索引类型包括B-Tree（默认，适用于等值、范围查询和排序）、Hash（仅等值查询）、GIN（多值类型如数组和JSONB）和BRIN（超大型表）。多列索引需注意列顺序，唯一索引确保数据唯一性，部分索引仅对特定条件数据有效。覆盖索引支持仅索引扫描，避免访问表堆数据。使用EXPLAIN命令检查索引使用情况，确保查询优化。</description></item><item><title>PostgreSQL的表关系和约束，咋帮你搞定用户订单不混乱、学生选课不重复？</title><link>https://blog.cmdragon.cn/posts/849ae5bab0f8c66e94c2f6ad1bb798e3/</link><pubDate>Mon, 29 Sep 2025 05:53:53 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/849ae5bab0f8c66e94c2f6ad1bb798e3/</guid><description>在数据库设计中，表关系是连接不同表的关键，旨在避免数据冗余和保证数据一致性。PostgreSQL支持三种表关系：一对一、一对多和多对多。一对一关系通过外键同时作为主键实现；一对多关系通过从表的外键指向主表的主键实现；多对多关系通过中间表包含两个外键实现。此外，约束（如主键、外键、唯一、非空和检查约束）确保数据的完整性和一致性。外键的&lt;code&gt;ON DELETE CASCADE&lt;/code&gt;和&lt;code&gt;ON DELETE RESTRICT&lt;/code&gt;分别用于自动删除关联行或阻止主表行删除。</description></item><item><title>PostgreSQL数据类型怎么选才高效不踩坑？</title><link>https://blog.cmdragon.cn/posts/bf54711525c507c5eacfa7b0151c39d2/</link><pubDate>Sat, 27 Sep 2025 01:23:27 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/bf54711525c507c5eacfa7b0151c39d2/</guid><description>PostgreSQL 提供丰富的原生数据类型，涵盖数值、字符、日期、几何、网络等多个场景。数值类型包括整数、串行、浮点和精确数值，选择时需权衡范围、精度和存储成本。字符类型有固定长度、可变长度和无长度限制的选项，适用于不同文本存储需求。日期/时间类型支持时区处理，推荐使用&lt;code&gt;timestamptz&lt;/code&gt;确保跨时区一致性。此外，PostgreSQL 还支持布尔、二进制、几何、网络、JSON 和 UUID 等类型，满足多样化数据存储需求。合理选择数据类型能提升存储效率、避免数据错误并优化查询性能。</description></item><item><title>想解锁PostgreSQL查询从基础到进阶的核心知识点？你都get了吗？</title><link>https://blog.cmdragon.cn/posts/887809b3e0375f5956873cd442f516d8/</link><pubDate>Fri, 26 Sep 2025 07:52:14 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/887809b3e0375f5956873cd442f516d8/</guid><description>PostgreSQL查询的核心操作包括&lt;code&gt;SELECT&lt;/code&gt;、&lt;code&gt;WHERE&lt;/code&gt;、&lt;code&gt;ORDER BY&lt;/code&gt;、&lt;code&gt;LIMIT&lt;/code&gt;、&lt;code&gt;JOIN&lt;/code&gt;、聚合函数和子查询。&lt;code&gt;SELECT&lt;/code&gt;用于从表中提取数据，&lt;code&gt;WHERE&lt;/code&gt;用于过滤条件，&lt;code&gt;ORDER BY&lt;/code&gt;用于排序，&lt;code&gt;LIMIT&lt;/code&gt;和&lt;code&gt;OFFSET&lt;/code&gt;用于分页。&lt;code&gt;JOIN&lt;/code&gt;用于关联多个表，聚合函数如&lt;code&gt;COUNT&lt;/code&gt;、&lt;code&gt;SUM&lt;/code&gt;等用于数据计算，&lt;code&gt;GROUP BY&lt;/code&gt;用于分组统计，&lt;code&gt;HAVING&lt;/code&gt;用于过滤分组结果。子查询用于嵌套查询逻辑。常见报错包括语法错误、数据类型不匹配和表名错误，需注意SQL执行顺序和数据类型一致性。</description></item><item><title>PostgreSQL UPDATE语句怎么玩？从改邮箱到批量更新的避坑技巧你都会吗？</title><link>https://blog.cmdragon.cn/posts/0f0622e9b7402b599e618150d0596ffe/</link><pubDate>Thu, 25 Sep 2025 01:03:40 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0f0622e9b7402b599e618150d0596ffe/</guid><description>PostgreSQL的&lt;code&gt;UPDATE&lt;/code&gt;语句用于修改数据库中的已有数据，通过&lt;code&gt;SET&lt;/code&gt;子句定义新值，&lt;code&gt;WHERE&lt;/code&gt;子句精准定位行，&lt;code&gt;FROM&lt;/code&gt;子句关联其他表，&lt;code&gt;RETURNING&lt;/code&gt;子句返回修改结果。高级用法包括分批更新减少锁冲突、使用&lt;code&gt;WITH&lt;/code&gt;子句分步处理复杂逻辑、结合游标逐行修改。实践案例展示了电商订单状态更新的具体实现，常见报错如语法错误、唯一约束冲突等也提供了解决方案。</description></item><item><title>PostgreSQL的“仓库-房间-货架”游戏，你能建出电商数据库和表吗？</title><link>https://blog.cmdragon.cn/posts/b6cd3c86da6aac26ed829e472d34078e/</link><pubDate>Mon, 22 Sep 2025 01:57:04 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b6cd3c86da6aac26ed829e472d34078e/</guid><description>PostgreSQL 采用“集群-数据库-模式-表”的层级结构管理数据。数据库集群包含多个独立的数据库，每个数据库内通过模式组织表、视图等对象，表则存储具体数据。创建数据库可通过命令行工具&lt;code&gt;createdb&lt;/code&gt;或SQL语句&lt;code&gt;CREATE DATABASE&lt;/code&gt;，支持设置所有者、字符编码等参数。创建表需定义列名、数据类型和约束，如主键、外键、非空等，确保数据完整性。通过插入和查询数据，可验证表结构和约束的有效性。</description></item><item><title>能当关系型数据库还能玩对象特性，能拆复杂查询还能自动管库存，PostgreSQL凭什么这么香？</title><link>https://blog.cmdragon.cn/posts/b5474d1480509c5072085abc80b3dd9f/</link><pubDate>Sat, 20 Sep 2025 06:58:38 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b5474d1480509c5072085abc80b3dd9f/</guid><description>PostgreSQL是一种对象-关系型数据库（ORDBMS），结合了关系型数据库的结构化特性和对象型数据库的灵活性，支持自定义数据类型和方法。它起源于1986年的POSTGRES项目，1996年开源后成为全球流行的数据库之一。PostgreSQL的核心特性包括复杂查询、事务完整性、MVCC（多版本并发控制）、外键和触发器，能够高效处理高并发和复杂数据操作。此外，PostgreSQL具有强大的可扩展性，支持自定义数据类型、函数和索引，满足多样化需求。</description></item></channel></rss>