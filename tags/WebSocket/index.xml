<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebSocket on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/WebSocket/</link><description>Recent content in WebSocket on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 12 Jul 2025 17:54:29 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/WebSocket/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在FastAPI中玩转STOMP协议升级，让你的消息传递更高效？</title><link>https://blog.cmdragon.cn/posts/16744b2f460346805c45314bc0c6f751/</link><pubDate>Sat, 12 Jul 2025 17:54:29 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/16744b2f460346805c45314bc0c6f751/</guid><description>STOMP协议是一种基于文本的轻量级消息协议，常用于发布/订阅模式。在FastAPI中实现STOMP协议的核心是通过WebSocket建立连接后，添加STOMP协议解析器。实现过程包括三个阶段：客户端发送&lt;code>CONNECT&lt;/code>帧建立会话，使用&lt;code>SUBSCRIBE&lt;/code>命令订阅消息通道，通过&lt;code>SEND&lt;/code>命令发送消息。示例代码展示了如何在FastAPI中解析STOMP帧、管理会话和订阅关系。最佳实践包括消息广播功能的实现，以及处理常见报错如协议版本不匹配和连接关闭问题。</description></item><item><title>如何用WebSocket打造毫秒级实时协作系统？</title><link>https://blog.cmdragon.cn/posts/da5b64cb0ded23e4d5b1f19ffd5ac53d/</link><pubDate>Thu, 10 Jul 2025 14:59:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/da5b64cb0ded23e4d5b1f19ffd5ac53d/</guid><description>实时协作系统实现多用户同时操作同一文档或白板，并实时同步变更。核心需求包括毫秒级延迟、操作一致性、冲突处理和状态恢复。后端使用WebSocket协议，维护活动连接池，通过Pydantic模型验证操作格式，采用广播模式实现同步。前端使用Vue.js连接WebSocket，处理用户输入并应用远程操作。冲突解决采用操作转换算法，确保最终一致性。部署方案包括Nginx反向代理和Redis集群，压力测试通过websocket-client工具进行。</description></item><item><title>如何让你的WebSocket连接既安全又高效？</title><link>https://blog.cmdragon.cn/posts/eb598d50b76ea1823746ab7cdf49ce05/</link><pubDate>Wed, 09 Jul 2025 16:01:43 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/eb598d50b76ea1823746ab7cdf49ce05/</guid><description>WebSocket安全认证通过JWT令牌在握手阶段进行验证，失败时返回403状态码。跨域配置需在中间件中声明&lt;code>websocket&lt;/code>协议并设置白名单。防御策略包括应用层限流、Nginx限流配置和连接数熔断，防止DDOS攻击。异步处理优化通过连接池调优和任务分流提升性能。常见报错如&lt;code>403 Forbidden&lt;/code>和&lt;code>RuntimeError&lt;/code>需检查Authorization头和CORS配置，并在接收消息时添加异常处理。</description></item><item><title>如何在FastAPI中玩转WebSocket消息处理？</title><link>https://blog.cmdragon.cn/posts/fbf7d6843e430133547057254deb2dfb/</link><pubDate>Mon, 07 Jul 2025 18:10:59 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/fbf7d6843e430133547057254deb2dfb/</guid><description>FastAPI 提供了强大的 WebSocket 支持，适用于多种实时通信场景。通过 &lt;code>WebSocket&lt;/code> 类，可以实现文本消息的接收与发送，支持实时聊天、协同编辑等应用。对于二进制数据传输，使用 &lt;code>receive_bytes()&lt;/code> 和 &lt;code>send_bytes()&lt;/code> 方法，适合处理图片、音频等文件。JSON 消息可通过 Pydantic 模型自动解析和验证，确保数据结构正确。此外，通过 &lt;code>asyncio.wait_for&lt;/code> 实现超时控制，定期发送心跳包维持连接。WebSocket 支持多种消息类型，结合异常处理机制，确保通信的稳定性和可靠性。</description></item><item><title>如何在FastAPI中玩转WebSocket，让实时通信不再烦恼？</title><link>https://blog.cmdragon.cn/posts/0faebb0f6c2b1bde4ba75869f4f67b76/</link><pubDate>Sun, 06 Jul 2025 20:11:20 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/0faebb0f6c2b1bde4ba75869f4f67b76/</guid><description>FastAPI 的 WebSocket 路由通过 &lt;code>@app.websocket&lt;/code> 装饰器声明，支持路径参数和查询参数验证。连接建立时需显式调用 &lt;code>websocket.accept()&lt;/code>，并通过 &lt;code>receive_text()&lt;/code> 和 &lt;code>send_text()&lt;/code> 实现双向通信。握手验证可自定义，失败时返回 403 状态码并关闭连接。连接状态可通过字典维护，心跳检测机制确保连接活跃。常见错误包括 403 握手失败、1006 非正常断开和数据类型错误，需通过正确关闭连接和数据类型处理解决。</description></item><item><title>WebSocket与HTTP协议究竟有何不同？FastAPI如何让长连接变得如此简单？</title><link>https://blog.cmdragon.cn/posts/903448c85701a6a747fc9a4417e2bdc8/</link><pubDate>Sat, 05 Jul 2025 17:08:37 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/903448c85701a6a747fc9a4417e2bdc8/</guid><description>&lt;img src="https://blog.cmdragon.cn/images/7989a41781759816107c155a4591fc73.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/>
&lt;img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png"/>
&lt;p>扫描&lt;a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg">二维码&lt;/a>
关注或者微信搜一搜：&lt;code>编程智域 前端至全栈交流与成长&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat">发现1000+提升效率与开发的AI工具和实用程序&lt;/a>：https://tools.cmdragon.cn/&lt;/p>
&lt;h1 id="第一章websocket协议基础与fastapi定位">第一章：WebSocket协议基础与FastAPI定位&lt;/h1>
&lt;h2 id="11-websocket与http协议核心差异">1.1 WebSocket与HTTP协议核心差异&lt;/h2>
&lt;p>通过对比传统HTTP协议与WebSocket协议的核心特性，我们可以从以下维度理解二者的差异：&lt;/p></description></item><item><title>FastAPI与MongoDB Change Stream的实时数据交响曲</title><link>https://blog.cmdragon.cn/posts/c61df2f044f3ffda6fd2eb4c5dd72620/</link><pubDate>Sun, 25 May 2025 13:04:40 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c61df2f044f3ffda6fd2eb4c5dd72620/</guid><description>MongoDB Change Stream与FastAPI集成可实现毫秒级实时数据处理。Change Stream通过oplog机制捕获数据变更事件，支持insert、update、replace、delete操作监听，具备断点续传和事件过滤能力。集成步骤包括环境准备、基础监听实现、WebSocket实时推送，以及性能优化策略如索引优化、批处理配置和资源控制。生产环境建议使用独立物理节点部署oplog，配置心跳检测，并监控事件处理延迟、内存使用和网络带宽消耗。该方案适用于实时数据分析、即时通讯和物联网等场景。</description></item></channel></rss>