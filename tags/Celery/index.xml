<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Celery on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/Celery/</link><description>Recent content in Celery on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 11 Aug 2025 08:31:32 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/Celery/index.xml" rel="self" type="application/rss+xml"/><item><title>如何让你的FastAPI Celery Worker在压力下优雅起舞？</title><link>https://blog.cmdragon.cn/posts/c3129f4b424d2ed2330484b82ec31875/</link><pubDate>Mon, 11 Aug 2025 08:31:32 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c3129f4b424d2ed2330484b82ec31875/</guid><description>FastAPI 项目中配置 Celery Worker 涉及基础设置、自动扩展和容器化部署。首先，在 celery_app.py 中定义 Celery 应用，配置任务路由和 Redis 作为消息代理。通过命令行参数控制 Worker 的并发数、日志级别和队列监听。自动扩展功能通过 SmartAutoscaler 类实现，根据 CPU 使用率动态调整 Worker 数量。Docker Compose 部署方案包括 Redis 和 Worker 服务，支持多副本和资源限制。监控与日志配置使用结构化日志记录，便于任务追踪。常见错误如 WorkerLostError 和协议不匹配，可通过调整系统设置和协议版本解决。</description></item><item><title>FastAPI与Celery的完美邂逅，如何让异步任务飞起来？</title><link>https://blog.cmdragon.cn/posts/b79c2c1805fe9b1ea28326b5b8f3b709/</link><pubDate>Sun, 10 Aug 2025 07:43:41 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/b79c2c1805fe9b1ea28326b5b8f3b709/</guid><description>FastAPI框架集成Celery的实战指南，首先需要Python 3.8+环境，并安装FastAPI、Celery、Redis等核心依赖包。配置Celery实例时，需设置Redis作为Broker和Backend。异步任务处理流程包括用户请求通过FastAPI路由进入，Celery任务派发，Worker执行任务并存储结果。接口层实现中，通过FastAPI创建任务和查询任务状态的API。任务处理器使用Celery的&lt;code>@shared_task&lt;/code>装饰器定义异步任务。任务监控通过Flower平台进行，配置Celery以发送任务事件。常见报错包括Worker启动失败、任务执行超时和结果反序列化失败，需检查Redis服务、调整任务超时设置和确保任务返回可序列化对象。</description></item><item><title>FastAPI消息持久化与ACK机制：如何确保你的任务永不迷路？</title><link>https://blog.cmdragon.cn/posts/13a59846aaab71b44ab6f3dadc5b5ec7/</link><pubDate>Sat, 09 Aug 2025 04:51:03 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/13a59846aaab71b44ab6f3dadc5b5ec7/</guid><description>FastAPI框架中，消息持久化和ACK确认机制是确保任务可靠执行的关键。默认的内存任务存储存在服务器重启丢失和高并发内存压力问题。通过消息队列和持久化数据库备份实现任务持久化，结合ACK确认机制确保消息被正确处理后才移除。Celery+RabbitMQ集成方案提供高效的任务调度和队列管理。增强型任务模型支持优先级和过期时间设置。常见报错如502 Bad Gateway和422 Validation Error需检查消息队列连接和任务模型字段验证。</description></item><item><title>FastAPI的BackgroundTasks如何玩转生产者-消费者模式？</title><link>https://blog.cmdragon.cn/posts/1549a6bd7e47e7006e7ba8f52bcfe8eb/</link><pubDate>Thu, 07 Aug 2025 23:55:48 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/1549a6bd7e47e7006e7ba8f52bcfe8eb/</guid><description>FastAPI 的 BackgroundTasks 基于 Starlette 实现，采用同步执行机制，确保任务执行与响应返回的时序性。当系统面临单节点处理瓶颈或需要任务顺序性时，可升级为生产者-消费者模式，使用 Redis/RabbitMQ 作为消息队列。通过 Celery 实现分布式任务处理，生产者将任务存入队列，消费者读取并处理任务，结果持久化存储。异常处理包括任务确认机制、死信队列和任务状态追踪，确保系统稳定性和任务可靠性。</description></item><item><title>BackgroundTasks与Celery：谁才是异步任务的终极赢家？</title><link>https://blog.cmdragon.cn/posts/792cac4ce6eb96b5001da15b0d52ef83/</link><pubDate>Wed, 06 Aug 2025 00:27:54 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/792cac4ce6eb96b5001da15b0d52ef83/</guid><description>FastAPI的BackgroundTasks模块适用于短时任务（如邮件发送、日志写入），基于请求-响应后的异步执行机制，但不支持任务持久化和分布式处理。与Celery相比，BackgroundTasks适合处理5秒内的任务，而Celery适合长时间任务和分布式场景。消息队列的核心组件包括Broker、生产者-消费者模式和消息确认机制。混合架构可结合BackgroundTasks和Celery，分别处理快速和慢速任务。长时间任务应使用Celery，避免阻塞FastAPI事件循环。</description></item><item><title>FastAPI的请求-响应周期为何需要后台任务分离？</title><link>https://blog.cmdragon.cn/posts/c7b54d6b3b6b5041654e69e5610bf3b9/</link><pubDate>Thu, 31 Jul 2025 06:11:25 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c7b54d6b3b6b5041654e69e5610bf3b9/</guid><description>FastAPI 的请求-响应周期遵循 ASGI 协议，类似于餐厅点餐流程。同步处理耗时操作会导致服务阻塞，影响性能。通过 &lt;code>BackgroundTasks&lt;/code> 实现后台任务分离，任务分发器创建独立任务单元，工作线程池异步执行。&lt;code>BackgroundTasks&lt;/code> 适用于短时任务，而 Celery 更适合长时间任务和跨进程执行。任务中访问数据库时应重新建立连接，避免依赖生命周期问题。错误处理可通过即时捕获或延迟记录模式实现，推荐使用装饰器封装任务函数。</description></item><item><title>如何让FastAPI与Celery完美联姻，打造高效异步任务处理系统？</title><link>https://blog.cmdragon.cn/posts/627e3b30fd0d5a212f576b83e137d52f/</link><pubDate>Fri, 11 Jul 2025 16:32:44 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/627e3b30fd0d5a212f576b83e137d52f/</guid><description>Celery架构由客户端、消息代理和工作者组成，常用Redis或RabbitMQ作为消息代理。FastAPI与Celery集成时，用户请求通过FastAPI路由发送到Celery任务队列，由工作者处理并存储结果。代码实现包括安装依赖、定义Celery应用、创建任务函数和FastAPI接口。任务状态可通过查询接口获取。常见问题包括任务未执行和结果无法获取，需检查Redis服务、任务模块和存储空间。任务优先级可通过启动worker时指定队列和接口调用时指定优先级来配置。</description></item></channel></rss>