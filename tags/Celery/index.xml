<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Celery on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/Celery/</link><description>Recent content in Celery on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 06 Aug 2025 00:27:54 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/Celery/index.xml" rel="self" type="application/rss+xml"/><item><title>BackgroundTasks与Celery：谁才是异步任务的终极赢家？</title><link>https://blog.cmdragon.cn/posts/792cac4ce6eb96b5001da15b0d52ef83/</link><pubDate>Wed, 06 Aug 2025 00:27:54 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/792cac4ce6eb96b5001da15b0d52ef83/</guid><description>FastAPI的BackgroundTasks模块适用于短时任务（如邮件发送、日志写入），基于请求-响应后的异步执行机制，但不支持任务持久化和分布式处理。与Celery相比，BackgroundTasks适合处理5秒内的任务，而Celery适合长时间任务和分布式场景。消息队列的核心组件包括Broker、生产者-消费者模式和消息确认机制。混合架构可结合BackgroundTasks和Celery，分别处理快速和慢速任务。长时间任务应使用Celery，避免阻塞FastAPI事件循环。</description></item><item><title>FastAPI的请求-响应周期为何需要后台任务分离？</title><link>https://blog.cmdragon.cn/posts/c7b54d6b3b6b5041654e69e5610bf3b9/</link><pubDate>Thu, 31 Jul 2025 06:11:25 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/c7b54d6b3b6b5041654e69e5610bf3b9/</guid><description>FastAPI 的请求-响应周期遵循 ASGI 协议，类似于餐厅点餐流程。同步处理耗时操作会导致服务阻塞，影响性能。通过 &lt;code>BackgroundTasks&lt;/code> 实现后台任务分离，任务分发器创建独立任务单元，工作线程池异步执行。&lt;code>BackgroundTasks&lt;/code> 适用于短时任务，而 Celery 更适合长时间任务和跨进程执行。任务中访问数据库时应重新建立连接，避免依赖生命周期问题。错误处理可通过即时捕获或延迟记录模式实现，推荐使用装饰器封装任务函数。</description></item><item><title>如何让FastAPI与Celery完美联姻，打造高效异步任务处理系统？</title><link>https://blog.cmdragon.cn/posts/627e3b30fd0d5a212f576b83e137d52f/</link><pubDate>Fri, 11 Jul 2025 16:32:44 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/627e3b30fd0d5a212f576b83e137d52f/</guid><description>Celery架构由客户端、消息代理和工作者组成，常用Redis或RabbitMQ作为消息代理。FastAPI与Celery集成时，用户请求通过FastAPI路由发送到Celery任务队列，由工作者处理并存储结果。代码实现包括安装依赖、定义Celery应用、创建任务函数和FastAPI接口。任务状态可通过查询接口获取。常见问题包括任务未执行和结果无法获取，需检查Redis服务、任务模块和存储空间。任务优先级可通过启动worker时指定队列和接口调用时指定优先级来配置。</description></item></channel></rss>