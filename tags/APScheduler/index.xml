<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>APScheduler on cmdragon's Blog</title><link>https://blog.cmdragon.cn/tags/APScheduler/</link><description>Recent content in APScheduler on cmdragon's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 15 Aug 2025 07:43:24 +0800</lastBuildDate><atom:link href="https://blog.cmdragon.cn/tags/APScheduler/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在 FastAPI 中玩转 APScheduler，让任务定时自动执行？</title><link>https://blog.cmdragon.cn/posts/85564dd901c6d9b1a79d320970843caa/</link><pubDate>Fri, 15 Aug 2025 07:43:24 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/85564dd901c6d9b1a79d320970843caa/</guid><description>APScheduler 是一个轻量级且功能强大的 Python 定时任务调度库，支持固定时间间隔、特定时间点或 Cron 式任务调度。它与 FastAPI 无缝集成，用于后台执行周期性任务，如数据清理、邮件发送等，避免阻塞主线程。集成步骤包括安装依赖库、初始化调度器、添加定时任务接口，并通过 Pydantic 模型校验输入。高级应用场景涵盖 Cron 表达式调度、异常处理与重试、持久化存储等。常见报错如 &lt;code>JobLookupError&lt;/code> 和 &lt;code>MaxIterationsReached&lt;/code> 可通过检查任务存在性和校验 Cron 表达式解决。</description></item><item><title>定时任务系统如何让你的Web应用自动完成那些烦人的重复工作？</title><link>https://blog.cmdragon.cn/posts/2b27950aab76203a1af4e9e3deda8699/</link><pubDate>Thu, 14 Aug 2025 05:55:20 +0800</pubDate><guid>https://blog.cmdragon.cn/posts/2b27950aab76203a1af4e9e3deda8699/</guid><description>定时任务系统是Web应用中自动执行任务的重要机制，广泛应用于数据清理、报表生成、状态刷新和批量处理等场景。FastAPI中主要通过后台任务队列和定时调度系统实现，其中APScheduler是最成熟的Python调度库，支持多种调度器和存储方案。APScheduler的集成示例展示了如何在FastAPI中初始化调度器、添加任务以及安全终止调度器。实战案例以电商订单超时处理为例，演示了如何通过定时任务自动取消未支付订单。常见错误包括任务未按预期执行、调度器未启动等，可通过检查任务状态、设置时区等方法解决。</description></item></channel></rss>